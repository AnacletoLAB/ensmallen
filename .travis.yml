dist: xenial
language: rust

# pyo3 currently is only supported by the nightly version
rust:
  - nightly

# Cache cargo symbols for faster build
cache: cargo

# In future we could also add windows testing
jobs:
  include:
    - os: linux
      dist: bionic
    - os: osx
      osx_image: "xcode11.5"

# Dependencies of kcov, used by coverage
addons:
  apt:
    packages:
      - libiberty-dev
      - zlib1g-dev
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - binutils-dev
      - gcc
      - cmake # also required for cargo-update
      - python3
      - python3-pip
      - python3-setuptools
      
before_script:
  - wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
  - tar xzf master.tar.gz
  - cd kcov-master
  - mkdir build
  - cd build
  - cmake -DCMAKE_INSTALL_PREFIX=${HOME}/kcov ..
  - make
  - make install
  - cd ../..
  - rm -rf kcov-master
  - mkdir -p coverage
  - export PATH=$HOME/.cargo/bin:$PATH
  - source ~/.bashrc
  - source ~/.cargo/env
  - cargo install cargo-update || echo "cargo-update already installed"
  - cargo install-update -a # update outdated cached binaries
  - python3 -m pip install maturin pytest coveralls
  - python3 -m pip install -r requirements.txt

# the main build
script:
  # Build, test, bench the graph crate
  - cargo build --verbose --all --manifest-path=graph/Cargo.toml
  - cargo test --verbose --all --manifest-path=graph/Cargo.toml
  # - cargo bench --verbose --all --manifest-path=graph/Cargo.toml
  # Clearing up target directory
  - rm -fdr target
  # Build the bindings
  - maturin build --release
  # Install the binding
  - python3 -m pip install --user --upgrade ./target/wheels/*.whl
  # Run the python tests
  - python3 -m pytest -s ./pytests

after_success:
  #- curl -L https://github.com/SimonKagstrom/kcov/archive/master.tar.gz | tar xf
  #- cd kcov-master && mkdir build && cd build && cmake .. && make &&  sudo make install && cd ../.. && rm -rf kcov-master
  - cd ./graph && bash coverage.sh
  - bash <(curl -s https://codecov.io/bash)
    