digraph deps {
	node [shape=box];

	"Graph::walk_iter"
	"get_loading_bar"
	"Graph::complete_walks_iter"
	"Graph::get_unchecked_destination_node_id_by_edge_id"
	"encode_edge"
	"WalksParameters::validate"
	"Graph::has_weights"
	"decode_edge"
	"Graph::iter_node_neighbours_ids"
	"Graph::get_node_edges_and_destinations"
	"update_explore_weight_transition"
	"Graph::update_node_transition"
	"Graph::get_node_ids_from_edge_id"
	"Graph::extract_node"
	"Graph::get_minmax_edge_ids_by_source_node_id"
	"cooccurence_matrix"
	"update_return_weight_transition"
	"Graph::encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_edges_number"
	"Graph::new"
	"set_numeric_ids"
	"Graph::get_node_transition"
	"Graph::get_nodes_number"
	"WalksParameters::is_first_order_walk"
	"Graph::extract_edge"
	"Graph::extract_uniform_node"
	"rust_update_return_explore_weight_transition"
	"rust_update_explore_weight_transition"
	"WalkWeights::is_first_order_walk"
	"Graph::get_self_loop_number"
	"Graph::iter_unique_sources"
	"Graph::get_weighted_transitions"
	"Graph::has_edges"
	"Graph::get_directed_edges_number"
	"Graph::iter_unchecked_edge_ids_by_source_node_id"
	"Graph::get_unique_source_nodes_number"
	"Graph::get_unique_source"
	"Graph::get_undirected_edges_number"
	"SingleWalkParameters::is_first_order_walk"
	"Graph::uniform_walk"
	"Graph::get_destinations_slice"
	"Graph::has_selfloops"
	"Graph::get_edge_transition"
	"update_return_explore_weight_transition"
	"Graph::cooccurence_matrix"
	"Graph::single_walk"
	"Graph::decode_edge"

	"Graph::walk_iter" -> "WalkWeights::is_first_order_walk"
	"Graph::walk_iter" -> "SingleWalkParameters::is_first_order_walk"
	"Graph::walk_iter" -> "WalksParameters::validate"
	"Graph::walk_iter" -> "WalksParameters::is_first_order_walk"
	"Graph::walk_iter" -> "Graph::single_walk"
	"Graph::walk_iter" -> "Graph::uniform_walk"
	"Graph::walk_iter" -> "Graph::has_weights"
	"get_loading_bar" -> "Graph::new"
	"Graph::complete_walks_iter" -> "Graph::walk_iter"
	"Graph::complete_walks_iter" -> "Graph::get_unique_source"
	"Graph::complete_walks_iter" -> "Graph::has_edges"
	"Graph::complete_walks_iter" -> "Graph::get_unique_source_nodes_number"
	"Graph::get_unchecked_destination_node_id_by_edge_id" -> "Graph::get_node_ids_from_edge_id"
	"WalksParameters::validate" -> "Graph::iter_unique_sources"
	"Graph::iter_node_neighbours_ids" -> "Graph::new"
	"Graph::iter_node_neighbours_ids" -> "encode_edge"
	"Graph::iter_node_neighbours_ids" -> "decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::encode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::iter_unchecked_edge_ids_by_source_node_id"
	"Graph::get_node_edges_and_destinations" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::get_node_edges_and_destinations" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_node_edges_and_destinations" -> "Graph::iter_node_neighbours_ids"
	"update_explore_weight_transition" -> "rust_update_explore_weight_transition"
	"update_explore_weight_transition" -> "update_explore_weight_transition"
	"Graph::get_node_ids_from_edge_id" -> "decode_edge"
	"Graph::get_node_ids_from_edge_id" -> "Graph::decode_edge"
	"Graph::extract_node" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_node" -> "Graph::get_node_transition"
	"Graph::get_minmax_edge_ids_by_source_node_id" -> "Graph::get_unchecked_edge_id_from_tuple"
	"cooccurence_matrix" -> "Graph::new"
	"cooccurence_matrix" -> "get_loading_bar"
	"Graph::encode_edge" -> "encode_edge"
	"Graph::encode_edge" -> "Graph::encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple" -> "encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple" -> "Graph::encode_edge"
	"Graph::get_edges_number" -> "Graph::get_undirected_edges_number"
	"Graph::get_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::new" -> "Graph::new"
	"Graph::new" -> "set_numeric_ids"
	"Graph::get_node_transition" -> "Graph::get_weighted_transitions"
	"Graph::get_node_transition" -> "Graph::update_node_transition"
	"WalksParameters::is_first_order_walk" -> "WalkWeights::is_first_order_walk"
	"WalksParameters::is_first_order_walk" -> "SingleWalkParameters::is_first_order_walk"
	"WalksParameters::is_first_order_walk" -> "WalksParameters::is_first_order_walk"
	"Graph::extract_edge" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_edge" -> "Graph::get_edge_transition"
	"Graph::extract_edge" -> "Graph::has_selfloops"
	"Graph::extract_uniform_node" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_uniform_node" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::iter_unique_sources" -> "Graph::new"
	"Graph::iter_unique_sources" -> "Graph::get_nodes_number"
	"Graph::has_edges" -> "Graph::get_edges_number"
	"Graph::iter_unchecked_edge_ids_by_source_node_id" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_unique_source_nodes_number" -> "Graph::get_nodes_number"
	"Graph::get_undirected_edges_number" -> "Graph::get_self_loop_number"
	"Graph::get_undirected_edges_number" -> "Graph::get_directed_edges_number"
	"SingleWalkParameters::is_first_order_walk" -> "WalkWeights::is_first_order_walk"
	"SingleWalkParameters::is_first_order_walk" -> "SingleWalkParameters::is_first_order_walk"
	"SingleWalkParameters::is_first_order_walk" -> "WalksParameters::is_first_order_walk"
	"Graph::uniform_walk" -> "Graph::extract_uniform_node"
	"Graph::get_edge_transition" -> "update_return_weight_transition"
	"Graph::get_edge_transition" -> "update_explore_weight_transition"
	"Graph::get_edge_transition" -> "update_return_explore_weight_transition"
	"Graph::get_edge_transition" -> "Graph::get_weighted_transitions"
	"Graph::get_edge_transition" -> "Graph::update_node_transition"
	"update_return_explore_weight_transition" -> "rust_update_return_explore_weight_transition"
	"update_return_explore_weight_transition" -> "update_return_explore_weight_transition"
	"Graph::cooccurence_matrix" -> "cooccurence_matrix"
	"Graph::cooccurence_matrix" -> "Graph::cooccurence_matrix"
	"Graph::cooccurence_matrix" -> "Graph::complete_walks_iter"
	"Graph::cooccurence_matrix" -> "Graph::has_edges"
	"Graph::cooccurence_matrix" -> "Graph::get_unique_source_nodes_number"
	"Graph::single_walk" -> "Graph::get_node_edges_and_destinations"
	"Graph::single_walk" -> "Graph::get_destinations_slice"
	"Graph::single_walk" -> "Graph::extract_node"
	"Graph::single_walk" -> "Graph::extract_edge"
	"Graph::decode_edge" -> "decode_edge"
	"Graph::decode_edge" -> "Graph::decode_edge"
}