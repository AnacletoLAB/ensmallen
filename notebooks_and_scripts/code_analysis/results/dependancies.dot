digraph deps {
	node [shape=box];

	"Graph::get_node_edges_and_destinations"
	"Graph::get_destinations_slice"
	"build_operator_graph_name"
	"generic_string_operator"
	"generic_integer_operator"
	"validate_operator_terms"
	"Graph::is_compatible"
	"Graph::generic_operator"
	"bitor"
	"bitxor"
	"sub"
	"bitand"
	"Graph::get_unchecked_node_name_by_node_id"
	"Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::get_unchecked_weight_by_edge_id"
	"Graph::get_unchecked_node_type_id_by_node_id"
	"Graph::get_unchecked_node_id_by_node_name"
	"Graph::get_unchecked_edge_type_id_by_edge_type_name"
	"Graph::get_unchecked_edge_type_name_by_edge_type_id"
	"Graph::get_unchecked_edge_count_by_edge_type_id"
	"Graph::get_unchecked_node_count_by_node_type_id"
	"Graph::get_unchecked_node_destinations_by_node_id"
	"Graph::get_unchecked_edge_id_by_node_ids"
	"Graph::get_unchecked_edge_ids_range"
	"Graph::get_unchecked_minmax_edge_ids_by_node_ids"
	"Graph::get_unchecked_edge_degreee_by_node_ids"
	"default"
	"WalkWeights::validate_weight"
	"WalkWeights::is_first_order_walk"
	"SingleWalkParameters::is_first_order_walk"
	"WalksParameters::set_iterations"
	"WalksParameters::get_iterations"
	"WalksParameters::set_max_neighbours"
	"WalksParameters::set_random_state"
	"WalksParameters::set_dense_node_mapping"
	"WalksParameters::set_return_weight"
	"WalksParameters::set_explore_weight"
	"WalksParameters::set_change_node_type_weight"
	"WalksParameters::set_change_edge_type_weight"
	"WalksParameters::validate"
	"WalksParameters::is_first_order_walk"
	"Graph::iter_edges_from_random_state"
	"Graph::iter_on_edges_with_preference"
	"Graph::kruskal"
	"Graph::random_spanning_arborescence_kruskal"
	"Graph::spanning_arborescence_kruskal"
	"Graph::spanning_arborescence"
	"Graph::connected_components"
	"CSVFileWriter::write_lines"
	"compose_lines"
	"Graph::new"
	"Graph::overlaps"
	"Graph::contains"
	"fast_u32_modulo"
	"word2vec"
	"cooccurence_matrix"
	"Graph::node2vec"
	"Graph::cooccurence_matrix"
	"Graph::get_neighbours_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_ids"
	"Graph::link_prediction_degrees"
	"Graph::link_prediction_ids"
	"get_loading_bar"
	"Graph::compute_edge_ids_vector"
	"validate_weight"
	"parse_weight"
	"Graph::are_nodes_remappable"
	"Graph::remap"
	"Graph::is_singleton_by_node_id"
	"Graph::is_singleton_with_selfloops_by_node_id"
	"Graph::is_singleton_by_node_name"
	"Graph::has_node_by_node_name"
	"Graph::has_edge_by_node_ids"
	"Graph::has_edge_with_type_by_node_ids"
	"Graph::is_trap_node_by_node_id"
	"Graph::has_node_with_type_by_node_name"
	"Graph::has_edge_by_node_names"
	"Graph::has_edge_with_type_by_node_names"
	"Graph::get_filter_bitmap"
	"random_string"
	"random_path"
	"load_ppi"
	"load_cora"
	"first_order_walker"
	"second_order_walker"
	"validate_vocabularies"
	"default_holdout_test_suite"
	"test_spanning_arborescence_bader"
	"test_graph_properties"
	"test_random_walks"
	"test_edge_holdouts"
	"test_remove_components"
	"test_kfold"
	"test_negative_edges_generation"
	"test_subgraph_generation"
	"test_dump_graph"
	"test_embiggen_preprocessing"
	"test_graph_filter"
	"test_edgelist_generation"
	"test_nodelabel_holdouts"
	"test_edgelabel_holdouts"
	"test_graph_removes"
	"test_clone_and_setters"
	"test_graph_remapping"
	"_default_test_suite"
	"default_test_suite"
	"Graph::enable"
	"Graph::disable_all"
	"Graph::strongly_connected_components"
	"Graph::get_edge_quadruple"
	"Graph::get_edge_triple"
	"Graph::get_top_k_central_nodes_ids"
	"Graph::get_top_k_central_node_names"
	"Graph::get_node_type_id_by_node_id"
	"Graph::get_edge_type_id_by_edge_id"
	"Graph::get_node_type_name_by_node_id"
	"Graph::get_edge_type_name_by_edge_id"
	"Graph::get_edge_type_name_by_edge_type_id"
	"Graph::get_weight_by_edge_id"
	"Graph::get_weight_by_node_ids"
	"Graph::get_weight_with_type_by_node_ids"
	"Graph::get_weight_with_type_by_node_names"
	"Graph::get_weight_by_node_names"
	"Graph::get_node_name_by_node_id"
	"Graph::get_node_id_by_node_name"
	"Graph::get_node_type_id_by_node_name"
	"Graph::get_node_type_name_by_node_name"
	"Graph::get_edge_count_by_edge_type_id"
	"Graph::get_edge_type_id_by_edge_type_name"
	"Graph::get_edge_count_by_edge_type_name"
	"Graph::get_node_type_id_by_node_type_name"
	"Graph::get_node_count_by_node_type_id"
	"Graph::get_node_count_by_node_type_name"
	"Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::get_destination_node_id_by_edge_id"
	"Graph::get_node_neighbours_by_node_id"
	"Graph::get_node_neighbour_ids_by_node_name"
	"Graph::get_node_neighbour_names_by_node_name"
	"Graph::get_edge_id_with_type_by_node_ids"
	"Graph::get_edge_id_by_node_names"
	"Graph::get_edge_id_with_type_by_node_names"
	"Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::get_node_type_ids_by_node_type_names"
	"Graph::get_minmax_edge_ids_by_node_ids"
	"Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_node_type_name_by_node_type_id"
	"Graph::get_node_type_names_by_node_type_ids"
	"Graph::get_node_degree_by_node_id"
	"Graph::filter"
	"from_usize"
	"read"
	"write"
	"Graph::degrees_product"
	"Graph::jaccard_index"
	"Graph::adamic_adar_index"
	"Graph::resource_allocation_index"
	"Graph::traps_rate"
	"Graph::get_node_degrees_mean"
	"Graph::get_undirected_edges_number"
	"Graph::get_unique_undirected_edges_number"
	"Graph::get_edges_number"
	"Graph::get_unique_edges_number"
	"Graph::get_node_degrees_median"
	"Graph::get_max_node_degree"
	"Graph::get_min_node_degree"
	"Graph::get_node_degrees_mode"
	"Graph::get_selfloop_number"
	"Graph::get_unique_selfloop_number"
	"Graph::get_selfloop_rate"
	"Graph::connected_components_number"
	"Graph::get_singleton_nodes_number"
	"Graph::get_singleton_nodes_with_selfloops_number"
	"Graph::get_not_singleton_nodes_number"
	"Graph::get_density"
	"Graph::report"
	"Graph::shared_components_number"
	"Graph::merged_components_number"
	"Graph::overlap_textual_report"
	"Graph::format_list"
	"Graph::format_node_list"
	"Graph::format_node_type_list"
	"Graph::format_edge_type_list"
	"Graph::textual_report"
	"Graph::remove"
	"Graph::remove_components"
	"Graph::set_name"
	"Graph::invalidate_report"
	"Graph::set_all_edge_types"
	"Graph::set_all_node_types"
	"update_return_weight_transition"
	"rust_update_explore_weight_transition"
	"rust_update_return_explore_weight_transition"
	"update_explore_weight_transition"
	"update_return_explore_weight_transition"
	"test_update_explore_weight_transition"
	"test_update_return_explore_weight_transition"
	"test_update_return_weight_transition"
	"Graph::get_weighted_transitions"
	"Graph::update_node_transition"
	"Graph::get_node_transition"
	"Graph::get_edge_transition"
	"Graph::extract_uniform_node"
	"Graph::extract_node"
	"Graph::extract_edge"
	"Graph::random_walks_iter"
	"Graph::complete_walks_iter"
	"Graph::walk_iter"
	"Graph::single_walk"
	"Graph::uniform_walk"
	"encode_edge"
	"encode_max_edge"
	"decode_edge"
	"get_node_bits"
	"Graph::encode_edge"
	"Graph::decode_edge"
	"Graph::get_node_ids_from_edge_id"
	"Graph::get_edge_id_by_node_ids"
	"Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_unique_source"
	"Graph::get_bipartite_edges"
	"Graph::get_bipartite_edge_names"
	"Graph::get_star_edges"
	"Graph::get_star_edge_names"
	"Graph::get_clique_edges"
	"Graph::get_clique_edge_names"
	"Graph::has_nodes"
	"Graph::has_edges"
	"Graph::get_name"
	"Graph::get_trap_nodes_number"
	"Graph::has_trap_nodes"
	"Graph::is_directed"
	"Graph::has_edge_weights"
	"Graph::has_edge_types"
	"Graph::has_selfloops"
	"Graph::has_singletons"
	"Graph::has_singletons_with_selfloops"
	"Graph::get_sources"
	"Graph::get_source_names"
	"Graph::get_destinations"
	"Graph::get_destination_names"
	"Graph::get_node_names"
	"Graph::get_nodes"
	"Graph::get_edge_types"
	"Graph::get_edge_type_names"
	"Graph::get_node_types"
	"Graph::get_weights"
	"Graph::get_min_weight"
	"Graph::get_max_weight"
	"Graph::get_node_type_names"
	"Graph::get_unique_directed_edges_number"
	"Graph::get_max_encodable_edge_number"
	"Graph::get_nodes_mapping"
	"Graph::get_edges"
	"Graph::get_edge_names"
	"Graph::has_node_types"
	"Graph::has_multilabel_node_types"
	"Graph::get_unknown_node_types_number"
	"Graph::get_minimum_node_types_number"
	"Graph::has_unknown_node_types"
	"Graph::get_unknown_edge_types_number"
	"Graph::get_minimum_edge_types_number"
	"Graph::has_unknown_edge_types"
	"Graph::get_nodes_number"
	"Graph::get_node_components_vector"
	"Graph::get_directed_edges_number"
	"Graph::get_edge_types_number"
	"Graph::get_node_types_number"
	"Graph::get_node_degrees"
	"Graph::get_not_singletons"
	"Graph::get_dense_node_mapping"
	"Graph::is_multigraph"
	"Graph::get_multigraph_edges_number"
	"Graph::get_outbounds"
	"Graph::get_unique_source_nodes_number"
	"Graph::get_edge_type_counts"
	"Graph::get_edge_type_counts_hashmap"
	"Graph::get_node_type_counts"
	"Graph::get_node_type_counts_hashmap"
	"normalize_value"
	"unchecked_insert"
	"build_reverse_mapping"
	"is_empty"
	"unchecked_translate"
	"translate"
	"keys"
	"set_numeric_ids"
	"eq"
	"Graph::iter_unchecked_edge_ids_by_source_node_id"
	"Graph::iter_node_degrees"
	"Graph::par_iter_node_degrees"
	"Graph::iter_singleton_node_ids"
	"Graph::iter_singleton_with_selfloops_node_ids"
	"Graph::iter_node_neighbours_ids"
	"Graph::iter_node_neighbours"
	"Graph::iter_sources_ids"
	"Graph::par_iter_sources_ids"
	"Graph::iter_destinations_ids"
	"Graph::par_iter_destinations_ids"
	"Graph::iter_node_ids"
	"Graph::iter_nodes"
	"Graph::iter_edge_ids"
	"Graph::iter_edges"
	"Graph::par_iter_edge_ids"
	"Graph::par_iter_edges"
	"Graph::iter_edges_with_type_ids"
	"Graph::iter_edges_with_type"
	"Graph::par_iter_edge_with_type"
	"Graph::par_iter_edge_with_type_ids"
	"Graph::par_iter_edge_with_type_and_weight"
	"Graph::iter_edge_with_type_and_weight"
	"Graph::par_iter_edge_with_type_and_weight_ids"
	"Graph::iter_edge_with_type_and_weight_ids"
	"Graph::iter_unique_edges"
	"Graph::iter_edge_ids_by_node_ids"
	"Graph::iter_unique_sources"
	"Graph::from_sorted_csv"
	"Graph::from_unsorted_csv"
	"hash_float"
	"Graph::compute_hash"
	"hash"
	"check_numeric_ids_compatibility"
	"parse_node_ids"
	"parse_node_type_ids"
	"parse_edges_node_ids"
	"parse_edge_type_ids_vocabulary"
	"parse_sorted_edges"
	"parse_unsorted_quadruples"
	"parse_integer_unsorted_edges"
	"parse_string_unsorted_edges"
	"build_edges"
	"parse_nodes"
	"parse_string_edges"
	"parse_integer_edges"
	"Graph::build_graph"
	"Graph::from_string_unsorted"
	"Graph::from_integer_unsorted"
	"Graph::from_string_sorted"
	"Graph::sample_negatives"
	"Graph::get_holdouts_elements_number"
	"Graph::get_holdouts_edges_number"
	"Graph::edge_holdout"
	"Graph::connected_holdout"
	"Graph::random_holdout"
	"Graph::node_label_holdout"
	"Graph::edge_label_holdout"
	"Graph::random_subgraph"
	"Graph::kfold"

	"Graph::get_node_edges_and_destinations" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::get_node_edges_and_destinations" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_node_edges_and_destinations" -> "Graph::iter_node_neighbours_ids"
	"generic_string_operator" -> "build_operator_graph_name"
	"generic_string_operator" -> "Graph::has_node_by_node_name"
	"generic_string_operator" -> "Graph::has_edge_with_type_by_node_names"
	"generic_string_operator" -> "Graph::get_node_type_name_by_node_id"
	"generic_string_operator" -> "Graph::get_node_id_by_node_name"
	"generic_string_operator" -> "Graph::filter"
	"generic_string_operator" -> "Graph::has_edge_weights"
	"generic_string_operator" -> "Graph::has_edge_types"
	"generic_string_operator" -> "Graph::has_node_types"
	"generic_string_operator" -> "Graph::iter_nodes"
	"generic_string_operator" -> "Graph::iter_edge_with_type_and_weight"
	"generic_string_operator" -> "Graph::from_string_unsorted"
	"generic_integer_operator" -> "build_operator_graph_name"
	"generic_integer_operator" -> "Graph::has_edge_with_type_by_node_ids"
	"generic_integer_operator" -> "Graph::filter"
	"generic_integer_operator" -> "Graph::has_edge_weights"
	"generic_integer_operator" -> "Graph::has_edge_types"
	"generic_integer_operator" -> "Graph::iter_edge_with_type_and_weight_ids"
	"generic_integer_operator" -> "Graph::from_integer_unsorted"
	"validate_operator_terms" -> "Graph::has_edge_weights"
	"validate_operator_terms" -> "Graph::has_edge_types"
	"validate_operator_terms" -> "Graph::has_node_types"
	"Graph::is_compatible" -> "validate_operator_terms"
	"Graph::generic_operator" -> "generic_string_operator"
	"Graph::generic_operator" -> "generic_integer_operator"
	"Graph::generic_operator" -> "Graph::is_compatible"
	"bitor" -> "Graph::generic_operator"
	"bitor" -> "Graph::has_trap_nodes"
	"bitor" -> "Graph::has_singletons"
	"bitor" -> "Graph::has_singletons_with_selfloops"
	"bitxor" -> "Graph::generic_operator"
	"bitxor" -> "Graph::has_selfloops"
	"sub" -> "Graph::generic_operator"
	"sub" -> "Graph::has_selfloops"
	"bitand" -> "Graph::generic_operator"
	"bitand" -> "Graph::has_selfloops"
	"Graph::get_unchecked_node_name_by_node_id" -> "unchecked_translate"
	"Graph::get_unchecked_node_name_by_node_id" -> "translate"
	"Graph::get_unchecked_edge_type_name_by_edge_type_id" -> "unchecked_translate"
	"Graph::get_unchecked_edge_type_name_by_edge_type_id" -> "translate"
	"Graph::get_unchecked_node_destinations_by_node_id" -> "Graph::get_node_edges_and_destinations"
	"Graph::get_unchecked_node_destinations_by_node_id" -> "Graph::get_destinations_slice"
	"Graph::get_unchecked_edge_id_by_node_ids" -> "Graph::get_unchecked_edge_ids_range"
	"Graph::get_unchecked_edge_id_by_node_ids" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_unchecked_edge_ids_range" -> "Graph::get_unchecked_minmax_edge_ids_by_node_ids"
	"Graph::get_unchecked_minmax_edge_ids_by_node_ids" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_unchecked_edge_degreee_by_node_ids" -> "Graph::get_unchecked_minmax_edge_ids_by_node_ids"
	"default" -> "Graph::new"
	"SingleWalkParameters::is_first_order_walk" -> "WalkWeights::is_first_order_walk"
	"SingleWalkParameters::is_first_order_walk" -> "SingleWalkParameters::is_first_order_walk"
	"SingleWalkParameters::is_first_order_walk" -> "WalksParameters::is_first_order_walk"
	"WalksParameters::set_return_weight" -> "WalkWeights::validate_weight"
	"WalksParameters::set_return_weight" -> "validate_weight"
	"WalksParameters::set_explore_weight" -> "WalkWeights::validate_weight"
	"WalksParameters::set_explore_weight" -> "validate_weight"
	"WalksParameters::set_change_node_type_weight" -> "WalkWeights::validate_weight"
	"WalksParameters::set_change_node_type_weight" -> "validate_weight"
	"WalksParameters::set_change_edge_type_weight" -> "WalkWeights::validate_weight"
	"WalksParameters::set_change_edge_type_weight" -> "validate_weight"
	"WalksParameters::validate" -> "Graph::iter_unique_sources"
	"WalksParameters::is_first_order_walk" -> "WalkWeights::is_first_order_walk"
	"WalksParameters::is_first_order_walk" -> "SingleWalkParameters::is_first_order_walk"
	"WalksParameters::is_first_order_walk" -> "WalksParameters::is_first_order_walk"
	"Graph::iter_edges_from_random_state" -> "Graph::get_node_ids_from_edge_id"
	"Graph::iter_edges_from_random_state" -> "Graph::get_directed_edges_number"
	"Graph::iter_on_edges_with_preference" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::iter_on_edges_with_preference" -> "Graph::iter_edges_from_random_state"
	"Graph::iter_on_edges_with_preference" -> "Graph::new"
	"Graph::iter_on_edges_with_preference" -> "Graph::contains"
	"Graph::iter_on_edges_with_preference" -> "get_loading_bar"
	"Graph::iter_on_edges_with_preference" -> "Graph::get_directed_edges_number"
	"Graph::kruskal" -> "Graph::new"
	"Graph::kruskal" -> "Graph::get_singleton_nodes_number"
	"Graph::kruskal" -> "Graph::has_nodes"
	"Graph::kruskal" -> "Graph::has_edges"
	"Graph::kruskal" -> "Graph::has_singletons"
	"Graph::kruskal" -> "Graph::get_nodes_number"
	"Graph::kruskal" -> "Graph::iter_singleton_node_ids"
	"Graph::kruskal" -> "Graph::iter_singleton_with_selfloops_node_ids"
	"Graph::random_spanning_arborescence_kruskal" -> "Graph::iter_on_edges_with_preference"
	"Graph::random_spanning_arborescence_kruskal" -> "Graph::kruskal"
	"Graph::spanning_arborescence_kruskal" -> "Graph::kruskal"
	"Graph::spanning_arborescence_kruskal" -> "get_loading_bar"
	"Graph::spanning_arborescence_kruskal" -> "Graph::get_unique_edges_number"
	"Graph::spanning_arborescence_kruskal" -> "Graph::get_name"
	"Graph::spanning_arborescence_kruskal" -> "Graph::iter_unique_edges"
	"Graph::spanning_arborescence" -> "sub"
	"Graph::spanning_arborescence" -> "Graph::new"
	"Graph::spanning_arborescence" -> "get_loading_bar"
	"Graph::spanning_arborescence" -> "Graph::is_singleton_by_node_id"
	"Graph::spanning_arborescence" -> "Graph::get_name"
	"Graph::spanning_arborescence" -> "Graph::has_singletons"
	"Graph::spanning_arborescence" -> "Graph::get_nodes_number"
	"Graph::spanning_arborescence" -> "Graph::iter_node_neighbours_ids"
	"Graph::connected_components" -> "sub"
	"Graph::connected_components" -> "Graph::new"
	"Graph::connected_components" -> "get_loading_bar"
	"Graph::connected_components" -> "Graph::is_singleton_by_node_id"
	"Graph::connected_components" -> "Graph::is_singleton_with_selfloops_by_node_id"
	"Graph::connected_components" -> "Graph::get_edges_number"
	"Graph::connected_components" -> "Graph::has_nodes"
	"Graph::connected_components" -> "Graph::get_name"
	"Graph::connected_components" -> "Graph::has_singletons"
	"Graph::connected_components" -> "Graph::get_nodes_number"
	"Graph::connected_components" -> "Graph::iter_node_neighbours_ids"
	"CSVFileWriter::write_lines" -> "Graph::new"
	"CSVFileWriter::write_lines" -> "get_loading_bar"
	"CSVFileWriter::write_lines" -> "write"
	"Graph::new" -> "Graph::new"
	"Graph::new" -> "set_numeric_ids"
	"Graph::overlaps" -> "Graph::is_compatible"
	"Graph::overlaps" -> "Graph::has_edge_with_type_by_node_ids"
	"Graph::overlaps" -> "Graph::has_edge_with_type_by_node_names"
	"Graph::overlaps" -> "Graph::par_iter_edge_with_type"
	"Graph::overlaps" -> "Graph::par_iter_edge_with_type_ids"
	"Graph::contains" -> "Graph::is_compatible"
	"Graph::contains" -> "Graph::has_edge_with_type_by_node_ids"
	"Graph::contains" -> "Graph::has_edge_with_type_by_node_names"
	"Graph::contains" -> "Graph::par_iter_edge_with_type"
	"Graph::contains" -> "Graph::par_iter_edge_with_type_ids"
	"cooccurence_matrix" -> "Graph::new"
	"cooccurence_matrix" -> "get_loading_bar"
	"Graph::node2vec" -> "word2vec"
	"Graph::node2vec" -> "Graph::random_walks_iter"
	"Graph::cooccurence_matrix" -> "cooccurence_matrix"
	"Graph::cooccurence_matrix" -> "Graph::cooccurence_matrix"
	"Graph::cooccurence_matrix" -> "Graph::complete_walks_iter"
	"Graph::cooccurence_matrix" -> "Graph::has_edges"
	"Graph::cooccurence_matrix" -> "Graph::get_unique_source_nodes_number"
	"Graph::get_neighbours_by_node_id" -> "Graph::get_unchecked_node_destinations_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_id" -> "Graph::get_unchecked_node_type_id_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_id" -> "Graph::get_neighbours_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_ids" -> "Graph::get_node_label_prediction_tuple_by_node_id"
	"Graph::get_node_label_prediction_tuple_by_node_ids" -> "Graph::has_node_types"
	"Graph::link_prediction_degrees" -> "Graph::link_prediction_ids"
	"Graph::link_prediction_degrees" -> "Graph::get_node_degree_by_node_id"
	"Graph::link_prediction_degrees" -> "Graph::get_max_node_degree"
	"Graph::link_prediction_ids" -> "fast_u32_modulo"
	"Graph::link_prediction_ids" -> "Graph::has_edge_by_node_ids"
	"Graph::link_prediction_ids" -> "Graph::get_node_ids_from_edge_id"
	"Graph::link_prediction_ids" -> "Graph::has_selfloops"
	"Graph::link_prediction_ids" -> "Graph::get_nodes_number"
	"Graph::link_prediction_ids" -> "Graph::get_directed_edges_number"
	"get_loading_bar" -> "Graph::new"
	"Graph::compute_edge_ids_vector" -> "Graph::get_unchecked_minmax_edge_ids_by_node_ids"
	"Graph::are_nodes_remappable" -> "Graph::has_node_with_type_by_node_name"
	"Graph::are_nodes_remappable" -> "Graph::get_nodes_number"
	"Graph::are_nodes_remappable" -> "Graph::iter_nodes"
	"Graph::remap" -> "Graph::get_unchecked_node_id_by_node_name"
	"Graph::remap" -> "Graph::get_unchecked_edge_type_id_by_edge_type_name"
	"Graph::remap" -> "get_loading_bar"
	"Graph::remap" -> "Graph::are_nodes_remappable"
	"Graph::remap" -> "Graph::has_trap_nodes"
	"Graph::remap" -> "Graph::has_edge_weights"
	"Graph::remap" -> "Graph::has_edge_types"
	"Graph::remap" -> "Graph::has_singletons"
	"Graph::remap" -> "Graph::has_singletons_with_selfloops"
	"Graph::remap" -> "Graph::get_directed_edges_number"
	"Graph::remap" -> "Graph::iter_edge_with_type_and_weight"
	"Graph::remap" -> "Graph::from_integer_unsorted"
	"Graph::is_singleton_by_node_id" -> "Graph::get_node_degree_by_node_id"
	"Graph::is_singleton_by_node_id" -> "Graph::has_singletons"
	"Graph::is_singleton_with_selfloops_by_node_id" -> "Graph::contains"
	"Graph::is_singleton_by_node_name" -> "Graph::is_singleton_by_node_id"
	"Graph::is_singleton_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::has_node_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::has_edge_by_node_ids" -> "Graph::get_edge_id_by_node_ids"
	"Graph::has_edge_with_type_by_node_ids" -> "Graph::get_edge_id_with_type_by_node_ids"
	"Graph::is_trap_node_by_node_id" -> "Graph::get_node_degree_by_node_id"
	"Graph::has_node_with_type_by_node_name" -> "Graph::get_node_type_name_by_node_id"
	"Graph::has_node_with_type_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::has_edge_by_node_names" -> "Graph::get_edge_id_by_node_names"
	"Graph::has_edge_with_type_by_node_names" -> "Graph::get_edge_id_with_type_by_node_names"
	"Graph::get_filter_bitmap" -> "Graph::new"
	"Graph::get_filter_bitmap" -> "Graph::contains"
	"Graph::get_filter_bitmap" -> "Graph::get_node_id_by_node_name"
	"Graph::get_filter_bitmap" -> "Graph::get_node_type_ids_by_node_type_names"
	"Graph::get_filter_bitmap" -> "Graph::iter_node_ids"
	"random_path" -> "Graph::new"
	"random_path" -> "random_string"
	"load_ppi" -> "Graph::new"
	"load_ppi" -> "Graph::report"
	"load_ppi" -> "Graph::textual_report"
	"load_ppi" -> "Graph::has_edge_weights"
	"load_ppi" -> "Graph::has_edge_types"
	"load_ppi" -> "Graph::has_selfloops"
	"load_ppi" -> "Graph::has_node_types"
	"load_ppi" -> "Graph::from_unsorted_csv"
	"load_cora" -> "Graph::new"
	"load_cora" -> "Graph::from_unsorted_csv"
	"first_order_walker" -> "WalksParameters::set_iterations"
	"first_order_walker" -> "WalksParameters::set_random_state"
	"first_order_walker" -> "WalksParameters::set_dense_node_mapping"
	"first_order_walker" -> "Graph::new"
	"first_order_walker" -> "Graph::get_dense_node_mapping"
	"second_order_walker" -> "WalksParameters::set_iterations"
	"second_order_walker" -> "WalksParameters::set_max_neighbours"
	"second_order_walker" -> "WalksParameters::set_random_state"
	"second_order_walker" -> "WalksParameters::set_dense_node_mapping"
	"second_order_walker" -> "WalksParameters::set_return_weight"
	"second_order_walker" -> "WalksParameters::set_explore_weight"
	"second_order_walker" -> "WalksParameters::set_change_node_type_weight"
	"second_order_walker" -> "WalksParameters::set_change_edge_type_weight"
	"second_order_walker" -> "Graph::new"
	"second_order_walker" -> "Graph::get_dense_node_mapping"
	"validate_vocabularies" -> "Graph::report"
	"validate_vocabularies" -> "Graph::textual_report"
	"validate_vocabularies" -> "Graph::has_edge_weights"
	"validate_vocabularies" -> "Graph::has_edge_types"
	"validate_vocabularies" -> "Graph::has_node_types"
	"validate_vocabularies" -> "is_empty"
	"default_holdout_test_suite" -> "Graph::overlaps"
	"default_holdout_test_suite" -> "Graph::contains"
	"default_holdout_test_suite" -> "validate_vocabularies"
	"test_spanning_arborescence_bader" -> "Graph::kruskal"
	"test_spanning_arborescence_bader" -> "Graph::random_spanning_arborescence_kruskal"
	"test_spanning_arborescence_bader" -> "Graph::spanning_arborescence_kruskal"
	"test_spanning_arborescence_bader" -> "Graph::spanning_arborescence"
	"test_spanning_arborescence_bader" -> "Graph::report"
	"test_spanning_arborescence_bader" -> "Graph::textual_report"
	"test_graph_properties" -> "Graph::kruskal"
	"test_graph_properties" -> "Graph::random_spanning_arborescence_kruskal"
	"test_graph_properties" -> "Graph::spanning_arborescence_kruskal"
	"test_graph_properties" -> "Graph::connected_components"
	"test_graph_properties" -> "Graph::has_node_by_node_name"
	"test_graph_properties" -> "Graph::has_node_with_type_by_node_name"
	"test_graph_properties" -> "Graph::has_edge_by_node_names"
	"test_graph_properties" -> "Graph::has_edge_with_type_by_node_names"
	"test_graph_properties" -> "validate_vocabularies"
	"test_graph_properties" -> "Graph::strongly_connected_components"
	"test_graph_properties" -> "Graph::get_node_type_id_by_node_id"
	"test_graph_properties" -> "Graph::get_edge_type_id_by_edge_id"
	"test_graph_properties" -> "Graph::get_edge_type_name_by_edge_id"
	"test_graph_properties" -> "Graph::get_node_name_by_node_id"
	"test_graph_properties" -> "Graph::get_node_type_name_by_node_name"
	"test_graph_properties" -> "Graph::get_edge_id_by_node_names"
	"test_graph_properties" -> "Graph::get_edge_id_with_type_by_node_names"
	"test_graph_properties" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"test_graph_properties" -> "Graph::get_node_type_ids_by_node_type_names"
	"test_graph_properties" -> "Graph::degrees_product"
	"test_graph_properties" -> "Graph::jaccard_index"
	"test_graph_properties" -> "Graph::adamic_adar_index"
	"test_graph_properties" -> "Graph::resource_allocation_index"
	"test_graph_properties" -> "Graph::connected_components_number"
	"test_graph_properties" -> "Graph::get_singleton_nodes_number"
	"test_graph_properties" -> "Graph::get_not_singleton_nodes_number"
	"test_graph_properties" -> "Graph::report"
	"test_graph_properties" -> "Graph::textual_report"
	"test_graph_properties" -> "Graph::set_name"
	"test_graph_properties" -> "Graph::get_edge_id_by_node_ids"
	"test_graph_properties" -> "Graph::has_nodes"
	"test_graph_properties" -> "Graph::get_name"
	"test_graph_properties" -> "Graph::is_directed"
	"test_graph_properties" -> "Graph::has_edge_types"
	"test_graph_properties" -> "Graph::has_singletons"
	"test_graph_properties" -> "Graph::has_singletons_with_selfloops"
	"test_graph_properties" -> "Graph::has_node_types"
	"test_graph_properties" -> "Graph::get_nodes_number"
	"test_graph_properties" -> "Graph::get_directed_edges_number"
	"test_graph_properties" -> "Graph::get_edge_type_counts"
	"test_graph_properties" -> "Graph::get_edge_type_counts_hashmap"
	"test_graph_properties" -> "Graph::get_node_type_counts"
	"test_graph_properties" -> "Graph::iter_unique_edges"
	"test_random_walks" -> "first_order_walker"
	"test_random_walks" -> "second_order_walker"
	"test_random_walks" -> "Graph::enable"
	"test_random_walks" -> "Graph::random_walks_iter"
	"test_random_walks" -> "Graph::complete_walks_iter"
	"test_random_walks" -> "Graph::get_nodes_number"
	"test_random_walks" -> "Graph::get_directed_edges_number"
	"test_edge_holdouts" -> "default_holdout_test_suite"
	"test_edge_holdouts" -> "Graph::connected_components_number"
	"test_edge_holdouts" -> "Graph::report"
	"test_edge_holdouts" -> "Graph::textual_report"
	"test_edge_holdouts" -> "Graph::get_nodes_number"
	"test_edge_holdouts" -> "Graph::connected_holdout"
	"test_edge_holdouts" -> "Graph::random_holdout"
	"test_remove_components" -> "Graph::get_edge_type_name_by_edge_type_id"
	"test_remove_components" -> "Graph::get_node_type_name_by_node_type_id"
	"test_remove_components" -> "Graph::connected_components_number"
	"test_remove_components" -> "Graph::report"
	"test_remove_components" -> "Graph::textual_report"
	"test_remove_components" -> "Graph::remove"
	"test_remove_components" -> "Graph::remove_components"
	"test_remove_components" -> "Graph::has_unknown_node_types"
	"test_remove_components" -> "Graph::has_unknown_edge_types"
	"test_remove_components" -> "unchecked_translate"
	"test_remove_components" -> "translate"
	"test_kfold" -> "default_holdout_test_suite"
	"test_kfold" -> "Graph::get_edge_type_name_by_edge_type_id"
	"test_kfold" -> "Graph::get_edges_number"
	"test_kfold" -> "Graph::report"
	"test_kfold" -> "Graph::textual_report"
	"test_kfold" -> "Graph::kfold"
	"test_negative_edges_generation" -> "Graph::overlaps"
	"test_negative_edges_generation" -> "validate_vocabularies"
	"test_negative_edges_generation" -> "default_holdout_test_suite"
	"test_negative_edges_generation" -> "Graph::get_edges_number"
	"test_negative_edges_generation" -> "Graph::get_trap_nodes_number"
	"test_negative_edges_generation" -> "Graph::has_edge_types"
	"test_negative_edges_generation" -> "Graph::sample_negatives"
	"test_negative_edges_generation" -> "Graph::random_holdout"
	"test_subgraph_generation" -> "Graph::overlaps"
	"test_subgraph_generation" -> "Graph::get_not_singleton_nodes_number"
	"test_subgraph_generation" -> "Graph::random_subgraph"
	"test_dump_graph" -> "Graph::new"
	"test_dump_graph" -> "random_path"
	"test_embiggen_preprocessing" -> "cooccurence_matrix"
	"test_embiggen_preprocessing" -> "Graph::node2vec"
	"test_embiggen_preprocessing" -> "Graph::cooccurence_matrix"
	"test_embiggen_preprocessing" -> "Graph::link_prediction_degrees"
	"test_embiggen_preprocessing" -> "Graph::link_prediction_ids"
	"test_embiggen_preprocessing" -> "first_order_walker"
	"test_embiggen_preprocessing" -> "Graph::has_edges"
	"test_graph_filter" -> "Graph::filter"
	"test_graph_filter" -> "Graph::get_node_names"
	"test_graph_filter" -> "Graph::get_edge_type_names"
	"test_graph_filter" -> "Graph::get_min_weight"
	"test_graph_filter" -> "Graph::get_max_weight"
	"test_graph_filter" -> "Graph::get_node_type_names"
	"test_edgelist_generation" -> "Graph::get_node_name_by_node_id"
	"test_edgelist_generation" -> "Graph::get_bipartite_edge_names"
	"test_edgelist_generation" -> "Graph::get_star_edges"
	"test_edgelist_generation" -> "Graph::get_star_edge_names"
	"test_edgelist_generation" -> "Graph::get_clique_edge_names"
	"test_edgelist_generation" -> "Graph::get_node_names"
	"test_edgelist_generation" -> "Graph::get_nodes_number"
	"test_nodelabel_holdouts" -> "Graph::contains"
	"test_nodelabel_holdouts" -> "Graph::has_node_types"
	"test_nodelabel_holdouts" -> "Graph::has_multilabel_node_types"
	"test_nodelabel_holdouts" -> "Graph::get_unknown_node_types_number"
	"test_nodelabel_holdouts" -> "Graph::get_minimum_node_types_number"
	"test_nodelabel_holdouts" -> "Graph::get_nodes_number"
	"test_nodelabel_holdouts" -> "Graph::node_label_holdout"
	"test_edgelabel_holdouts" -> "Graph::has_edge_types"
	"test_edgelabel_holdouts" -> "Graph::get_unknown_edge_types_number"
	"test_edgelabel_holdouts" -> "Graph::get_minimum_edge_types_number"
	"test_edgelabel_holdouts" -> "Graph::get_directed_edges_number"
	"test_edgelabel_holdouts" -> "Graph::edge_label_holdout"
	"test_graph_removes" -> "validate_vocabularies"
	"test_graph_removes" -> "Graph::get_unique_edges_number"
	"test_graph_removes" -> "Graph::get_unique_selfloop_number"
	"test_graph_removes" -> "Graph::report"
	"test_graph_removes" -> "Graph::textual_report"
	"test_graph_removes" -> "Graph::remove"
	"test_graph_removes" -> "Graph::has_edge_weights"
	"test_graph_removes" -> "Graph::has_edge_types"
	"test_graph_removes" -> "Graph::has_selfloops"
	"test_graph_removes" -> "Graph::has_node_types"
	"test_clone_and_setters" -> "Graph::get_unchecked_edge_count_by_edge_type_id"
	"test_clone_and_setters" -> "Graph::get_unchecked_node_count_by_node_type_id"
	"test_clone_and_setters" -> "Graph::set_all_edge_types"
	"test_clone_and_setters" -> "Graph::set_all_node_types"
	"test_clone_and_setters" -> "Graph::get_nodes_number"
	"test_clone_and_setters" -> "Graph::get_directed_edges_number"
	"test_clone_and_setters" -> "Graph::get_edge_types_number"
	"test_clone_and_setters" -> "Graph::get_node_types_number"
	"test_graph_remapping" -> "Graph::are_nodes_remappable"
	"test_graph_remapping" -> "Graph::remap"
	"_default_test_suite" -> "test_spanning_arborescence_bader"
	"_default_test_suite" -> "test_graph_properties"
	"_default_test_suite" -> "test_random_walks"
	"_default_test_suite" -> "test_edge_holdouts"
	"_default_test_suite" -> "test_remove_components"
	"_default_test_suite" -> "test_kfold"
	"_default_test_suite" -> "test_negative_edges_generation"
	"_default_test_suite" -> "test_subgraph_generation"
	"_default_test_suite" -> "test_dump_graph"
	"_default_test_suite" -> "test_embiggen_preprocessing"
	"_default_test_suite" -> "test_graph_filter"
	"_default_test_suite" -> "test_edgelist_generation"
	"_default_test_suite" -> "test_nodelabel_holdouts"
	"_default_test_suite" -> "test_edgelabel_holdouts"
	"_default_test_suite" -> "test_graph_removes"
	"_default_test_suite" -> "test_clone_and_setters"
	"_default_test_suite" -> "test_graph_remapping"
	"_default_test_suite" -> "Graph::filter"
	"_default_test_suite" -> "Graph::remove_components"
	"_default_test_suite" -> "Graph::kfold"
	"default_test_suite" -> "_default_test_suite"
	"default_test_suite" -> "default_test_suite"
	"default_test_suite" -> "Graph::enable"
	"Graph::enable" -> "Graph::get_top_k_central_nodes_ids"
	"Graph::enable" -> "Graph::get_sources"
	"Graph::enable" -> "Graph::get_destinations"
	"Graph::enable" -> "Graph::get_nodes_number"
	"Graph::enable" -> "Graph::get_outbounds"
	"Graph::enable" -> "Graph::iter_node_neighbours_ids"
	"Graph::strongly_connected_components" -> "Graph::new"
	"Graph::strongly_connected_components" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::strongly_connected_components" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::strongly_connected_components" -> "Graph::get_nodes_number"
	"Graph::strongly_connected_components" -> "is_empty"
	"Graph::get_edge_quadruple" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::get_edge_quadruple" -> "Graph::get_edge_triple"
	"Graph::get_edge_triple" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::get_edge_triple" -> "Graph::get_node_ids_from_edge_id"
	"Graph::get_top_k_central_nodes_ids" -> "Graph::get_node_degree_by_node_id"
	"Graph::get_top_k_central_nodes_ids" -> "Graph::get_nodes_number"
	"Graph::get_top_k_central_node_names" -> "Graph::get_top_k_central_nodes_ids"
	"Graph::get_top_k_central_node_names" -> "Graph::get_node_name_by_node_id"
	"Graph::get_edge_type_id_by_edge_id" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::get_node_type_name_by_node_id" -> "Graph::get_node_type_id_by_node_id"
	"Graph::get_node_type_name_by_node_id" -> "Graph::get_node_type_names_by_node_type_ids"
	"Graph::get_edge_type_name_by_edge_id" -> "Graph::get_edge_type_id_by_edge_id"
	"Graph::get_edge_type_name_by_edge_id" -> "Graph::get_edge_type_name_by_edge_type_id"
	"Graph::get_edge_type_name_by_edge_type_id" -> "translate"
	"Graph::get_weight_by_edge_id" -> "Graph::get_directed_edges_number"
	"Graph::get_weight_by_node_ids" -> "Graph::get_weight_by_edge_id"
	"Graph::get_weight_by_node_ids" -> "Graph::get_edge_id_by_node_ids"
	"Graph::get_weight_with_type_by_node_ids" -> "Graph::get_weight_by_edge_id"
	"Graph::get_weight_with_type_by_node_ids" -> "Graph::get_edge_id_with_type_by_node_ids"
	"Graph::get_weight_with_type_by_node_names" -> "Graph::get_weight_by_edge_id"
	"Graph::get_weight_with_type_by_node_names" -> "Graph::get_edge_id_with_type_by_node_names"
	"Graph::get_weight_by_node_names" -> "Graph::get_weight_by_edge_id"
	"Graph::get_weight_by_node_names" -> "Graph::get_edge_id_by_node_names"
	"Graph::get_node_name_by_node_id" -> "Graph::get_nodes_number"
	"Graph::get_node_name_by_node_id" -> "unchecked_translate"
	"Graph::get_node_name_by_node_id" -> "translate"
	"Graph::get_node_type_id_by_node_name" -> "Graph::get_node_type_id_by_node_id"
	"Graph::get_node_type_id_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::get_node_type_name_by_node_name" -> "Graph::get_node_type_name_by_node_id"
	"Graph::get_node_type_name_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::get_edge_count_by_edge_type_id" -> "Graph::get_unchecked_edge_count_by_edge_type_id"
	"Graph::get_edge_count_by_edge_type_id" -> "Graph::has_edge_types"
	"Graph::get_edge_count_by_edge_type_id" -> "Graph::get_edge_types_number"
	"Graph::get_edge_count_by_edge_type_name" -> "Graph::get_edge_count_by_edge_type_id"
	"Graph::get_edge_count_by_edge_type_name" -> "Graph::get_edge_type_id_by_edge_type_name"
	"Graph::get_node_count_by_node_type_id" -> "Graph::get_unchecked_node_count_by_node_type_id"
	"Graph::get_node_count_by_node_type_id" -> "Graph::has_node_types"
	"Graph::get_node_count_by_node_type_id" -> "Graph::get_node_types_number"
	"Graph::get_node_count_by_node_type_name" -> "Graph::get_node_type_id_by_node_type_name"
	"Graph::get_node_count_by_node_type_name" -> "Graph::get_node_count_by_node_type_id"
	"Graph::get_unchecked_destination_node_id_by_edge_id" -> "Graph::get_node_ids_from_edge_id"
	"Graph::get_destination_node_id_by_edge_id" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::get_destination_node_id_by_edge_id" -> "Graph::get_directed_edges_number"
	"Graph::get_node_neighbours_by_node_id" -> "Graph::get_nodes_number"
	"Graph::get_node_neighbours_by_node_id" -> "Graph::iter_node_neighbours_ids"
	"Graph::get_node_neighbour_ids_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::get_node_neighbour_ids_by_node_name" -> "Graph::get_node_neighbours_by_node_id"
	"Graph::get_node_neighbour_names_by_node_name" -> "Graph::get_node_id_by_node_name"
	"Graph::get_node_neighbour_names_by_node_name" -> "Graph::iter_node_neighbours"
	"Graph::get_edge_id_with_type_by_node_ids" -> "Graph::get_edge_id_by_node_ids"
	"Graph::get_edge_id_with_type_by_node_ids" -> "Graph::iter_edge_ids_by_node_ids"
	"Graph::get_edge_id_by_node_names" -> "Graph::get_edge_id_by_node_ids"
	"Graph::get_edge_id_with_type_by_node_names" -> "Graph::get_edge_type_id_by_edge_type_name"
	"Graph::get_edge_id_with_type_by_node_names" -> "Graph::get_edge_id_with_type_by_node_ids"
	"Graph::get_edge_type_ids_by_edge_type_names" -> "keys"
	"Graph::get_node_type_ids_by_node_type_names" -> "keys"
	"Graph::get_minmax_edge_ids_by_node_ids" -> "Graph::get_edge_id_by_node_ids"
	"Graph::get_minmax_edge_ids_by_node_ids" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_minmax_edge_ids_by_source_node_id" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_node_type_name_by_node_type_id" -> "translate"
	"Graph::get_node_degree_by_node_id" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_node_degree_by_node_id" -> "Graph::get_nodes_number"
	"Graph::filter" -> "Graph::contains"
	"Graph::filter" -> "get_loading_bar"
	"Graph::filter" -> "Graph::get_filter_bitmap"
	"Graph::filter" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::filter" -> "Graph::has_edge_weights"
	"Graph::filter" -> "Graph::has_edge_types"
	"Graph::filter" -> "Graph::get_directed_edges_number"
	"Graph::filter" -> "Graph::iter_edge_with_type_and_weight_ids"
	"Graph::filter" -> "Graph::build_graph"
	"from_usize" -> "from_usize"
	"read" -> "read"
	"write" -> "write"
	"Graph::degrees_product" -> "Graph::get_node_degree_by_node_id"
	"Graph::degrees_product" -> "Graph::get_nodes_number"
	"Graph::jaccard_index" -> "Graph::is_trap_node_by_node_id"
	"Graph::jaccard_index" -> "Graph::get_nodes_number"
	"Graph::jaccard_index" -> "Graph::iter_node_neighbours_ids"
	"Graph::adamic_adar_index" -> "Graph::is_trap_node_by_node_id"
	"Graph::adamic_adar_index" -> "Graph::get_node_degree_by_node_id"
	"Graph::adamic_adar_index" -> "Graph::filter"
	"Graph::adamic_adar_index" -> "Graph::iter_node_neighbours_ids"
	"Graph::resource_allocation_index" -> "Graph::is_trap_node_by_node_id"
	"Graph::resource_allocation_index" -> "Graph::get_node_degree_by_node_id"
	"Graph::resource_allocation_index" -> "Graph::filter"
	"Graph::resource_allocation_index" -> "Graph::iter_node_neighbours_ids"
	"Graph::traps_rate" -> "Graph::is_trap_node_by_node_id"
	"Graph::traps_rate" -> "Graph::get_node_degree_by_node_id"
	"Graph::traps_rate" -> "Graph::get_nodes_number"
	"Graph::traps_rate" -> "Graph::iter_node_neighbours_ids"
	"Graph::get_node_degrees_mean" -> "Graph::has_nodes"
	"Graph::get_node_degrees_mean" -> "Graph::get_nodes_number"
	"Graph::get_node_degrees_mean" -> "Graph::get_directed_edges_number"
	"Graph::get_undirected_edges_number" -> "Graph::get_selfloop_number"
	"Graph::get_undirected_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::get_unique_undirected_edges_number" -> "Graph::get_unique_selfloop_number"
	"Graph::get_edges_number" -> "Graph::get_undirected_edges_number"
	"Graph::get_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::get_unique_edges_number" -> "Graph::get_unique_undirected_edges_number"
	"Graph::get_unique_edges_number" -> "Graph::get_unique_directed_edges_number"
	"Graph::get_node_degrees_median" -> "Graph::has_nodes"
	"Graph::get_node_degrees_median" -> "Graph::get_nodes_number"
	"Graph::get_node_degrees_median" -> "Graph::get_node_degrees"
	"Graph::get_max_node_degree" -> "Graph::get_node_degrees"
	"Graph::get_min_node_degree" -> "Graph::get_node_degrees"
	"Graph::get_node_degrees_mode" -> "Graph::new"
	"Graph::get_node_degrees_mode" -> "Graph::has_nodes"
	"Graph::get_node_degrees_mode" -> "Graph::get_node_degrees"
	"Graph::get_selfloop_rate" -> "Graph::get_selfloop_number"
	"Graph::get_selfloop_rate" -> "Graph::has_edges"
	"Graph::get_selfloop_rate" -> "Graph::get_directed_edges_number"
	"Graph::connected_components_number" -> "Graph::kruskal"
	"Graph::connected_components_number" -> "Graph::spanning_arborescence_kruskal"
	"Graph::connected_components_number" -> "Graph::connected_components"
	"Graph::get_singleton_nodes_number" -> "Graph::get_not_singleton_nodes_number"
	"Graph::get_singleton_nodes_number" -> "Graph::get_nodes_number"
	"Graph::get_density" -> "Graph::has_nodes"
	"Graph::get_density" -> "Graph::has_edges"
	"Graph::get_density" -> "Graph::has_selfloops"
	"Graph::get_density" -> "Graph::get_nodes_number"
	"Graph::report" -> "Graph::new"
	"Graph::report" -> "Graph::get_node_degrees_mean"
	"Graph::report" -> "Graph::get_undirected_edges_number"
	"Graph::report" -> "Graph::get_max_node_degree"
	"Graph::report" -> "Graph::get_min_node_degree"
	"Graph::report" -> "Graph::get_selfloop_number"
	"Graph::report" -> "Graph::get_selfloop_rate"
	"Graph::report" -> "Graph::get_singleton_nodes_number"
	"Graph::report" -> "Graph::get_density"
	"Graph::report" -> "Graph::has_nodes"
	"Graph::report" -> "Graph::has_edges"
	"Graph::report" -> "Graph::is_directed"
	"Graph::report" -> "Graph::has_edge_weights"
	"Graph::report" -> "Graph::has_edge_types"
	"Graph::report" -> "Graph::has_node_types"
	"Graph::report" -> "Graph::get_nodes_number"
	"Graph::report" -> "Graph::get_directed_edges_number"
	"Graph::report" -> "Graph::get_edge_types_number"
	"Graph::report" -> "Graph::get_node_types_number"
	"Graph::shared_components_number" -> "Graph::get_node_id_by_node_name"
	"Graph::shared_components_number" -> "Graph::iter_nodes"
	"Graph::merged_components_number" -> "Graph::get_node_id_by_node_name"
	"Graph::merged_components_number" -> "Graph::iter_edges"
	"Graph::overlap_textual_report" -> "validate_operator_terms"
	"Graph::overlap_textual_report" -> "Graph::has_node_with_type_by_node_name"
	"Graph::overlap_textual_report" -> "Graph::has_edge_with_type_by_node_names"
	"Graph::overlap_textual_report" -> "Graph::filter"
	"Graph::overlap_textual_report" -> "Graph::get_undirected_edges_number"
	"Graph::overlap_textual_report" -> "Graph::shared_components_number"
	"Graph::overlap_textual_report" -> "Graph::merged_components_number"
	"Graph::overlap_textual_report" -> "Graph::get_name"
	"Graph::overlap_textual_report" -> "Graph::get_nodes_number"
	"Graph::overlap_textual_report" -> "Graph::get_node_components_vector"
	"Graph::overlap_textual_report" -> "Graph::get_directed_edges_number"
	"Graph::overlap_textual_report" -> "Graph::iter_nodes"
	"Graph::overlap_textual_report" -> "Graph::par_iter_edge_with_type"
	"Graph::format_list" -> "is_empty"
	"Graph::format_node_list" -> "Graph::get_node_name_by_node_id"
	"Graph::format_node_list" -> "Graph::get_node_degree_by_node_id"
	"Graph::format_node_list" -> "Graph::format_list"
	"Graph::format_node_type_list" -> "Graph::get_node_type_name_by_node_type_id"
	"Graph::format_node_type_list" -> "Graph::format_list"
	"Graph::format_edge_type_list" -> "Graph::get_edge_type_name_by_edge_type_id"
	"Graph::format_edge_type_list" -> "Graph::format_list"
	"Graph::textual_report" -> "Graph::new"
	"Graph::textual_report" -> "Graph::get_top_k_central_nodes_ids"
	"Graph::textual_report" -> "read"
	"Graph::textual_report" -> "write"
	"Graph::textual_report" -> "Graph::get_node_degrees_mean"
	"Graph::textual_report" -> "Graph::get_edges_number"
	"Graph::textual_report" -> "Graph::get_node_degrees_median"
	"Graph::textual_report" -> "Graph::get_node_degrees_mode"
	"Graph::textual_report" -> "Graph::get_selfloop_number"
	"Graph::textual_report" -> "Graph::connected_components_number"
	"Graph::textual_report" -> "Graph::get_singleton_nodes_number"
	"Graph::textual_report" -> "Graph::get_singleton_nodes_with_selfloops_number"
	"Graph::textual_report" -> "Graph::get_density"
	"Graph::textual_report" -> "Graph::format_node_list"
	"Graph::textual_report" -> "Graph::format_node_type_list"
	"Graph::textual_report" -> "Graph::format_edge_type_list"
	"Graph::textual_report" -> "Graph::has_nodes"
	"Graph::textual_report" -> "Graph::get_name"
	"Graph::textual_report" -> "Graph::has_edge_weights"
	"Graph::textual_report" -> "Graph::has_selfloops"
	"Graph::textual_report" -> "Graph::has_singletons"
	"Graph::textual_report" -> "Graph::has_singletons_with_selfloops"
	"Graph::textual_report" -> "Graph::has_multilabel_node_types"
	"Graph::textual_report" -> "Graph::get_unknown_node_types_number"
	"Graph::textual_report" -> "Graph::has_unknown_node_types"
	"Graph::textual_report" -> "Graph::get_unknown_edge_types_number"
	"Graph::textual_report" -> "Graph::has_unknown_edge_types"
	"Graph::textual_report" -> "Graph::get_nodes_number"
	"Graph::textual_report" -> "Graph::get_directed_edges_number"
	"Graph::textual_report" -> "Graph::get_edge_types_number"
	"Graph::textual_report" -> "Graph::get_node_types_number"
	"Graph::textual_report" -> "Graph::is_multigraph"
	"Graph::textual_report" -> "Graph::get_multigraph_edges_number"
	"Graph::textual_report" -> "Graph::get_edge_type_counts"
	"Graph::textual_report" -> "Graph::get_node_type_counts"
	"Graph::textual_report" -> "hash"
	"Graph::textual_report" -> "hash"
	"Graph::textual_report" -> "hash"
	"Graph::textual_report" -> "hash"
	"Graph::remove" -> "Graph::get_unchecked_node_type_id_by_node_id"
	"Graph::remove" -> "Graph::get_unchecked_node_id_by_node_name"
	"Graph::remove" -> "Graph::contains"
	"Graph::remove" -> "get_loading_bar"
	"Graph::remove" -> "Graph::is_singleton_with_selfloops_by_node_id"
	"Graph::remove" -> "Graph::is_singleton_by_node_name"
	"Graph::remove" -> "Graph::get_node_type_names_by_node_type_ids"
	"Graph::remove" -> "Graph::get_name"
	"Graph::remove" -> "Graph::has_edge_weights"
	"Graph::remove" -> "Graph::has_edge_types"
	"Graph::remove" -> "Graph::has_selfloops"
	"Graph::remove" -> "Graph::has_node_types"
	"Graph::remove" -> "Graph::get_nodes_number"
	"Graph::remove" -> "Graph::get_directed_edges_number"
	"Graph::remove" -> "Graph::iter_nodes"
	"Graph::remove" -> "Graph::iter_edge_with_type_and_weight"
	"Graph::remove" -> "Graph::from_string_sorted"
	"Graph::remove_components" -> "Graph::new"
	"Graph::remove_components" -> "Graph::contains"
	"Graph::remove_components" -> "get_loading_bar"
	"Graph::remove_components" -> "Graph::get_filter_bitmap"
	"Graph::remove_components" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::remove_components" -> "Graph::remove"
	"Graph::remove_components" -> "Graph::get_name"
	"Graph::remove_components" -> "Graph::has_trap_nodes"
	"Graph::remove_components" -> "Graph::has_edge_weights"
	"Graph::remove_components" -> "Graph::has_edge_types"
	"Graph::remove_components" -> "Graph::has_singletons_with_selfloops"
	"Graph::remove_components" -> "Graph::has_node_types"
	"Graph::remove_components" -> "Graph::get_nodes_number"
	"Graph::remove_components" -> "Graph::get_node_components_vector"
	"Graph::remove_components" -> "Graph::get_directed_edges_number"
	"Graph::remove_components" -> "Graph::iter_nodes"
	"Graph::remove_components" -> "Graph::iter_edges_with_type_ids"
	"Graph::remove_components" -> "Graph::iter_edge_with_type_and_weight"
	"Graph::remove_components" -> "Graph::from_string_sorted"
	"Graph::set_name" -> "Graph::report"
	"Graph::set_name" -> "Graph::invalidate_report"
	"Graph::invalidate_report" -> "write"
	"Graph::set_all_edge_types" -> "default"
	"Graph::set_all_edge_types" -> "Graph::report"
	"Graph::set_all_edge_types" -> "Graph::invalidate_report"
	"Graph::set_all_edge_types" -> "Graph::get_directed_edges_number"
	"Graph::set_all_edge_types" -> "default"
	"Graph::set_all_edge_types" -> "build_reverse_mapping"
	"Graph::set_all_node_types" -> "default"
	"Graph::set_all_node_types" -> "Graph::report"
	"Graph::set_all_node_types" -> "Graph::invalidate_report"
	"Graph::set_all_node_types" -> "Graph::get_nodes_number"
	"Graph::set_all_node_types" -> "default"
	"Graph::set_all_node_types" -> "build_reverse_mapping"
	"update_explore_weight_transition" -> "rust_update_explore_weight_transition"
	"update_explore_weight_transition" -> "update_explore_weight_transition"
	"update_return_explore_weight_transition" -> "rust_update_return_explore_weight_transition"
	"update_return_explore_weight_transition" -> "update_return_explore_weight_transition"
	"test_update_explore_weight_transition" -> "update_explore_weight_transition"
	"test_update_return_explore_weight_transition" -> "update_return_explore_weight_transition"
	"test_update_return_weight_transition" -> "update_return_weight_transition"
	"Graph::get_node_transition" -> "Graph::get_weighted_transitions"
	"Graph::get_node_transition" -> "Graph::update_node_transition"
	"Graph::get_edge_transition" -> "update_return_weight_transition"
	"Graph::get_edge_transition" -> "update_explore_weight_transition"
	"Graph::get_edge_transition" -> "update_return_explore_weight_transition"
	"Graph::get_edge_transition" -> "Graph::get_weighted_transitions"
	"Graph::get_edge_transition" -> "Graph::update_node_transition"
	"Graph::extract_uniform_node" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_uniform_node" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::extract_node" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_node" -> "Graph::get_node_transition"
	"Graph::extract_edge" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::extract_edge" -> "Graph::get_edge_transition"
	"Graph::extract_edge" -> "Graph::has_selfloops"
	"Graph::random_walks_iter" -> "Graph::walk_iter"
	"Graph::random_walks_iter" -> "Graph::get_unique_source"
	"Graph::random_walks_iter" -> "Graph::has_edges"
	"Graph::random_walks_iter" -> "Graph::get_unique_source_nodes_number"
	"Graph::complete_walks_iter" -> "Graph::walk_iter"
	"Graph::complete_walks_iter" -> "Graph::get_unique_source"
	"Graph::complete_walks_iter" -> "Graph::has_edges"
	"Graph::complete_walks_iter" -> "Graph::get_unique_source_nodes_number"
	"Graph::walk_iter" -> "WalkWeights::is_first_order_walk"
	"Graph::walk_iter" -> "SingleWalkParameters::is_first_order_walk"
	"Graph::walk_iter" -> "WalksParameters::validate"
	"Graph::walk_iter" -> "WalksParameters::is_first_order_walk"
	"Graph::walk_iter" -> "Graph::single_walk"
	"Graph::walk_iter" -> "Graph::uniform_walk"
	"Graph::walk_iter" -> "Graph::has_edge_weights"
	"Graph::single_walk" -> "Graph::get_node_edges_and_destinations"
	"Graph::single_walk" -> "Graph::get_destinations_slice"
	"Graph::single_walk" -> "Graph::extract_node"
	"Graph::single_walk" -> "Graph::extract_edge"
	"Graph::uniform_walk" -> "Graph::extract_uniform_node"
	"Graph::encode_edge" -> "encode_edge"
	"Graph::encode_edge" -> "Graph::encode_edge"
	"Graph::decode_edge" -> "decode_edge"
	"Graph::decode_edge" -> "Graph::decode_edge"
	"Graph::get_node_ids_from_edge_id" -> "decode_edge"
	"Graph::get_node_ids_from_edge_id" -> "Graph::decode_edge"
	"Graph::get_edge_id_by_node_ids" -> "encode_edge"
	"Graph::get_edge_id_by_node_ids" -> "Graph::encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple" -> "encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple" -> "Graph::encode_edge"
	"Graph::get_bipartite_edges" -> "Graph::contains"
	"Graph::get_bipartite_edges" -> "Graph::has_edge_by_node_ids"
	"Graph::get_bipartite_edges" -> "is_empty"
	"Graph::get_bipartite_edges" -> "Graph::iter_nodes"
	"Graph::get_bipartite_edge_names" -> "Graph::get_node_name_by_node_id"
	"Graph::get_bipartite_edge_names" -> "Graph::get_bipartite_edges"
	"Graph::get_star_edges" -> "Graph::get_bipartite_edges"
	"Graph::get_star_edge_names" -> "Graph::get_bipartite_edge_names"
	"Graph::get_clique_edges" -> "Graph::contains"
	"Graph::get_clique_edges" -> "Graph::has_edge_by_node_ids"
	"Graph::get_clique_edges" -> "Graph::has_selfloops"
	"Graph::get_clique_edges" -> "Graph::iter_nodes"
	"Graph::get_clique_edge_names" -> "Graph::get_node_name_by_node_id"
	"Graph::get_clique_edge_names" -> "Graph::get_clique_edges"
	"Graph::has_nodes" -> "Graph::get_nodes_number"
	"Graph::has_edges" -> "Graph::get_edges_number"
	"Graph::get_trap_nodes_number" -> "Graph::get_singleton_nodes_with_selfloops_number"
	"Graph::get_trap_nodes_number" -> "Graph::get_not_singleton_nodes_number"
	"Graph::get_trap_nodes_number" -> "Graph::get_unique_source_nodes_number"
	"Graph::has_trap_nodes" -> "Graph::get_trap_nodes_number"
	"Graph::has_singletons" -> "Graph::get_singleton_nodes_number"
	"Graph::has_singletons_with_selfloops" -> "Graph::get_singleton_nodes_with_selfloops_number"
	"Graph::get_sources" -> "Graph::iter_sources_ids"
	"Graph::get_sources" -> "Graph::par_iter_sources_ids"
	"Graph::get_source_names" -> "Graph::get_node_name_by_node_id"
	"Graph::get_source_names" -> "Graph::iter_sources_ids"
	"Graph::get_source_names" -> "Graph::par_iter_sources_ids"
	"Graph::get_destinations" -> "Graph::iter_destinations_ids"
	"Graph::get_destinations" -> "Graph::par_iter_destinations_ids"
	"Graph::get_destination_names" -> "Graph::get_node_name_by_node_id"
	"Graph::get_destination_names" -> "Graph::iter_destinations_ids"
	"Graph::get_destination_names" -> "Graph::par_iter_destinations_ids"
	"Graph::get_nodes" -> "Graph::get_nodes_number"
	"Graph::get_edge_types" -> "Graph::has_edge_types"
	"Graph::get_node_types" -> "Graph::has_node_types"
	"Graph::get_weights" -> "Graph::has_edge_weights"
	"Graph::get_max_encodable_edge_number" -> "encode_max_edge"
	"Graph::get_max_encodable_edge_number" -> "get_node_bits"
	"Graph::get_max_encodable_edge_number" -> "Graph::get_nodes_number"
	"Graph::get_edges" -> "Graph::iter_edge_ids"
	"Graph::get_edges" -> "Graph::par_iter_edge_ids"
	"Graph::get_edge_names" -> "Graph::iter_edges"
	"Graph::get_edge_names" -> "Graph::par_iter_edges"
	"Graph::has_unknown_node_types" -> "Graph::get_unknown_node_types_number"
	"Graph::has_unknown_edge_types" -> "Graph::get_unknown_edge_types_number"
	"Graph::get_node_components_vector" -> "Graph::kruskal"
	"Graph::get_node_components_vector" -> "Graph::spanning_arborescence_kruskal"
	"Graph::get_node_components_vector" -> "Graph::connected_components"
	"Graph::get_node_degrees" -> "Graph::iter_node_degrees"
	"Graph::get_not_singletons" -> "Graph::iter_edge_ids"
	"Graph::get_dense_node_mapping" -> "Graph::get_not_singletons"
	"Graph::is_multigraph" -> "Graph::get_multigraph_edges_number"
	"Graph::get_multigraph_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::get_outbounds" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::get_outbounds" -> "Graph::get_nodes_number"
	"Graph::get_unique_source_nodes_number" -> "Graph::get_nodes_number"
	"Graph::get_edge_type_counts_hashmap" -> "Graph::get_edge_type_counts"
	"Graph::get_node_type_counts_hashmap" -> "Graph::get_node_type_counts"
	"normalize_value" -> "from_usize"
	"unchecked_insert" -> "from_usize"
	"build_reverse_mapping" -> "from_usize"
	"build_reverse_mapping" -> "is_empty"
	"is_empty" -> "is_empty"
	"keys" -> "keys"
	"eq" -> "Graph::compute_hash"
	"eq" -> "hash"
	"eq" -> "hash"
	"eq" -> "hash"
	"eq" -> "hash"
	"Graph::iter_unchecked_edge_ids_by_source_node_id" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::iter_node_degrees" -> "Graph::get_node_degree_by_node_id"
	"Graph::iter_node_degrees" -> "Graph::get_nodes_number"
	"Graph::par_iter_node_degrees" -> "Graph::get_node_degree_by_node_id"
	"Graph::par_iter_node_degrees" -> "Graph::get_nodes_number"
	"Graph::iter_singleton_node_ids" -> "Graph::new"
	"Graph::iter_singleton_with_selfloops_node_ids" -> "Graph::new"
	"Graph::iter_node_neighbours_ids" -> "Graph::new"
	"Graph::iter_node_neighbours_ids" -> "encode_edge"
	"Graph::iter_node_neighbours_ids" -> "decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::encode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::iter_unchecked_edge_ids_by_source_node_id"
	"Graph::iter_node_neighbours" -> "Graph::get_unchecked_node_name_by_node_id"
	"Graph::iter_node_neighbours" -> "Graph::iter_node_neighbours_ids"
	"Graph::iter_sources_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_sources_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_sources_ids" -> "Graph::par_iter_edge_ids"
	"Graph::iter_destinations_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_destinations_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_destinations_ids" -> "Graph::par_iter_edge_ids"
	"Graph::iter_node_ids" -> "Graph::get_unchecked_node_type_id_by_node_id"
	"Graph::iter_node_ids" -> "Graph::get_nodes_number"
	"Graph::iter_nodes" -> "Graph::get_node_type_name_by_node_id"
	"Graph::iter_nodes" -> "unchecked_translate"
	"Graph::iter_nodes" -> "translate"
	"Graph::iter_nodes" -> "Graph::iter_node_ids"
	"Graph::iter_edge_ids" -> "Graph::new"
	"Graph::iter_edge_ids" -> "decode_edge"
	"Graph::iter_edge_ids" -> "Graph::decode_edge"
	"Graph::iter_edge_ids" -> "Graph::get_node_ids_from_edge_id"
	"Graph::iter_edge_ids" -> "Graph::get_directed_edges_number"
	"Graph::iter_edges" -> "Graph::get_unchecked_node_name_by_node_id"
	"Graph::iter_edges" -> "Graph::iter_edge_ids"
	"Graph::par_iter_edge_ids" -> "decode_edge"
	"Graph::par_iter_edge_ids" -> "Graph::decode_edge"
	"Graph::par_iter_edges" -> "Graph::get_unchecked_node_name_by_node_id"
	"Graph::par_iter_edges" -> "Graph::iter_edge_ids"
	"Graph::par_iter_edges" -> "Graph::par_iter_edge_ids"
	"Graph::iter_edges_with_type_ids" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::iter_edges_with_type_ids" -> "Graph::iter_edge_ids"
	"Graph::iter_edges_with_type" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::iter_edges_with_type" -> "Graph::get_unchecked_edge_type_name_by_edge_type_id"
	"Graph::iter_edges_with_type" -> "Graph::iter_edges"
	"Graph::par_iter_edge_with_type" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::par_iter_edge_with_type" -> "Graph::get_unchecked_edge_type_name_by_edge_type_id"
	"Graph::par_iter_edge_with_type" -> "Graph::iter_edges"
	"Graph::par_iter_edge_with_type" -> "Graph::par_iter_edges"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::par_iter_edge_ids"
	"Graph::par_iter_edge_with_type_and_weight" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::par_iter_edge_with_type_and_weight" -> "Graph::par_iter_edge_with_type"
	"Graph::iter_edge_with_type_and_weight" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::iter_edge_with_type_and_weight" -> "Graph::iter_edges_with_type"
	"Graph::par_iter_edge_with_type_and_weight_ids" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::par_iter_edge_with_type_and_weight_ids" -> "Graph::par_iter_edge_with_type_ids"
	"Graph::iter_edge_with_type_and_weight_ids" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::iter_edge_with_type_and_weight_ids" -> "Graph::iter_edges_with_type_ids"
	"Graph::iter_unique_edges" -> "Graph::new"
	"Graph::iter_unique_edges" -> "decode_edge"
	"Graph::iter_unique_edges" -> "Graph::decode_edge"
	"Graph::iter_unique_edges" -> "Graph::get_node_ids_from_edge_id"
	"Graph::iter_unique_edges" -> "Graph::get_directed_edges_number"
	"Graph::iter_edge_ids_by_node_ids" -> "Graph::get_minmax_edge_ids_by_node_ids"
	"Graph::iter_unique_sources" -> "Graph::new"
	"Graph::iter_unique_sources" -> "Graph::get_nodes_number"
	"Graph::from_sorted_csv" -> "Graph::has_edge_weights"
	"Graph::from_sorted_csv" -> "Graph::has_edge_types"
	"Graph::from_sorted_csv" -> "Graph::has_node_types"
	"Graph::from_sorted_csv" -> "Graph::from_string_sorted"
	"Graph::from_unsorted_csv" -> "Graph::has_edge_weights"
	"Graph::from_unsorted_csv" -> "Graph::has_edge_types"
	"Graph::from_unsorted_csv" -> "Graph::has_node_types"
	"Graph::from_unsorted_csv" -> "Graph::from_string_unsorted"
	"Graph::compute_hash" -> "Graph::new"
	"Graph::compute_hash" -> "hash"
	"Graph::compute_hash" -> "hash"
	"Graph::compute_hash" -> "hash"
	"Graph::compute_hash" -> "hash"
	"hash" -> "hash"
	"hash" -> "hash"
	"hash" -> "hash"
	"hash" -> "hash"
	"parse_node_ids" -> "unchecked_insert"
	"parse_node_ids" -> "is_empty"
	"parse_edges_node_ids" -> "unchecked_insert"
	"parse_edges_node_ids" -> "is_empty"
	"parse_sorted_edges" -> "Graph::new"
	"parse_sorted_edges" -> "is_empty"
	"parse_unsorted_quadruples" -> "get_loading_bar"
	"parse_integer_unsorted_edges" -> "parse_unsorted_quadruples"
	"parse_string_unsorted_edges" -> "default"
	"parse_string_unsorted_edges" -> "Graph::new"
	"parse_string_unsorted_edges" -> "default"
	"parse_string_unsorted_edges" -> "build_reverse_mapping"
	"parse_string_unsorted_edges" -> "set_numeric_ids"
	"parse_string_unsorted_edges" -> "parse_edges_node_ids"
	"parse_string_unsorted_edges" -> "parse_edge_type_ids_vocabulary"
	"parse_string_unsorted_edges" -> "parse_unsorted_quadruples"
	"build_edges" -> "WalkWeights::validate_weight"
	"build_edges" -> "Graph::new"
	"build_edges" -> "validate_weight"
	"build_edges" -> "Graph::remove"
	"build_edges" -> "encode_edge"
	"build_edges" -> "encode_max_edge"
	"build_edges" -> "get_node_bits"
	"build_edges" -> "Graph::encode_edge"
	"build_edges" -> "is_empty"
	"parse_nodes" -> "default"
	"parse_nodes" -> "default"
	"parse_nodes" -> "build_reverse_mapping"
	"parse_nodes" -> "is_empty"
	"parse_nodes" -> "set_numeric_ids"
	"parse_nodes" -> "parse_node_ids"
	"parse_nodes" -> "parse_node_type_ids"
	"parse_string_edges" -> "default"
	"parse_string_edges" -> "default"
	"parse_string_edges" -> "build_reverse_mapping"
	"parse_string_edges" -> "is_empty"
	"parse_string_edges" -> "set_numeric_ids"
	"parse_string_edges" -> "parse_edges_node_ids"
	"parse_string_edges" -> "parse_edge_type_ids_vocabulary"
	"parse_string_edges" -> "parse_sorted_edges"
	"parse_string_edges" -> "build_edges"
	"parse_integer_edges" -> "build_edges"
	"Graph::build_graph" -> "Graph::new"
	"Graph::build_graph" -> "parse_integer_edges"
	"Graph::from_string_unsorted" -> "is_empty"
	"Graph::from_string_unsorted" -> "check_numeric_ids_compatibility"
	"Graph::from_string_unsorted" -> "parse_string_unsorted_edges"
	"Graph::from_string_unsorted" -> "parse_nodes"
	"Graph::from_string_unsorted" -> "Graph::build_graph"
	"Graph::from_integer_unsorted" -> "parse_integer_unsorted_edges"
	"Graph::from_integer_unsorted" -> "Graph::build_graph"
	"Graph::from_string_sorted" -> "Graph::new"
	"Graph::from_string_sorted" -> "is_empty"
	"Graph::from_string_sorted" -> "check_numeric_ids_compatibility"
	"Graph::from_string_sorted" -> "parse_nodes"
	"Graph::from_string_sorted" -> "parse_string_edges"
	"Graph::sample_negatives" -> "Graph::get_unchecked_node_id_by_node_name"
	"Graph::sample_negatives" -> "Graph::overlaps"
	"Graph::sample_negatives" -> "Graph::contains"
	"Graph::sample_negatives" -> "get_loading_bar"
	"Graph::sample_negatives" -> "Graph::has_edge_by_node_ids"
	"Graph::sample_negatives" -> "Graph::get_unique_edges_number"
	"Graph::sample_negatives" -> "encode_edge"
	"Graph::sample_negatives" -> "decode_edge"
	"Graph::sample_negatives" -> "Graph::encode_edge"
	"Graph::sample_negatives" -> "Graph::decode_edge"
	"Graph::sample_negatives" -> "Graph::is_directed"
	"Graph::sample_negatives" -> "Graph::has_selfloops"
	"Graph::sample_negatives" -> "Graph::get_nodes_number"
	"Graph::sample_negatives" -> "Graph::get_node_components_vector"
	"Graph::sample_negatives" -> "Graph::iter_nodes"
	"Graph::sample_negatives" -> "Graph::from_integer_unsorted"
	"Graph::get_holdouts_elements_number" -> "Graph::get_directed_edges_number"
	"Graph::get_holdouts_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::get_holdouts_edges_number" -> "Graph::get_holdouts_elements_number"
	"Graph::edge_holdout" -> "Graph::get_unchecked_edge_id_by_node_ids"
	"Graph::edge_holdout" -> "Graph::new"
	"Graph::edge_holdout" -> "Graph::contains"
	"Graph::edge_holdout" -> "get_loading_bar"
	"Graph::edge_holdout" -> "Graph::compute_edge_ids_vector"
	"Graph::edge_holdout" -> "Graph::get_edge_quadruple"
	"Graph::edge_holdout" -> "Graph::get_edge_triple"
	"Graph::edge_holdout" -> "Graph::filter"
	"Graph::edge_holdout" -> "Graph::has_edge_weights"
	"Graph::edge_holdout" -> "Graph::has_edge_types"
	"Graph::edge_holdout" -> "Graph::has_selfloops"
	"Graph::edge_holdout" -> "Graph::get_directed_edges_number"
	"Graph::edge_holdout" -> "Graph::build_graph"
	"Graph::connected_holdout" -> "Graph::get_unchecked_edge_count_by_edge_type_id"
	"Graph::connected_holdout" -> "Graph::kruskal"
	"Graph::connected_holdout" -> "Graph::random_spanning_arborescence_kruskal"
	"Graph::connected_holdout" -> "Graph::spanning_arborescence_kruskal"
	"Graph::connected_holdout" -> "Graph::contains"
	"Graph::connected_holdout" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::connected_holdout" -> "Graph::get_node_degree_by_node_id"
	"Graph::connected_holdout" -> "Graph::is_directed"
	"Graph::connected_holdout" -> "Graph::has_singletons"
	"Graph::connected_holdout" -> "Graph::has_singletons_with_selfloops"
	"Graph::connected_holdout" -> "Graph::get_directed_edges_number"
	"Graph::connected_holdout" -> "Graph::edge_holdout"
	"Graph::random_holdout" -> "Graph::get_unchecked_edge_degreee_by_node_ids"
	"Graph::random_holdout" -> "Graph::contains"
	"Graph::random_holdout" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::random_holdout" -> "Graph::has_selfloops"
	"Graph::random_holdout" -> "Graph::is_multigraph"
	"Graph::random_holdout" -> "Graph::get_holdouts_edges_number"
	"Graph::random_holdout" -> "Graph::edge_holdout"
	"Graph::node_label_holdout" -> "Graph::get_unchecked_node_type_id_by_node_id"
	"Graph::node_label_holdout" -> "Graph::new"
	"Graph::node_label_holdout" -> "Graph::has_node_types"
	"Graph::node_label_holdout" -> "Graph::has_multilabel_node_types"
	"Graph::node_label_holdout" -> "Graph::get_minimum_node_types_number"
	"Graph::node_label_holdout" -> "Graph::get_nodes_number"
	"Graph::node_label_holdout" -> "Graph::get_node_types_number"
	"Graph::node_label_holdout" -> "Graph::get_holdouts_elements_number"
	"Graph::edge_label_holdout" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::edge_label_holdout" -> "Graph::new"
	"Graph::edge_label_holdout" -> "Graph::has_edge_types"
	"Graph::edge_label_holdout" -> "Graph::get_minimum_edge_types_number"
	"Graph::edge_label_holdout" -> "Graph::get_directed_edges_number"
	"Graph::edge_label_holdout" -> "Graph::get_edge_types_number"
	"Graph::edge_label_holdout" -> "Graph::get_holdouts_elements_number"
	"Graph::random_subgraph" -> "Graph::new"
	"Graph::random_subgraph" -> "Graph::contains"
	"Graph::random_subgraph" -> "get_loading_bar"
	"Graph::random_subgraph" -> "Graph::is_trap_node_by_node_id"
	"Graph::random_subgraph" -> "Graph::get_edge_quadruple"
	"Graph::random_subgraph" -> "Graph::get_unchecked_destination_node_id_by_edge_id"
	"Graph::random_subgraph" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::random_subgraph" -> "Graph::filter"
	"Graph::random_subgraph" -> "Graph::get_not_singleton_nodes_number"
	"Graph::random_subgraph" -> "Graph::has_edge_weights"
	"Graph::random_subgraph" -> "Graph::has_edge_types"
	"Graph::random_subgraph" -> "Graph::has_selfloops"
	"Graph::random_subgraph" -> "Graph::get_nodes_number"
	"Graph::random_subgraph" -> "Graph::get_directed_edges_number"
	"Graph::random_subgraph" -> "is_empty"
	"Graph::random_subgraph" -> "Graph::iter_node_neighbours_ids"
	"Graph::random_subgraph" -> "Graph::build_graph"
	"Graph::kfold" -> "Graph::contains"
	"Graph::kfold" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::kfold" -> "Graph::has_selfloops"
	"Graph::kfold" -> "is_empty"
	"Graph::kfold" -> "Graph::iter_edge_ids"
	"Graph::kfold" -> "Graph::iter_edges_with_type_ids"
	"Graph::kfold" -> "Graph::edge_holdout"
}