use super::*;
use arbitrary::Arbitrary;
use std::collections::HashSet;
use rayon::iter::ParallelIterator;

{structs}

{meta_struct}

pub fn meta_test(data: MetaParams) -> Result<(), String> {{
    let data_copy = data.clone();
    let data_copy2 = data.clone();
    std::panic::set_hook(Box::new(move |info| {{
        handle_panics_meta_test(Some(info), data_copy.clone(), None);
    }}));

    let mut graph = graph::Graph::from_string_unsorted(
        data.from_vec.edges.into_iter(),
        data.from_vec.nodes.map(|ns| ns.into_iter()),
        data.from_vec.directed,
        data.from_vec.directed_edge_list,
        "MetaTest",
        data.from_vec.ignore_duplicated_nodes,
        false,
        data.from_vec.ignore_duplicated_edges,
        false,
        data.from_vec.verbose,
        data.from_vec.numeric_edge_types_ids,
        data.from_vec.numeric_node_ids,
        data.from_vec.numeric_edge_node_ids,
        data.from_vec.numeric_node_types_ids,
        data.from_vec.has_node_types,
        data.from_vec.has_edge_types,
        data.from_vec.has_edge_weights,
        true,
        true,
        true,
    )?;
    
    

    let g_copy = graph.clone();
    std::panic::set_hook(Box::new(move |info| {{
        handle_panics_meta_test_once_loaded(Some(info), data_copy2.clone(), g_copy.clone());
    }}));
    
{calls}

    Ok(())
}}