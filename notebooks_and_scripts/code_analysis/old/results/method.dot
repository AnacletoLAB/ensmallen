digraph deps {
	node [shape=box];

	"Graph::get_selfloop_number" [color=red];
	"translate" [color=black];
	"from_usize" [color=black];
	"encode_max_edge" [color=black];
	"parse_nodes" [color=black];
	"Graph::iter_unchecked_edge_ids_by_source_node_id" [color=red];
	"Graph::remove" [color=red];
	"parse_integer_unsorted_edges" [color=black];
	"Graph::get_node_ids_from_edge_id" [color=red];
	"WalkWeights::validate_weight" [color=blue];
	"get_node_bits" [color=black];
	"Graph::filter" [color=red];
	"Graph::decode_edge" [color=red];
	"Graph::get_edge_id_with_type_from_node_ids" [color=red];
	"Graph::is_singleton_with_selfloops_from_node_id" [color=red];
	"Graph::get_undirected_edges_number" [color=red];
	"Graph::get_unchecked_node_id_from_node_name" [color=red];
	"Graph::get_unchecked_node_name_from_node_id" [color=red];
	"Graph::par_iter_edge_with_type" [color=red];
	"generic_string_operator" [color=black];
	"decode_edge" [color=black];
	"generic_integer_operator" [color=black];
	"Graph::has_edge_with_type_from_node_names" [color=red];
	"keys" [color=black];
	"Graph::get_nodes_number" [color=red];
	"build_reverse_mapping" [color=black];
	"Graph::has_node_types" [color=red];
	"Graph::iter_edge_ids_from_node_ids" [color=red];
	"Graph::get_not_singleton_nodes_number" [color=red];
	"parse_sorted_edges" [color=black];
	"parse_unsorted_quadruples" [color=black];
	"Graph::from_integer_unsorted" [color=red];
	"Graph::get_edge_id_with_type_from_node_names" [color=red];
	"Graph::new" [color=red];
	"Graph::iter_edge_with_type_and_weight_ids" [color=red];
	"Graph::get_node_type_id_from_node_id" [color=red];
	"Graph::from_string_sorted" [color=red];
	"Graph::contains" [color=red];
	"Graph::has_selfloops" [color=red];
	"Graph::get_unchecked_edge_type_by_edge_id" [color=red];
	"validate_operator_terms" [color=black];
	"build_edges" [color=black];
	"set_numeric_ids" [color=black];
	"Graph::get_unchecked_edge_type_name_by_edge_type_id" [color=red];
	"Graph::get_minmax_edge_ids_by_source_node_id" [color=red];
	"Graph::iter_edges_with_type" [color=red];
	"Graph::get_edge_id_from_node_ids" [color=red];
	"parse_integer_edges" [color=black];
	"Graph::get_node_type_name_from_node_id" [color=red];
	"Graph::get_edge_type_ids_by_edge_type_names" [color=red];
	"check_numeric_ids_compatibility" [color=black];
	"Graph::iter_edges_with_type_ids" [color=red];
	"Graph::iter_edge_with_type_and_weight" [color=red];
	"default" [color=black];
	"Graph::from_string_unsorted" [color=red];
	"parse_edge_type_ids_vocabulary" [color=black];
	"get_loading_bar" [color=black];
	"Graph::is_compatible" [color=red];
	"Graph::par_iter_edge_ids" [color=red];
	"is_empty" [color=black];
	"Graph::get_filter_bitmap" [color=red];
	"parse_string_unsorted_edges" [color=black];
	"Graph::has_edge_weights" [color=red];
	"Graph::build_graph" [color=red];
	"Graph::get_unchecked_edge_id_from_tuple" [color=red];
	"parse_node_type_ids" [color=black];
	"Graph::is_singleton_from_node_name" [color=red];
	"unchecked_insert" [color=black];
	"Graph::iter_edge_ids" [color=red];
	"Graph::has_edge_with_type_from_node_ids" [color=red];
	"Graph::get_unchecked_node_type_id_from_node_id" [color=red];
	"Graph::iter_node_ids" [color=red];
	"encode_edge" [color=black];
	"Graph::iter_nodes" [color=red];
	"Graph::encode_edge" [color=red];
	"validate_weight" [color=black];
	"Graph::get_node_type_names_from_node_type_ids" [color=red];
	"Graph::get_minmax_edge_ids_from_node_ids" [color=red];
	"build_operator_graph_name" [color=black];
	"Graph::get_node_degree_from_node_id" [color=red];
	"unchecked_translate" [color=black];
	"Graph::par_iter_edges" [color=red];
	"Graph::has_edge_types" [color=red];
	"Graph::par_iter_edge_with_type_ids" [color=red];
	"Graph::is_singleton_from_node_id" [color=red];
	"Graph::has_node_from_node_name" [color=red];
	"Graph::get_directed_edges_number" [color=red];
	"Graph::get_unchecked_weight_by_edge_id" [color=red];
	"Graph::has_singletons" [color=red];
	"Graph::iter_edges" [color=red];
	"Graph::get_name" [color=red];
	"Graph::get_node_type_ids_from_node_type_names" [color=red];
	"Graph::get_singleton_nodes_number" [color=red];
	"Graph::get_node_id_from_node_name" [color=red];
	"Graph::get_edge_type_id_by_edge_type_name" [color=red];
	"Graph::generic_operator" [color=red];
	"parse_string_edges" [color=black];
	"parse_edges_node_ids" [color=black];
	"parse_node_ids" [color=black];

	"Graph::par_iter_edge_ids" -> "decode_edge"
	"Graph::par_iter_edge_ids" -> "Graph::decode_edge"
	"Graph::get_node_type_name_from_node_id" -> "Graph::get_node_type_id_from_node_id"
	"Graph::get_node_type_name_from_node_id" -> "Graph::get_node_type_names_from_node_type_ids"
	"Graph::build_graph" -> "Graph::new"
	"Graph::build_graph" -> "parse_integer_edges"
	"Graph::get_unchecked_edge_type_name_by_edge_type_id" -> "unchecked_translate"
	"Graph::get_unchecked_edge_type_name_by_edge_type_id" -> "translate"
	"parse_sorted_edges" -> "Graph::new"
	"parse_sorted_edges" -> "is_empty"
	"Graph::is_singleton_from_node_name" -> "Graph::is_singleton_from_node_id"
	"Graph::is_singleton_from_node_name" -> "Graph::get_node_id_from_node_name"
	"Graph::iter_node_neighbours_ids" -> "Graph::new"
	"Graph::iter_node_neighbours_ids" -> "encode_edge"
	"Graph::iter_node_neighbours_ids" -> "decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::encode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::decode_edge"
	"Graph::iter_node_neighbours_ids" -> "Graph::iter_unchecked_edge_ids_by_source_node_id"
	"parse_node_ids" -> "unchecked_insert"
	"parse_node_ids" -> "is_empty"
	"parse_string_unsorted_edges" -> "default"
	"parse_string_unsorted_edges" -> "Graph::new"
	"parse_string_unsorted_edges" -> "default"
	"parse_string_unsorted_edges" -> "build_reverse_mapping"
	"parse_string_unsorted_edges" -> "set_numeric_ids"
	"parse_string_unsorted_edges" -> "parse_edges_node_ids"
	"parse_string_unsorted_edges" -> "parse_edge_type_ids_vocabulary"
	"parse_string_unsorted_edges" -> "parse_unsorted_quadruples"
	"build_reverse_mapping" -> "from_usize"
	"build_reverse_mapping" -> "is_empty"
	"validate_operator_terms" -> "Graph::has_edge_weights"
	"validate_operator_terms" -> "Graph::has_edge_types"
	"validate_operator_terms" -> "Graph::has_node_types"
	"Graph::iter_edges" -> "Graph::get_unchecked_node_name_from_node_id"
	"Graph::iter_edges" -> "Graph::iter_edge_ids"
	"parse_string_edges" -> "default"
	"parse_string_edges" -> "default"
	"parse_string_edges" -> "build_reverse_mapping"
	"parse_string_edges" -> "is_empty"
	"parse_string_edges" -> "set_numeric_ids"
	"parse_string_edges" -> "parse_edges_node_ids"
	"parse_string_edges" -> "parse_edge_type_ids_vocabulary"
	"parse_string_edges" -> "parse_sorted_edges"
	"parse_string_edges" -> "build_edges"
	"Graph::is_singleton_from_node_id" -> "Graph::get_node_degree_from_node_id"
	"Graph::is_singleton_from_node_id" -> "Graph::has_singletons"
	"Graph::get_node_ids_from_edge_id" -> "decode_edge"
	"Graph::get_node_ids_from_edge_id" -> "Graph::decode_edge"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::iter_edge_ids"
	"Graph::par_iter_edge_with_type_ids" -> "Graph::par_iter_edge_ids"
	"Graph::par_iter_edge_with_type" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::par_iter_edge_with_type" -> "Graph::get_unchecked_edge_type_name_by_edge_type_id"
	"Graph::par_iter_edge_with_type" -> "Graph::iter_edges"
	"Graph::par_iter_edge_with_type" -> "Graph::par_iter_edges"
	"Graph::has_nodes" -> "Graph::get_nodes_number"
	"Graph::get_minmax_edge_ids_from_node_ids" -> "Graph::get_edge_id_from_node_ids"
	"Graph::get_minmax_edge_ids_from_node_ids" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::new" -> "Graph::new"
	"Graph::new" -> "set_numeric_ids"
	"build_edges" -> "WalkWeights::validate_weight"
	"build_edges" -> "Graph::new"
	"build_edges" -> "validate_weight"
	"build_edges" -> "Graph::remove"
	"build_edges" -> "encode_edge"
	"build_edges" -> "encode_max_edge"
	"build_edges" -> "get_node_bits"
	"build_edges" -> "Graph::encode_edge"
	"build_edges" -> "is_empty"
	"Graph::has_edge_with_type_from_node_ids" -> "Graph::get_edge_id_with_type_from_node_ids"
	"Graph::from_string_unsorted" -> "is_empty"
	"Graph::from_string_unsorted" -> "check_numeric_ids_compatibility"
	"Graph::from_string_unsorted" -> "parse_string_unsorted_edges"
	"Graph::from_string_unsorted" -> "parse_nodes"
	"Graph::from_string_unsorted" -> "Graph::build_graph"
	"Graph::get_filter_bitmap" -> "Graph::new"
	"Graph::get_filter_bitmap" -> "Graph::contains"
	"Graph::get_filter_bitmap" -> "Graph::get_node_id_from_node_name"
	"Graph::get_filter_bitmap" -> "Graph::get_node_type_ids_from_node_type_names"
	"Graph::get_filter_bitmap" -> "Graph::iter_node_ids"
	"Graph::iter_node_ids" -> "Graph::get_unchecked_node_type_id_from_node_id"
	"Graph::iter_node_ids" -> "Graph::get_nodes_number"
	"Graph::remove" -> "Graph::get_unchecked_node_type_id_from_node_id"
	"Graph::remove" -> "Graph::get_unchecked_node_id_from_node_name"
	"Graph::remove" -> "Graph::contains"
	"Graph::remove" -> "get_loading_bar"
	"Graph::remove" -> "Graph::is_singleton_with_selfloops_from_node_id"
	"Graph::remove" -> "Graph::is_singleton_from_node_name"
	"Graph::remove" -> "Graph::get_node_type_names_from_node_type_ids"
	"Graph::remove" -> "Graph::get_name"
	"Graph::remove" -> "Graph::has_edge_weights"
	"Graph::remove" -> "Graph::has_edge_types"
	"Graph::remove" -> "Graph::has_selfloops"
	"Graph::remove" -> "Graph::has_node_types"
	"Graph::remove" -> "Graph::get_nodes_number"
	"Graph::remove" -> "Graph::get_directed_edges_number"
	"Graph::remove" -> "Graph::iter_nodes"
	"Graph::remove" -> "Graph::iter_edge_with_type_and_weight"
	"Graph::remove" -> "Graph::from_string_sorted"
	"Graph::get_edges_number" -> "Graph::get_undirected_edges_number"
	"Graph::get_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::is_compatible" -> "validate_operator_terms"
	"Graph::get_node_degree_from_node_id" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"Graph::get_node_degree_from_node_id" -> "Graph::get_nodes_number"
	"from_usize" -> "from_usize"
	"Graph::get_node_type_ids_from_node_type_names" -> "keys"
	"Graph::get_unchecked_edge_id_from_tuple" -> "encode_edge"
	"Graph::get_unchecked_edge_id_from_tuple" -> "Graph::encode_edge"
	"Graph::get_minmax_edge_ids_by_source_node_id" -> "Graph::get_unchecked_edge_id_from_tuple"
	"Graph::decode_edge" -> "decode_edge"
	"Graph::decode_edge" -> "Graph::decode_edge"
	"Graph::iter_edge_ids_from_node_ids" -> "Graph::get_minmax_edge_ids_from_node_ids"
	"Graph::from_string_sorted" -> "Graph::new"
	"Graph::from_string_sorted" -> "is_empty"
	"Graph::from_string_sorted" -> "check_numeric_ids_compatibility"
	"Graph::from_string_sorted" -> "parse_nodes"
	"Graph::from_string_sorted" -> "parse_string_edges"
	"parse_edges_node_ids" -> "unchecked_insert"
	"parse_edges_node_ids" -> "is_empty"
	"Graph::get_unchecked_node_name_from_node_id" -> "unchecked_translate"
	"Graph::get_unchecked_node_name_from_node_id" -> "translate"
	"sub" -> "Graph::generic_operator"
	"sub" -> "Graph::has_selfloops"
	"Graph::iter_edge_with_type_and_weight" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::iter_edge_with_type_and_weight" -> "Graph::iter_edges_with_type"
	"Graph::encode_edge" -> "encode_edge"
	"Graph::encode_edge" -> "Graph::encode_edge"
	"Graph::has_singletons" -> "Graph::get_singleton_nodes_number"
	"get_loading_bar" -> "Graph::new"
	"Graph::has_edge_with_type_from_node_names" -> "Graph::get_edge_id_with_type_from_node_names"
	"Graph::get_edge_id_with_type_from_node_names" -> "Graph::get_edge_type_id_by_edge_type_name"
	"Graph::get_edge_id_with_type_from_node_names" -> "Graph::get_edge_id_with_type_from_node_ids"
	"Graph::get_edge_type_ids_by_edge_type_names" -> "keys"
	"default" -> "Graph::new"
	"Graph::iter_unchecked_edge_ids_by_source_node_id" -> "Graph::get_minmax_edge_ids_by_source_node_id"
	"parse_nodes" -> "default"
	"parse_nodes" -> "default"
	"parse_nodes" -> "build_reverse_mapping"
	"parse_nodes" -> "is_empty"
	"parse_nodes" -> "set_numeric_ids"
	"parse_nodes" -> "parse_node_ids"
	"parse_nodes" -> "parse_node_type_ids"
	"Graph::get_singleton_nodes_number" -> "Graph::get_not_singleton_nodes_number"
	"Graph::get_singleton_nodes_number" -> "Graph::get_nodes_number"
	"Graph::is_singleton_with_selfloops_from_node_id" -> "Graph::contains"
	"Graph::iter_edges_with_type_ids" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::iter_edges_with_type_ids" -> "Graph::iter_edge_ids"
	"is_empty" -> "is_empty"
	"Graph::generic_operator" -> "generic_string_operator"
	"Graph::generic_operator" -> "generic_integer_operator"
	"Graph::generic_operator" -> "Graph::is_compatible"
	"generic_integer_operator" -> "build_operator_graph_name"
	"generic_integer_operator" -> "Graph::has_edge_with_type_from_node_ids"
	"generic_integer_operator" -> "Graph::filter"
	"generic_integer_operator" -> "Graph::has_edge_weights"
	"generic_integer_operator" -> "Graph::has_edge_types"
	"generic_integer_operator" -> "Graph::iter_edge_with_type_and_weight_ids"
	"generic_integer_operator" -> "Graph::from_integer_unsorted"
	"Graph::iter_edge_ids" -> "Graph::new"
	"Graph::iter_edge_ids" -> "decode_edge"
	"Graph::iter_edge_ids" -> "Graph::decode_edge"
	"Graph::iter_edge_ids" -> "Graph::get_node_ids_from_edge_id"
	"Graph::iter_edge_ids" -> "Graph::get_directed_edges_number"
	"Graph::filter" -> "Graph::contains"
	"Graph::filter" -> "get_loading_bar"
	"Graph::filter" -> "Graph::get_filter_bitmap"
	"Graph::filter" -> "Graph::get_edge_type_ids_by_edge_type_names"
	"Graph::filter" -> "Graph::has_edge_weights"
	"Graph::filter" -> "Graph::has_edge_types"
	"Graph::filter" -> "Graph::get_directed_edges_number"
	"Graph::filter" -> "Graph::iter_edge_with_type_and_weight_ids"
	"Graph::filter" -> "Graph::build_graph"
	"unchecked_insert" -> "from_usize"
	"parse_integer_edges" -> "build_edges"
	"parse_unsorted_quadruples" -> "get_loading_bar"
	"Graph::iter_edge_with_type_and_weight_ids" -> "Graph::get_unchecked_weight_by_edge_id"
	"Graph::iter_edge_with_type_and_weight_ids" -> "Graph::iter_edges_with_type_ids"
	"Graph::get_undirected_edges_number" -> "Graph::get_selfloop_number"
	"Graph::get_undirected_edges_number" -> "Graph::get_directed_edges_number"
	"Graph::iter_nodes" -> "Graph::get_node_type_name_from_node_id"
	"Graph::iter_nodes" -> "unchecked_translate"
	"Graph::iter_nodes" -> "translate"
	"Graph::iter_nodes" -> "Graph::iter_node_ids"
	"Graph::from_integer_unsorted" -> "parse_integer_unsorted_edges"
	"Graph::from_integer_unsorted" -> "Graph::build_graph"
	"Graph::get_edge_id_from_node_ids" -> "encode_edge"
	"Graph::get_edge_id_from_node_ids" -> "Graph::encode_edge"
	"Graph::get_edge_id_with_type_from_node_ids" -> "Graph::get_edge_id_from_node_ids"
	"Graph::get_edge_id_with_type_from_node_ids" -> "Graph::iter_edge_ids_from_node_ids"
	"parse_integer_unsorted_edges" -> "parse_unsorted_quadruples"
	"keys" -> "keys"
	"Graph::contains" -> "Graph::is_compatible"
	"Graph::contains" -> "Graph::has_edge_with_type_from_node_ids"
	"Graph::contains" -> "Graph::has_edge_with_type_from_node_names"
	"Graph::contains" -> "Graph::par_iter_edge_with_type"
	"Graph::contains" -> "Graph::par_iter_edge_with_type_ids"
	"Graph::has_node_from_node_name" -> "Graph::get_node_id_from_node_name"
	"Graph::iter_edges_with_type" -> "Graph::get_unchecked_edge_type_by_edge_id"
	"Graph::iter_edges_with_type" -> "Graph::get_unchecked_edge_type_name_by_edge_type_id"
	"Graph::iter_edges_with_type" -> "Graph::iter_edges"
	"Graph::par_iter_edges" -> "Graph::get_unchecked_node_name_from_node_id"
	"Graph::par_iter_edges" -> "Graph::iter_edge_ids"
	"Graph::par_iter_edges" -> "Graph::par_iter_edge_ids"
	"generic_string_operator" -> "build_operator_graph_name"
	"generic_string_operator" -> "Graph::has_node_from_node_name"
	"generic_string_operator" -> "Graph::has_edge_with_type_from_node_names"
	"generic_string_operator" -> "Graph::get_node_type_name_from_node_id"
	"generic_string_operator" -> "Graph::get_node_id_from_node_name"
	"generic_string_operator" -> "Graph::filter"
	"generic_string_operator" -> "Graph::has_edge_weights"
	"generic_string_operator" -> "Graph::has_edge_types"
	"generic_string_operator" -> "Graph::has_node_types"
	"generic_string_operator" -> "Graph::iter_nodes"
	"generic_string_operator" -> "Graph::iter_edge_with_type_and_weight"
	"generic_string_operator" -> "Graph::from_string_unsorted"
}