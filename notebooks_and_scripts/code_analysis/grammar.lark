%ignore /[ \t\f\r]+/
doc_line.2: "///" /[^\n]*\n/
file_doc.2: "//!" /[^\n]*\n/
comment.1: "//" /[^\n]*\n/
%ignore /[\n]+/

WILDCARD: "*"
NOT_BRACE: /[^{}]+/
VISIBILITY.2: "pub" "(crate)"?
IDENTIFIER.1: /([a-zA-Z][a-zA-Z0-9_]*|_[a-zA-Z0-9_]*)/

start: file_doc* _statement*

_statement: use_statement
    | struct_statement
    | type_statement
    | const_statement
    | static_statement
    | trait_statement
    | impl_statement
    | function_statement
    | extern_statement
    | mod_statement

mod_statement: doc? "mod" IDENTIFIER "{" _statement* "}"

const_statement: attribute? "const" IDENTIFIER ":" type "=" /[^;]+/ ";"
static_statement: attribute? "static" IDENTIFIER ":" type "=" /[^;]+/ ";"

trait_statement: doc? VISIBILITY? "trait" IDENTIFIER (":" IDENTIFIER ("+" IDENTIFIER)*)? "{" trait_function_prototipe* "}"
trait_function_prototipe: doc? VISIBILITY? "fn" function_name "(" args ")" ( "->" return_type)? ";"

extern_statement: "extern" "\"C\"" "{" trait_function_prototipe* "}"

// USE STATEMENT
use_statement: "use" _use_inner ";"
_use_inner: IDENTIFIER "::" _use_inner 
    | IDENTIFIER ("as" IDENTIFIER)?
    | WILDCARD
    | "{" _use_inner ("," _use_inner)*"}"


// General objects
attribute: "#[" IDENTIFIER ["(" /[^)]+/ ")"] "]"
doc: (doc_line | attribute | comment)+

// TYPE STATEMENT
type_statement: doc? VISIBILITY? "type" IDENTIFIER "=" type ";"

// STRUCT STATEMENT
struct_statement: doc? VISIBILITY? "struct" type "{" struct_fields "}"
struct_fields: struct_field*
struct_field: doc? VISIBILITY? IDENTIFIER ":" type ","?

// IMPL STATEMENT
impl_statement: "unsafe"? doc? "impl" generics? (trait_type "for")? struct_type "{" impl_content "}"

impl_content: (function_statement | type_statement)*

/// FUNCTION STATEMENT
function_statement: doc? VISIBILITY? "fn" function_name "(" args ")" ( "->" return_type)? "{" function_body "}"
function_name: IDENTIFIER generics?

function_body: NOT_BRACE?
    | NOT_BRACE? ( "{" function_body "}" NOT_BRACE?)+

!modifier: "mut" | "&" lifetime? "mut"? | "*" ("const" | "mut")
self: modifier? "self"

args: 
    | self ("," arg)* ","?
    | arg ("," arg)* ","?

arg: modifier? IDENTIFIER ":" type
lifetime: "'" IDENTIFIER

trait_type: (IDENTIFIER "::")*type
struct_type: type
return_type: type

type:  modifier? simple_type
    |  modifier? impl_type
    |  modifier? dyn_type
    |  modifier? tuple_type
    |  modifier? slice_type
    |  modifier? fn_type

fn_type: ("Fn" | "FnOnce" | "FnMut") "(" type ("," type)* ")" ("->" type)?
simple_type: IDENTIFIER ("::" IDENTIFIER)* generics? ("+" (type | lifetime))*
tuple_type: "(" [type ("," type)*] ","? ")" 
impl_type: "impl" type ("+" (type | lifetime))*
dyn_type:  "dyn" type ("+" (type | lifetime))*
slice_type: "[" type "]"

generics: "<" generic_value ("," generic_value)* ","? ">"
generic_value: lifetime 
    | type 
    | type_assignment
    | type_inheritance
type_assignment: type "=" type
type_inheritance: type ":" type

