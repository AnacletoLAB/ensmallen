var data = {lines:[
{"lineNum":"    1","line":"use std::{fs::File, io::prelude::*, io::BufReader};"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use rayon::prelude::*;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"pub fn check_consistent_lines(path: &str, sep: &str) -> Result<(), String>{","class":"linePartCov","hits":"2","order":"31","possible_hits":"3",},
{"lineNum":"    6","line":"    let file = File::open(path).expect(\"Cannot open file.\");","class":"lineCov","hits":"2","order":"32","possible_hits":"2",},
{"lineNum":"    7","line":"    let buf_reader = BufReader::new(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    8","line":"    let mut expected_length: Option<usize> = None;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"    for (counter, line) in buf_reader.lines().enumerate() {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   11","line":"        if line.is_err() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   12","line":"            return Err(String::from(\"The file is empty!\"));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   13","line":"        }"},
{"lineNum":"   14","line":"        let current_line = line.unwrap();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   15","line":"        let separators_number = current_line.matches(sep).count();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   16","line":"        if *expected_length.get_or_insert(separators_number) != separators_number {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"            return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   18","line":"                format!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   19","line":"                    concat!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   20","line":"                        \"Provided file has malformed lines. \","},
{"lineNum":"   21","line":"                        \"The provided lines have different numbers \","},
{"lineNum":"   22","line":"                        \"of the given separator.\\n\","},
{"lineNum":"   23","line":"                        \"The expected number of separators was {expected_length}, \","},
{"lineNum":"   24","line":"                        \"but a line with {separators_number} separators was found. \\n\","},
{"lineNum":"   25","line":"                        \"The line is the number {counter}.\\n\","},
{"lineNum":"   26","line":"                        \"The given file is at path {path}.\\n\","},
{"lineNum":"   27","line":"                        \"The line in question is: \'{line}\'\\n\","},
{"lineNum":"   28","line":"                    ),"},
{"lineNum":"   29","line":"                    expected_length = expected_length.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"                    separators_number = separators_number,"},
{"lineNum":"   31","line":"                    counter = counter,"},
{"lineNum":"   32","line":"                    path = path,"},
{"lineNum":"   33","line":"                    line = current_line"},
{"lineNum":"   34","line":"                )"},
{"lineNum":"   35","line":"            )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"        };"},
{"lineNum":"   37","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   38","line":"    Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"pub fn get_headers(path: &str, sep: &str) -> Vec<String> {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   42","line":"    let file = File::open(path).expect(\"Cannot open file.\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   43","line":"    let mut buf_reader = BufReader::new(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    let mut line = String::new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"    buf_reader","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"        .read_line(&mut line)"},
{"lineNum":"   47","line":"        .expect(\"Cannot read from file.\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    line.trim().split(sep).map(String::from).collect()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"fn render_columns<\'a>(columns: &[&\'a str], optional_columns: &[&Option<&\'a str>]) -> Vec<&\'a str> {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   52","line":"    let mut rendered_columns: Vec<&str> = optional_columns","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"        .par_iter()"},
{"lineNum":"   54","line":"        .filter(|x| x.is_some())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"        .map(|x| x.unwrap())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   56","line":"        .collect();"},
{"lineNum":"   57","line":"    rendered_columns.extend(columns.iter());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    rendered_columns"},
{"lineNum":"   59","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"pub fn has_columns(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   62","line":"    path: &str,"},
{"lineNum":"   63","line":"    sep: &str,"},
{"lineNum":"   64","line":"    columns: &[&str],"},
{"lineNum":"   65","line":"    optional_columns: &[&Option<&str>],"},
{"lineNum":"   66","line":") -> Result<(), String> {"},
{"lineNum":"   67","line":"    let rendered_columns = render_columns(columns, optional_columns);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"    let candidate_columns = get_headers(path, sep);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"    for column in rendered_columns {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   71","line":"        if !candidate_columns.contains(&String::from(column)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"            return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"                format!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":"                    concat!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"                        \"Provided file hasn\'t the required columns.\\n\","},
{"lineNum":"   76","line":"                        \"Specifically, the given column {column} was not found \","},
{"lineNum":"   77","line":"                        \"within the available set of columns {columns:?}.\","},
{"lineNum":"   78","line":"                        \"The given file is at path {path}.\\n\","},
{"lineNum":"   79","line":"                    ),"},
{"lineNum":"   80","line":"                    column = column,"},
{"lineNum":"   81","line":"                    columns = candidate_columns,"},
{"lineNum":"   82","line":"                    path = path,"},
{"lineNum":"   83","line":"                )"},
{"lineNum":"   84","line":"            );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "with_nodes", "date" : "2020-06-22 09:16:05", "instrumented" : 44, "covered" : 2,};
var merged_data = [];
