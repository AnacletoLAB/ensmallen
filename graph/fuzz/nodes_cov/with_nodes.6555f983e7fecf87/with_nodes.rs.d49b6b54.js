var data = {lines:[
{"lineNum":"    1","line":"#![no_main]","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":"    2","line":"use libfuzzer_sys::fuzz_target;"},
{"lineNum":"    3","line":"extern crate graph;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use std::path::Path;"},
{"lineNum":"    6","line":"use std::fs::File;"},
{"lineNum":"    7","line":"use std::io::prelude::*;"},
{"lineNum":"    8","line":"use std::fs::remove_file;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use std::env::current_dir;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"mod utils;"},
{"lineNum":"   13","line":"use utils::*;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"fuzz_target!(|data: &[u8]| {"},
{"lineNum":"   16","line":"    // writing to file is REALLY slow but"},
{"lineNum":"   17","line":"    // the from_csv function read the file line by line"},
{"lineNum":"   18","line":"    // and we want coverage on this function"},
{"lineNum":"   19","line":"    // so I don\'t think there are any workarounds or mocking"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    // TEST Directed"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    // to speedup the fuzzing it might be sensible to mount the /tmp"},
{"lineNum":"   24","line":"    // to a ramdisk https://wiki.gentoo.org/wiki/Tmpfs"},
{"lineNum":"   25","line":"    let fname = Path::new(\"/tmp\").join(random_string(64));","class":"lineCov","hits":"1","order":"2","possible_hits":"1",},
{"lineNum":"   26","line":"    let filename = fname.to_str().unwrap();","class":"lineCov","hits":"2","order":"13","possible_hits":"2",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    // Write the fuzzer output to the file"},
{"lineNum":"   29","line":"    let mut file = File::create(&filename).unwrap();","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"   30","line":"    file.write_all(data).unwrap();","class":"lineCov","hits":"2","order":"15","possible_hits":"2",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    let edge_path = \"../tests/data/het_graph_edges.tsv\";","class":"lineCov","hits":"1","order":"16","possible_hits":"1",},
{"lineNum":"   34","line":"    let graph = graph::Graph::from_csv(","class":"lineCov","hits":"2","order":"17","possible_hits":"2",},
{"lineNum":"   35","line":"        edge_path,"},
{"lineNum":"   36","line":"        \"subject\","},
{"lineNum":"   37","line":"        \"object\","},
{"lineNum":"   38","line":"        false,"},
{"lineNum":"   39","line":"        None,","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":"   40","line":"        None,","class":"lineCov","hits":"1","order":"19","possible_hits":"1",},
{"lineNum":"   41","line":"        Some(\"weight\"),","class":"lineCov","hits":"1","order":"20","possible_hits":"1",},
{"lineNum":"   42","line":"        Some(1.0),","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":"   43","line":"        Some(&filename),","class":"lineCov","hits":"1","order":"22","possible_hits":"1",},
{"lineNum":"   44","line":"        Some(\"id\"),","class":"lineCov","hits":"1","order":"23","possible_hits":"1",},
{"lineNum":"   45","line":"        Some(\"category\"),","class":"lineCov","hits":"1","order":"24","possible_hits":"1",},
{"lineNum":"   46","line":"        Some(\"biolink:NamedThing\"),","class":"lineCov","hits":"1","order":"25","possible_hits":"1",},
{"lineNum":"   47","line":"        None,","class":"lineCov","hits":"1","order":"26","possible_hits":"1",},
{"lineNum":"   48","line":"        None,","class":"lineCov","hits":"1","order":"27","possible_hits":"1",},
{"lineNum":"   49","line":"        None,"},
{"lineNum":"   50","line":"    );","class":"lineCov","hits":"1","order":"38","possible_hits":"1",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    if graph.is_ok(){","class":"lineCov","hits":"1","order":"39","possible_hits":"1",},
{"lineNum":"   53","line":"        graph.unwrap().walk(10, 10, Some(0), Some(0.5), Some(2.0), Some(3.0), Some(4.0));","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    remove_file(&filename);","class":"lineCov","hits":"1","order":"40","possible_hits":"1",},
{"lineNum":"   57","line":"});","class":"linePartCov","hits":"1","order":"41","possible_hits":"4",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "with_nodes", "date" : "2020-06-22 09:48:45", "instrumented" : 22, "covered" : 22,};
var merged_data = [];
