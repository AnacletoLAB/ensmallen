var data = {lines:[
{"lineNum":"    1","line":"use super::*;"},
{"lineNum":"    2","line":"use crate::csv_utils::{check_consistent_lines, has_columns, get_headers};"},
{"lineNum":"    3","line":"use std::{fs::File, io::prelude::*, io::BufReader};"},
{"lineNum":"    4","line":"use std::collections::{HashMap, HashSet};"},
{"lineNum":"    5","line":"use rayon::prelude::*;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"impl Graph {"},
{"lineNum":"    8","line":"    fn read_edges_csv(","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"    9","line":"        path: &str,"},
{"lineNum":"   10","line":"        sep: &str,"},
{"lineNum":"   11","line":"        sources_column: &str,"},
{"lineNum":"   12","line":"        destinations_column: &str,"},
{"lineNum":"   13","line":"        edge_types_column: &Option<&str>,"},
{"lineNum":"   14","line":"        default_edge_type: &Option<&str>,"},
{"lineNum":"   15","line":"        weights_column: &Option<&str>,"},
{"lineNum":"   16","line":"        default_weight: &Option<WeightT>,"},
{"lineNum":"   17","line":"    )"},
{"lineNum":"   18","line":"     -> Result<("},
{"lineNum":"   19","line":"        Vec<NodeT>,"},
{"lineNum":"   20","line":"        Vec<NodeT>,"},
{"lineNum":"   21","line":"        HashMap<String, NodeT>,"},
{"lineNum":"   22","line":"        Vec<String>,"},
{"lineNum":"   23","line":"        Option<Vec<EdgeTypeT>>,"},
{"lineNum":"   24","line":"        Option<HashMap<String, EdgeTypeT>>,"},
{"lineNum":"   25","line":"        Option<Vec<String>>,"},
{"lineNum":"   26","line":"        Option<Vec<WeightT>>"},
{"lineNum":"   27","line":"    ), String>"},
{"lineNum":"   28","line":"     {"},
{"lineNum":"   29","line":"        // TODO figure out how to use references and lifetimes so that"},
{"lineNum":"   30","line":"        // we don\'t duplicate the strings in the mappings"},
{"lineNum":"   31","line":"        let mut sources: Vec<NodeT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   32","line":"        let mut destinations: Vec<NodeT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        let mut nodes_mapping: HashMap<String, NodeT> = HashMap::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   35","line":"        let mut nodes_reverse_mapping: Vec<String> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        let mut edge_types: Vec<NodeTypeT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   38","line":"        let mut edge_types_mapping: HashMap<String, NodeTypeT> = HashMap::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   39","line":"        let mut edge_types_reverse_mapping: Vec<String> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        let mut weights: Vec<WeightT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        let mut unique_edges_set: HashSet<(NodeT, NodeT, Option<EdgeTypeT>)> = HashSet::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        let headers = get_headers(path, sep);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        // open the file"},
{"lineNum":"   48","line":"        let file = File::open(path).expect(&format!(\"Cannot open the nodes file at {}\", path));","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"   49","line":"        let mut buf_reader = BufReader::new(file);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   50","line":"        // Skip header"},
{"lineNum":"   51","line":"        let mut line = String::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   52","line":"        let header_line = buf_reader.read_line(&mut line);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   53","line":"        if header_line.is_err(){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   54","line":"            return Err(String::from(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   55","line":"                \"Cannot read the header of the node files\""},
{"lineNum":"   56","line":"            ));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":"        // convert the csv to a dict of lists"},
{"lineNum":"   59","line":"        for (i, line) in buf_reader.lines().enumerate() {","class":"linePartCov","hits":"1","possible_hits":"6",},
{"lineNum":"   60","line":"            for (value, column) in line.as_ref().unwrap().trim_end_matches(|c| c == \'\\n\').split(sep).zip(headers.iter()) {","class":"linePartCov","hits":"1","possible_hits":"8",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"                if column == sources_column || column == destinations_column {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   63","line":"                    if ! nodes_mapping.contains_key(value){","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   64","line":"                        nodes_mapping.insert(String::from(value), nodes_reverse_mapping.len());","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   65","line":"                        nodes_reverse_mapping.push(String::from(value));","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   66","line":"                    }"},
{"lineNum":"   67","line":"                    if column == sources_column{","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"   68","line":"                        sources.push(*nodes_mapping.get(value).unwrap());","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   69","line":"                    } else {"},
{"lineNum":"   70","line":"                        destinations.push(*nodes_mapping.get(value).unwrap());","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   71","line":"                    }"},
{"lineNum":"   72","line":"                    continue;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   73","line":"                }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"                if let Some(etc) = edge_types_column {","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"   76","line":"                    if column == etc {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"                        let _value = if value.is_empty(){","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"                            default_edge_type.unwrap()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"                        } else {"},
{"lineNum":"   80","line":"                            value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"                        };"},
{"lineNum":"   82","line":"                        if ! edge_types_mapping.contains_key(value){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                            edge_types_mapping.insert(String::from(value), edge_types_reverse_mapping.len() as NodeTypeT);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"                            edge_types_reverse_mapping.push(String::from(value));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"                        }"},
{"lineNum":"   86","line":"                        edge_types.push(*edge_types_mapping.get(value).unwrap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"                        continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"                    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"                if let Some(wc) = weights_column {","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   92","line":"                    if column == wc {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   93","line":"                        weights.push(","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"   94","line":"                            if value.is_empty(){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   95","line":"                                default_weight.unwrap()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"                            } else {"},
{"lineNum":"   97","line":"                                match value.parse::<WeightT>() {","class":"linePartCov","hits":"1","possible_hits":"6",},
{"lineNum":"   98","line":"                                    Ok(g) => Ok(g),","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"   99","line":"                                    Err(_) => Err(format!(\"Cannot parse {} as float\", value))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"                                }?","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  101","line":"                            }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  102","line":"                        );","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  103","line":"                        continue;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  104","line":"                    }"},
{"lineNum":"  105","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  106","line":"            }","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  107","line":"            let triple = (sources[i], destinations[i], if edge_types_column.is_some() {Some(edge_types[i])} else {None});","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  108","line":"            if unique_edges_set.contains(&triple){","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  109","line":"                return Err(format!(","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  110","line":"                    concat!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"                        \"\\nFound duplicated line in edges file!\\n\","},
{"lineNum":"  112","line":"                        \"Specifically, the duplicated line is the number {i}.\\n\","},
{"lineNum":"  113","line":"                        \"The source node is {source} and destination node is {destination}.\\n\","},
{"lineNum":"  114","line":"                        \"{edge_type_string}\","},
{"lineNum":"  115","line":"                        \"The path of the document was {path}.\\n\","},
{"lineNum":"  116","line":"                        \"The complete line in question is:\\n{line}\\n\""},
{"lineNum":"  117","line":"                    ),"},
{"lineNum":"  118","line":"                    i=i,"},
{"lineNum":"  119","line":"                    source=sources[i],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"                    destination=destinations[i],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"                    edge_type_string=(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                        if edge_types_column.is_some() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                            format!(\"The edge type of the row is {}.\",edge_types[i])","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"                        } else {"},
{"lineNum":"  125","line":"                            String::from(\"No edge type was detected.\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"                        }"},
{"lineNum":"  127","line":"                    ),"},
{"lineNum":"  128","line":"                    path=path,"},
{"lineNum":"  129","line":"                    line=line.unwrap()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"                ));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"            }"},
{"lineNum":"  132","line":"            unique_edges_set.insert(triple);","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  133","line":"        };","class":"linePartCov","hits":"1","possible_hits":"7",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        Ok((","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  136","line":"            sources,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  137","line":"            destinations,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  138","line":"            nodes_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  139","line":"            nodes_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  140","line":"            if edge_types_column.is_some() {Some(edge_types)} else {None},","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  141","line":"            if edge_types_column.is_some() {Some(edge_types_mapping)} else {None},","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  142","line":"            if edge_types_column.is_some() {Some(edge_types_reverse_mapping)} else {None},","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  143","line":"            if weights_column.is_some() {Some(weights)} else {None}","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  144","line":"        ))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  145","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    fn read_nodes_csv(","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  148","line":"        path: &str,"},
{"lineNum":"  149","line":"        sep: &str,"},
{"lineNum":"  150","line":"        nodes_column: &str,"},
{"lineNum":"  151","line":"        nodes_mapping: &HashMap<String, NodeT>,"},
{"lineNum":"  152","line":"        node_types_column: &str,"},
{"lineNum":"  153","line":"        default_node_type: &str"},
{"lineNum":"  154","line":"    ) -> Result<("},
{"lineNum":"  155","line":"        Vec<NodeTypeT>,"},
{"lineNum":"  156","line":"        HashMap<String, NodeTypeT>,"},
{"lineNum":"  157","line":"        Vec<String>"},
{"lineNum":"  158","line":"    ), String> {"},
{"lineNum":"  159","line":"        let mut nodes: Vec<NodeT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        let mut node_types: Vec<NodeTypeT> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  162","line":"        let mut node_types_mapping: HashMap<String, NodeTypeT> = HashMap::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  163","line":"        let mut node_types_reverse_mapping: Vec<String> = Vec::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"        let mut unique_nodes_set: HashSet<NodeT> = HashSet::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        let headers = get_headers(path, sep);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        // open the file"},
{"lineNum":"  170","line":"        let file = File::open(path).expect(\"Cannot open file.\");","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  171","line":"        let mut buf_reader = BufReader::new(file);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  172","line":"        // Skip header"},
{"lineNum":"  173","line":"        let mut line = String::new();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  174","line":"        buf_reader.read_line(&mut line).unwrap();","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  175","line":"        // Flag for when a new non-singleton node has been added"},
{"lineNum":"  176","line":"        let mut new_node;"},
{"lineNum":"  177","line":"        // convert the csv to a dict of lists"},
{"lineNum":"  178","line":"        for (j, line) in buf_reader.lines() .enumerate() {","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  179","line":"            new_node = false;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  180","line":"            let parsed: HashMap<String, &str> = headers.iter().cloned()","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  181","line":"                .zip("},
{"lineNum":"  182","line":"                    line.as_ref().unwrap()","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  183","line":"                    .trim_end_matches(|c| c == \'\\n\')","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  184","line":"                    .split(sep)"},
{"lineNum":"  185","line":"                )","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  186","line":"                .collect();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"            let node = parsed.get(nodes_column).unwrap();","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  189","line":"            let result = nodes_mapping.get(*node);","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  190","line":"            // if the node is not present in the mapping, then it\'s a"},
{"lineNum":"  191","line":"            // singleton. Therefore it can be ignored and is type doesn\'t"},
{"lineNum":"  192","line":"            // matter"},
{"lineNum":"  193","line":"            if result.is_none(){","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  194","line":"                continue;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  195","line":"            }"},
{"lineNum":"  196","line":"            // since the node is not a singleton, add it to the list."},
{"lineNum":"  197","line":"            nodes.push(*result.unwrap());","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"            let value = parsed.get(node_types_column).unwrap();","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  200","line":"            let _value = if value.is_empty(){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  201","line":"                default_node_type","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":"            } else {"},
{"lineNum":"  203","line":"                value","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  204","line":"            };"},
{"lineNum":"  205","line":"            if ! node_types_mapping.contains_key(*value){","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  206","line":"                node_types_mapping.insert(String::from(*value), node_types_reverse_mapping.len() as NodeTypeT);","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  207","line":"                node_types_reverse_mapping.push(String::from(*value));","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  208","line":"            }"},
{"lineNum":"  209","line":"            node_types.push(*node_types_mapping.get(*value).unwrap());","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"            if new_node && unique_nodes_set.contains(&nodes[nodes.len()-1]){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"                        format!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  215","line":"                            concat!(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"                            \"\\nFound duplicated line in nodes file!\\n\","},
{"lineNum":"  217","line":"                            \"Specifically, the duplicated line is the number {j}.\\n\","},
{"lineNum":"  218","line":"                            \"The node is {node}.\\n\","},
{"lineNum":"  219","line":"                            \"The node type of the row is {node_type}.\\n\","},
{"lineNum":"  220","line":"                            \"The path of the document was {path}.\\n\","},
{"lineNum":"  221","line":"                            \"The complete line in question is:\\n{line}\\n\""},
{"lineNum":"  222","line":"                            ),"},
{"lineNum":"  223","line":"                            j=j,"},
{"lineNum":"  224","line":"                            node=nodes[nodes.len()-1],","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  225","line":"                            node_type=node_types[nodes.len()-1],","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"                            path=path,"},
{"lineNum":"  227","line":"                            line=line.unwrap()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"                        )"},
{"lineNum":"  229","line":"                    );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"            }"},
{"lineNum":"  231","line":"            if new_node {","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  232","line":"                unique_nodes_set.insert(nodes[nodes.len()-1]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  233","line":"            }"},
{"lineNum":"  234","line":"        };","class":"linePartCov","hits":"1","possible_hits":"7",},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        if nodes.len() != nodes_mapping.len() {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  237","line":"            return Err(","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  238","line":"                format!(","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  239","line":"                    concat!(","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  240","line":"                        \"The size of the given nodes_mapping {} does not match the number of nodes found {}.\","},
{"lineNum":"  241","line":"                        \"This might be due to a mismatch between the edge and node files.\""},
{"lineNum":"  242","line":"                    ),"},
{"lineNum":"  243","line":"                    nodes.len(), nodes_mapping.len()","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  244","line":"                )"},
{"lineNum":"  245","line":"            )","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        if nodes.len() != node_types.len() {","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  249","line":"            panic!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  250","line":"                \"Nodes {} and node types {} lengths mismatchs: nodes {:?} node types {:?}\",","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"                nodes.len(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"                node_types.len(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"                nodes,"},
{"lineNum":"  254","line":"                node_types"},
{"lineNum":"  255","line":"            )"},
{"lineNum":"  256","line":"        }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        // Sort the node types using the indices order specified by the nodes"},
{"lineNum":"  259","line":"        let sorted_node_types: Vec<NodeTypeT> = nodes.par_iter().map(","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  260","line":"                |x| node_types[*x]","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  261","line":"            ).collect();","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"        // return the results"},
{"lineNum":"  264","line":"        Ok((","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  265","line":"            sorted_node_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  266","line":"            node_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  267","line":"            node_types_reverse_mapping","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  268","line":"        ))","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  269","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    pub fn from_csv(","class":"linePartCov","hits":"2","order":"28","possible_hits":"3",},
{"lineNum":"  273","line":"        edge_path: &str,"},
{"lineNum":"  274","line":"        sources_column: &str,"},
{"lineNum":"  275","line":"        destinations_column: &str,"},
{"lineNum":"  276","line":"        directed: bool,"},
{"lineNum":"  277","line":"        edge_types_column: Option<&str>,"},
{"lineNum":"  278","line":"        default_edge_type: Option<&str>,"},
{"lineNum":"  279","line":"        weights_column: Option<&str>,"},
{"lineNum":"  280","line":"        default_weight: Option<WeightT>,"},
{"lineNum":"  281","line":"        node_path: Option<&str>,"},
{"lineNum":"  282","line":"        nodes_column: Option<&str>,"},
{"lineNum":"  283","line":"        node_types_column: Option<&str>,"},
{"lineNum":"  284","line":"        default_node_type: Option<&str>,"},
{"lineNum":"  285","line":"        edge_sep: Option<&str>,"},
{"lineNum":"  286","line":"        node_sep: Option<&str>,"},
{"lineNum":"  287","line":"        validate_input_data: Option<bool>,"},
{"lineNum":"  288","line":"    ) -> Result<Graph, String> {"},
{"lineNum":"  289","line":"        // If the separators were not provided we use by default tabs."},
{"lineNum":"  290","line":"        let _edge_sep = edge_sep.unwrap_or_else(|| \"\\t\");","class":"lineCov","hits":"2","order":"29","possible_hits":"2",},
{"lineNum":"  291","line":"        let _node_sep = node_sep.unwrap_or_else(|| \"\\t\");","class":"lineCov","hits":"2","order":"30","possible_hits":"2",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        // We validate the provided files, starting from the edges file."},
{"lineNum":"  294","line":"        // Specifically, we start by checking if every line has the same amount"},
{"lineNum":"  295","line":"        // of the given separator character."},
{"lineNum":"  296","line":"        check_consistent_lines(&*edge_path, &*_edge_sep)?;","class":"lineCov","hits":"3","order":"31","possible_hits":"3",},
{"lineNum":"  297","line":"        // Then we check if the given columns actually exist in the given file"},
{"lineNum":"  298","line":"        // header."},
{"lineNum":"  299","line":"        has_columns(","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  300","line":"            &*edge_path,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  301","line":"            &*_edge_sep,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  302","line":"            &[&sources_column, &destinations_column],","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  303","line":"            &[&edge_types_column, &weights_column],","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  304","line":"        )?;","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        // If the nodes path was provided, we also validate it."},
{"lineNum":"  307","line":"        if let Some(path) = &node_path {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  308","line":"            // As for the previous file, first we check that the file has the"},
{"lineNum":"  309","line":"            // same amount of separators in each line."},
{"lineNum":"  310","line":"            check_consistent_lines(&*path, &*_node_sep)?;","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  311","line":"            if nodes_column.is_none(){","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  312","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  313","line":"                    String::from(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"                        \"If the node_path is passed, the nodes_column is required\""},
{"lineNum":"  315","line":"                    )"},
{"lineNum":"  316","line":"                );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"            }"},
{"lineNum":"  318","line":"            if node_types_column.is_none(){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  321","line":"                    String::from(\"If the node_path is passed, the node_types_column is required\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"                    )"},
{"lineNum":"  323","line":"                );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"            }"},
{"lineNum":"  325","line":"            if default_node_type.is_none(){","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":"                    String::from(\"If the node_path is passed, the default_node_type is required\"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"                    )"},
{"lineNum":"  330","line":"                );","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"            }"},
{"lineNum":"  332","line":"            // Then we check if the given columns actually exists in the file."},
{"lineNum":"  333","line":"            has_columns(","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  334","line":"                &*path,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  335","line":"                &*_node_sep,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  336","line":"                &[&nodes_column.clone().unwrap()],","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  337","line":"                &[&node_types_column],","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  338","line":"            )?;","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  339","line":"        }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"        let ("},
{"lineNum":"  342","line":"            sources,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  343","line":"            destinations,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  344","line":"            nodes_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  345","line":"            nodes_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  346","line":"            edge_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  347","line":"            edge_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  348","line":"            edge_types_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  349","line":"            weights","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  350","line":"        ) = Graph::read_edges_csv(","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  351","line":"            &edge_path,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  352","line":"            &_edge_sep,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  353","line":"            &sources_column,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  354","line":"            &destinations_column,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  355","line":"            &edge_types_column,"},
{"lineNum":"  356","line":"            &default_edge_type,"},
{"lineNum":"  357","line":"            &weights_column,"},
{"lineNum":"  358","line":"            &default_weight"},
{"lineNum":"  359","line":"        )?;","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"        let ("},
{"lineNum":"  363","line":"            node_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  364","line":"            node_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  365","line":"            node_types_reverse_mapping","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  366","line":"        ) = if let Some(path) = &node_path {","class":"linePartCov","hits":"1","possible_hits":"3",},
{"lineNum":"  367","line":"            let ("},
{"lineNum":"  368","line":"                node_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  369","line":"                node_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  370","line":"                node_types_reverse_mapping","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  371","line":"            ) = Graph::read_nodes_csv(","class":"linePartCov","hits":"1","possible_hits":"4",},
{"lineNum":"  372","line":"                &path,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  373","line":"                &_node_sep,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  374","line":"                &nodes_column.unwrap(),","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  375","line":"                &nodes_mapping,"},
{"lineNum":"  376","line":"                &node_types_column.unwrap(),","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  377","line":"                &default_node_type.unwrap(),","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  378","line":"            )?;","class":"linePartCov","hits":"1","possible_hits":"5",},
{"lineNum":"  379","line":"            (Some(node_types), Some(node_types_mapping), Some(node_types_reverse_mapping))","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  380","line":"        } else {","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  381","line":"            (None, None, None)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        };","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"        if directed {","class":"linePartCov","hits":"1","possible_hits":"2",},
{"lineNum":"  385","line":"            Graph::new_directed(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"                sources,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"                destinations,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":"                nodes_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":"                nodes_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"                node_types,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"                node_types_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"                node_types_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"                edge_types,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":"                edge_types_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"                edge_types_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  396","line":"                weights,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"                validate_input_data,"},
{"lineNum":"  398","line":"            )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"        } else {"},
{"lineNum":"  400","line":"            Graph::new_undirected(","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  401","line":"                sources,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  402","line":"                destinations,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  403","line":"                nodes_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  404","line":"                nodes_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  405","line":"                node_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  406","line":"                node_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  407","line":"                node_types_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  408","line":"                edge_types,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  409","line":"                edge_types_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  410","line":"                edge_types_reverse_mapping,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  411","line":"                weights,","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  412","line":"                validate_input_data,"},
{"lineNum":"  413","line":"            )","class":"lineCov","hits":"1","possible_hits":"1",},
{"lineNum":"  414","line":"        }"},
{"lineNum":"  415","line":"    }","class":"linePartCov","hits":"2","order":"37","possible_hits":"6",},
{"lineNum":"  416","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "with_nodes", "date" : "2020-06-22 09:48:45", "instrumented" : 231, "covered" : 165,};
var merged_data = [];
