var data = {lines:[
{"lineNum":"    1","line":"use super::*;"},
{"lineNum":"    2","line":"use crate::csv_utils::{check_consistent_lines, has_columns, get_headers};"},
{"lineNum":"    3","line":"use std::{fs::File, io::prelude::*, io::BufReader};"},
{"lineNum":"    4","line":"use std::collections::{HashMap, HashSet};"},
{"lineNum":"    5","line":"use rayon::prelude::*;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"impl Graph {"},
{"lineNum":"    8","line":"    fn read_edges_csv(","class":"linePartCov","hits":"2","order":"74","possible_hits":"3",},
{"lineNum":"    9","line":"        path: &str,"},
{"lineNum":"   10","line":"        sep: &str,"},
{"lineNum":"   11","line":"        sources_column: &str,"},
{"lineNum":"   12","line":"        destinations_column: &str,"},
{"lineNum":"   13","line":"        edge_types_column: &Option<&str>,"},
{"lineNum":"   14","line":"        default_edge_type: &Option<&str>,"},
{"lineNum":"   15","line":"        weights_column: &Option<&str>,"},
{"lineNum":"   16","line":"        default_weight: &Option<WeightT>,"},
{"lineNum":"   17","line":"    )"},
{"lineNum":"   18","line":"     -> Result<("},
{"lineNum":"   19","line":"        Vec<NodeT>,"},
{"lineNum":"   20","line":"        Vec<NodeT>,"},
{"lineNum":"   21","line":"        HashMap<String, NodeT>,"},
{"lineNum":"   22","line":"        Vec<String>,"},
{"lineNum":"   23","line":"        Option<Vec<EdgeTypeT>>,"},
{"lineNum":"   24","line":"        Option<HashMap<String, EdgeTypeT>>,"},
{"lineNum":"   25","line":"        Option<Vec<String>>,"},
{"lineNum":"   26","line":"        Option<Vec<WeightT>>"},
{"lineNum":"   27","line":"    ), String>"},
{"lineNum":"   28","line":"     {"},
{"lineNum":"   29","line":"        // TODO figure out how to use references and lifetimes so that"},
{"lineNum":"   30","line":"        // we don\'t duplicate the strings in the mappings"},
{"lineNum":"   31","line":"        let mut sources: Vec<NodeT> = Vec::new();","class":"lineCov","hits":"1","order":"75","possible_hits":"1",},
{"lineNum":"   32","line":"        let mut destinations: Vec<NodeT> = Vec::new();","class":"lineCov","hits":"1","order":"76","possible_hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        let mut nodes_mapping: HashMap<String, NodeT> = HashMap::new();","class":"lineCov","hits":"1","order":"77","possible_hits":"1",},
{"lineNum":"   35","line":"        let mut nodes_reverse_mapping: Vec<String> = Vec::new();","class":"lineCov","hits":"1","order":"78","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        let mut edge_types: Vec<NodeTypeT> = Vec::new();","class":"lineCov","hits":"1","order":"79","possible_hits":"1",},
{"lineNum":"   38","line":"        let mut edge_types_mapping: HashMap<String, NodeTypeT> = HashMap::new();","class":"lineCov","hits":"1","order":"80","possible_hits":"1",},
{"lineNum":"   39","line":"        let mut edge_types_reverse_mapping: Vec<String> = Vec::new();","class":"lineCov","hits":"1","order":"81","possible_hits":"1",},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        let mut weights: Vec<WeightT> = Vec::new();","class":"lineCov","hits":"1","order":"82","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        let mut unique_edges_set: HashSet<(NodeT, NodeT, Option<EdgeTypeT>)> = HashSet::new();","class":"lineCov","hits":"1","order":"83","possible_hits":"1",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        let headers = get_headers(path, sep);","class":"lineCov","hits":"1","order":"84","possible_hits":"1",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        // open the file"},
{"lineNum":"   48","line":"        let file = File::open(path).expect(\"Cannot open file.\");","class":"lineCov","hits":"3","order":"85","possible_hits":"3",},
{"lineNum":"   49","line":"        let mut buf_reader = BufReader::new(file);","class":"lineCov","hits":"1","order":"86","possible_hits":"1",},
{"lineNum":"   50","line":"        // Skip header"},
{"lineNum":"   51","line":"        let mut line = String::new();","class":"lineCov","hits":"1","order":"87","possible_hits":"1",},
{"lineNum":"   52","line":"        buf_reader.read_line(&mut line).unwrap();","class":"lineCov","hits":"2","order":"88","possible_hits":"2",},
{"lineNum":"   53","line":"        // convert the csv to a dict of lists"},
{"lineNum":"   54","line":"        for (i, line) in buf_reader.lines().enumerate() {","class":"lineCov","hits":"5","order":"89","possible_hits":"5",},
{"lineNum":"   55","line":"            for (value, column) in line.as_ref().unwrap().trim_end_matches(|c| c == \'\\n\').split(sep).zip(headers.iter()) {","class":"linePartCov","hits":"6","order":"90","possible_hits":"7",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"                if column == sources_column || column == destinations_column {","class":"lineCov","hits":"1","order":"91","possible_hits":"1",},
{"lineNum":"   58","line":"                    if ! nodes_mapping.contains_key(value){","class":"lineCov","hits":"1","order":"92","possible_hits":"1",},
{"lineNum":"   59","line":"                        nodes_mapping.insert(String::from(value), nodes_reverse_mapping.len());","class":"linePartCov","hits":"1","order":"93","possible_hits":"2",},
{"lineNum":"   60","line":"                        nodes_reverse_mapping.push(String::from(value));","class":"lineCov","hits":"1","order":"94","possible_hits":"1",},
{"lineNum":"   61","line":"                    }"},
{"lineNum":"   62","line":"                    if column == sources_column{","class":"lineCov","hits":"3","order":"95","possible_hits":"3",},
{"lineNum":"   63","line":"                        sources.push(*nodes_mapping.get(value).unwrap());","class":"lineCov","hits":"1","order":"96","possible_hits":"1",},
{"lineNum":"   64","line":"                    } else {"},
{"lineNum":"   65","line":"                        destinations.push(*nodes_mapping.get(value).unwrap());","class":"lineCov","hits":"2","order":"99","possible_hits":"2",},
{"lineNum":"   66","line":"                    }"},
{"lineNum":"   67","line":"                    continue;","class":"lineCov","hits":"1","order":"98","possible_hits":"1",},
{"lineNum":"   68","line":"                }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"                if let Some(etc) = edge_types_column {","class":"linePartCov","hits":"2","order":"100","possible_hits":"3",},
{"lineNum":"   71","line":"                    if column == etc {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"                        let _value = if value.is_empty(){","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   73","line":"                            default_edge_type.unwrap()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"                        } else {"},
{"lineNum":"   75","line":"                            value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"                        };"},
{"lineNum":"   77","line":"                        if ! edge_types_mapping.contains_key(value){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"                            edge_types_mapping.insert(String::from(value), edge_types_reverse_mapping.len() as NodeTypeT);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"                            edge_types_reverse_mapping.push(String::from(value));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"                        }"},
{"lineNum":"   81","line":"                        edge_types.push(*edge_types_mapping.get(value).unwrap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"                        continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"                if let Some(wc) = weights_column {","class":"lineCov","hits":"2","order":"101","possible_hits":"2",},
{"lineNum":"   87","line":"                    if column == wc {","class":"lineCov","hits":"1","order":"102","possible_hits":"1",},
{"lineNum":"   88","line":"                        weights.push(","class":"lineCov","hits":"1","order":"105","possible_hits":"1",},
{"lineNum":"   89","line":"                            if value.is_empty(){","class":"lineCov","hits":"2","order":"103","possible_hits":"2",},
{"lineNum":"   90","line":"                                default_weight.unwrap()","class":"lineCov","hits":"1","order":"379","possible_hits":"1",},
{"lineNum":"   91","line":"                            } else {"},
{"lineNum":"   92","line":"                                match value.parse::<WeightT>() {","class":"lineCov","hits":"2","order":"104","possible_hits":"2",},
{"lineNum":"   93","line":"                                    Ok(g) => Ok(g),"},
{"lineNum":"   94","line":"                                    Err(_) => Err(format!(\"Cannot parse {} as float\", value))","class":"lineCov","hits":"1","order":"106","possible_hits":"1",},
{"lineNum":"   95","line":"                                }?","class":"lineCov","hits":"1","order":"108","possible_hits":"1",},
{"lineNum":"   96","line":"                            }"},
{"lineNum":"   97","line":"                        );","class":"lineCov","hits":"2","order":"107","possible_hits":"2",},
{"lineNum":"   98","line":"                        continue;","class":"lineCov","hits":"3","order":"97","possible_hits":"3",},
{"lineNum":"   99","line":"                    }","class":"lineCov","hits":"2","order":"109","possible_hits":"2",},
{"lineNum":"  100","line":"                }","class":"lineCov","hits":"1","order":"110","possible_hits":"1",},
{"lineNum":"  101","line":"            }","class":"lineCov","hits":"4","order":"370","possible_hits":"4",},
{"lineNum":"  102","line":"            let triple = (sources[i], destinations[i], if edge_types_column.is_some() {Some(edge_types[i])} else {None});","class":"lineCov","hits":"1","order":"371","possible_hits":"1",},
{"lineNum":"  103","line":"            if unique_edges_set.contains(&triple){"},
{"lineNum":"  104","line":"                return Err(format!("},
{"lineNum":"  105","line":"                    concat!("},
{"lineNum":"  106","line":"                        \"\\nFound duplicated line in edges file!\\n\","},
{"lineNum":"  107","line":"                        \"Specifically, the duplicated line is the number {i}.\\n\","},
{"lineNum":"  108","line":"                        \"The source node is {source} and destination node is {destination}.\\n\","},
{"lineNum":"  109","line":"                        \"{edge_type_string}\","},
{"lineNum":"  110","line":"                        \"The path of the document was {path}.\\n\","},
{"lineNum":"  111","line":"                        \"The complete line in question is:\\n{line}\\n\"","class":"lineCov","hits":"1","order":"372","possible_hits":"1",},
{"lineNum":"  112","line":"                    ),","class":"lineCov","hits":"1","order":"373","possible_hits":"1",},
{"lineNum":"  113","line":"                    i=i,","class":"lineCov","hits":"1","order":"374","possible_hits":"1",},
{"lineNum":"  114","line":"                    source=sources[i],","class":"lineCov","hits":"1","order":"375","possible_hits":"1",},
{"lineNum":"  115","line":"                    destination=destinations[i],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"                    edge_type_string=("},
{"lineNum":"  117","line":"                        if edge_types_column.is_some() {","class":"lineCov","hits":"2","order":"376","possible_hits":"2",},
{"lineNum":"  118","line":"                            format!(\"The edge type of the row is {}.\",edge_types[i])"},
{"lineNum":"  119","line":"                        } else {"},
{"lineNum":"  120","line":"                            String::from(\"No edge type was detected.\")"},
{"lineNum":"  121","line":"                        }","class":"lineCov","hits":"1","order":"377","possible_hits":"1",},
{"lineNum":"  122","line":"                    ),","class":"lineCov","hits":"1","order":"378","possible_hits":"1",},
{"lineNum":"  123","line":"                    path=path,"},
{"lineNum":"  124","line":"                    line=line.unwrap()","class":"lineCov","hits":"2","order":"111","possible_hits":"2",},
{"lineNum":"  125","line":"                ));","class":"linePartCov","hits":"4","order":"112","possible_hits":"5",},
{"lineNum":"  126","line":"            }"},
{"lineNum":"  127","line":"            unique_edges_set.insert(triple);","class":"lineCov","hits":"3","order":"113","possible_hits":"3",},
{"lineNum":"  128","line":"        };","class":"lineCov","hits":"1","order":"114","possible_hits":"1",},
{"lineNum":"  129","line":"","class":"lineCov","hits":"1","order":"115","possible_hits":"1",},
{"lineNum":"  130","line":"        Ok((","class":"lineCov","hits":"1","order":"116","possible_hits":"1",},
{"lineNum":"  131","line":"            sources,","class":"lineCov","hits":"1","order":"117","possible_hits":"1",},
{"lineNum":"  132","line":"            destinations,","class":"lineCov","hits":"2","order":"118","possible_hits":"2",},
{"lineNum":"  133","line":"            nodes_mapping,","class":"lineCov","hits":"2","order":"119","possible_hits":"2",},
{"lineNum":"  134","line":"            nodes_reverse_mapping,","class":"lineCov","hits":"2","order":"120","possible_hits":"2",},
{"lineNum":"  135","line":"            if edge_types_column.is_some() {Some(edge_types)} else {None},","class":"linePartCov","hits":"1","order":"121","possible_hits":"2",},
{"lineNum":"  136","line":"            if edge_types_column.is_some() {Some(edge_types_mapping)} else {None},","class":"linePartCov","hits":"2","order":"122","possible_hits":"6",},
{"lineNum":"  137","line":"            if edge_types_column.is_some() {Some(edge_types_reverse_mapping)} else {None},","class":"linePartCov","hits":"3","order":"123","possible_hits":"7",},
{"lineNum":"  138","line":"            if weights_column.is_some() {Some(weights)} else {None}"},
{"lineNum":"  139","line":"        ))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    fn read_nodes_csv("},
{"lineNum":"  143","line":"        path: &str,"},
{"lineNum":"  144","line":"        sep: &str,"},
{"lineNum":"  145","line":"        nodes_column: &str,"},
{"lineNum":"  146","line":"        nodes_mapping: &HashMap<String, NodeT>,"},
{"lineNum":"  147","line":"        node_types_column: &str,"},
{"lineNum":"  148","line":"        default_node_type: &str"},
{"lineNum":"  149","line":"    ) -> Result<("},
{"lineNum":"  150","line":"        Vec<NodeTypeT>,"},
{"lineNum":"  151","line":"        HashMap<String, NodeTypeT>,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"        Vec<String>"},
{"lineNum":"  153","line":"    ), String> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"        let mut nodes: Vec<NodeT> = Vec::new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"        let mut node_types: Vec<NodeTypeT> = Vec::new();"},
{"lineNum":"  157","line":"        let mut node_types_mapping: HashMap<String, NodeTypeT> = HashMap::new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        let mut node_types_reverse_mapping: Vec<String> = Vec::new();"},
{"lineNum":"  159","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"        let mut unique_nodes_set: HashSet<NodeT> = HashSet::new();"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        let headers = get_headers(path, sep);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  163","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"        // open the file"},
{"lineNum":"  165","line":"        let file = File::open(path).expect(\"Cannot open file.\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"        let mut buf_reader = BufReader::new(file);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"        // Skip header"},
{"lineNum":"  168","line":"        let mut line = String::new();"},
{"lineNum":"  169","line":"        buf_reader.read_line(&mut line).unwrap();"},
{"lineNum":"  170","line":"        // Flag for when a new non-singleton node has been added","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  171","line":"        let mut new_node;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"        // convert the csv to a dict of lists","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  173","line":"        for (j, line) in buf_reader.lines().enumerate() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            new_node = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"            for (value, column) in line.as_ref().unwrap().trim_end_matches(|c| c == \'\\n\').split(sep).zip(headers.iter()) {"},
{"lineNum":"  176","line":"                if column == nodes_column {"},
{"lineNum":"  177","line":"                    let result = nodes_mapping.get(value);"},
{"lineNum":"  178","line":"                    // if the node is not present in the mapping, then it\'s a","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                    // singleton. Therefore it can be ignored and is type doesn\'t","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  180","line":"                    // matter"},
{"lineNum":"  181","line":"                    if result.is_none(){"},
{"lineNum":"  182","line":"                        continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  183","line":"                    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"                    // since the node is not a singleton, add it to the list.","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"                    nodes.push(*result.unwrap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"                    new_node = true;"},
{"lineNum":"  187","line":"                    continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  188","line":"                }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"                if column == node_types_column{"},
{"lineNum":"  191","line":"                    let _value = if value.is_empty(){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"                        default_node_type"},
{"lineNum":"  193","line":"                    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                        value","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"                    };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"                    if ! node_types_mapping.contains_key(value){"},
{"lineNum":"  197","line":"                        node_types_mapping.insert(String::from(value), node_types_reverse_mapping.len() as NodeTypeT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                        node_types_reverse_mapping.push(String::from(value));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"                    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  200","line":"                    node_types.push(*node_types_mapping.get(value).unwrap());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  201","line":"                }"},
{"lineNum":"  202","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"            if new_node && unique_nodes_set.contains(&nodes[nodes.len()-1]){","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  204","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"                return Err("},
{"lineNum":"  206","line":"                        format!("},
{"lineNum":"  207","line":"                            concat!("},
{"lineNum":"  208","line":"                            \"\\nFound duplicated line in nodes file!\\n\","},
{"lineNum":"  209","line":"                            \"Specifically, the duplicated line is the number {j}.\\n\","},
{"lineNum":"  210","line":"                            \"The node is {node}.\\n\","},
{"lineNum":"  211","line":"                            \"The node type of the row is {node_type}.\\n\","},
{"lineNum":"  212","line":"                            \"The path of the document was {path}.\\n\","},
{"lineNum":"  213","line":"                            \"The complete line in question is:\\n{line}\\n\"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  214","line":"                            ),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"                            j=j,"},
{"lineNum":"  216","line":"                            node=nodes[nodes.len()-1],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                            node_type=node_types[nodes.len()-1],"},
{"lineNum":"  218","line":"                            path=path,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"                            line=line.unwrap()"},
{"lineNum":"  220","line":"                        )","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  221","line":"                    );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  222","line":"            }"},
{"lineNum":"  223","line":"            if new_node {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  224","line":"                unique_nodes_set.insert(nodes[nodes.len()-1]);"},
{"lineNum":"  225","line":"            }"},
{"lineNum":"  226","line":"        };","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  227","line":"","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  228","line":"        // Sort the node types using the indices order specified by the nodes","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"        let sorted_node_types: Vec<NodeTypeT> = nodes.par_iter().map("},
{"lineNum":"  230","line":"                |x| node_types[*x]"},
{"lineNum":"  231","line":"            ).collect();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  232","line":"","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"        // return the results","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"        Ok((","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"            sorted_node_types,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  236","line":"            node_types_mapping,","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  237","line":"            node_types_reverse_mapping"},
{"lineNum":"  238","line":"        ))"},
{"lineNum":"  239","line":"    }","class":"linePartCov","hits":"2","order":"25","possible_hits":"3",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    pub fn from_csv("},
{"lineNum":"  243","line":"        edge_path: &str,"},
{"lineNum":"  244","line":"        sources_column: &str,"},
{"lineNum":"  245","line":"        destinations_column: &str,"},
{"lineNum":"  246","line":"        directed: bool,"},
{"lineNum":"  247","line":"        edge_types_column: Option<&str>,"},
{"lineNum":"  248","line":"        default_edge_type: Option<&str>,"},
{"lineNum":"  249","line":"        weights_column: Option<&str>,"},
{"lineNum":"  250","line":"        default_weight: Option<WeightT>,"},
{"lineNum":"  251","line":"        node_path: Option<&str>,"},
{"lineNum":"  252","line":"        nodes_column: Option<&str>,"},
{"lineNum":"  253","line":"        node_types_column: Option<&str>,"},
{"lineNum":"  254","line":"        default_node_type: Option<&str>,"},
{"lineNum":"  255","line":"        edge_sep: Option<&str>,"},
{"lineNum":"  256","line":"        node_sep: Option<&str>,"},
{"lineNum":"  257","line":"        validate_input_data: Option<bool>,","class":"lineCov","hits":"2","order":"26","possible_hits":"2",},
{"lineNum":"  258","line":"    ) -> Result<Graph, String> {","class":"lineCov","hits":"2","order":"27","possible_hits":"2",},
{"lineNum":"  259","line":"        // If the separators were not provided we use by default tabs."},
{"lineNum":"  260","line":"        let _edge_sep = edge_sep.unwrap_or_else(|| \"\\t\");"},
{"lineNum":"  261","line":"        let _node_sep = node_sep.unwrap_or_else(|| \"\\t\");"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"        // We validate the provided files, starting from the edges file.","class":"lineCov","hits":"3","order":"28","possible_hits":"3",},
{"lineNum":"  264","line":"        // Specifically, we start by checking if every line has the same amount"},
{"lineNum":"  265","line":"        // of the given separator character."},
{"lineNum":"  266","line":"        check_consistent_lines(&*edge_path, &*_edge_sep)?;","class":"linePartCov","hits":"2","order":"41","possible_hits":"3",},
{"lineNum":"  267","line":"        // Then we check if the given columns actually exist in the given file","class":"lineCov","hits":"1","order":"42","possible_hits":"1",},
{"lineNum":"  268","line":"        // header.","class":"lineCov","hits":"1","order":"43","possible_hits":"1",},
{"lineNum":"  269","line":"        has_columns(","class":"lineCov","hits":"1","order":"44","possible_hits":"1",},
{"lineNum":"  270","line":"            &*edge_path,","class":"lineCov","hits":"1","order":"45","possible_hits":"1",},
{"lineNum":"  271","line":"            &*_edge_sep,","class":"linePartCov","hits":"1","order":"67","possible_hits":"2",},
{"lineNum":"  272","line":"            &[&sources_column, &destinations_column],"},
{"lineNum":"  273","line":"            &[&edge_types_column, &weights_column],"},
{"lineNum":"  274","line":"        )?;","class":"lineCov","hits":"1","order":"68","possible_hits":"1",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        // If the nodes path was provided, we also validate it."},
{"lineNum":"  277","line":"        if let Some(path) = &node_path {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"            // As for the previous file, first we check that the file has the","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"            // same amount of separators in each line.","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  280","line":"            check_consistent_lines(&*path, &*_node_sep)?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"            if nodes_column.is_none(){"},
{"lineNum":"  282","line":"                return Err("},
{"lineNum":"  283","line":"                    String::from(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"                        \"If the node_path is passed, the nodes_column is required\""},
{"lineNum":"  285","line":"                    )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  286","line":"                );"},
{"lineNum":"  287","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  288","line":"            if node_types_column.is_none(){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"                    String::from(\"If the node_path is passed, the node_types_column is required\""},
{"lineNum":"  292","line":"                    )","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"                );"},
{"lineNum":"  294","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  295","line":"            if default_node_type.is_none(){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"                return Err(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"                    String::from(\"If the node_path is passed, the default_node_type is required\""},
{"lineNum":"  299","line":"                    )"},
{"lineNum":"  300","line":"                );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  301","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"            // Then we check if the given columns actually exists in the file.","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"            has_columns(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  304","line":"                &*path,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"                &*_node_sep,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  306","line":"                &[&nodes_column.clone().unwrap()],"},
{"lineNum":"  307","line":"                &[&node_types_column],"},
{"lineNum":"  308","line":"            )?;"},
{"lineNum":"  309","line":"        }","class":"lineCov","hits":"1","order":"125","possible_hits":"1",},
{"lineNum":"  310","line":"","class":"lineCov","hits":"1","order":"126","possible_hits":"1",},
{"lineNum":"  311","line":"        let (","class":"lineCov","hits":"1","order":"127","possible_hits":"1",},
{"lineNum":"  312","line":"            sources,","class":"lineCov","hits":"1","order":"128","possible_hits":"1",},
{"lineNum":"  313","line":"            destinations,","class":"lineCov","hits":"1","order":"129","possible_hits":"1",},
{"lineNum":"  314","line":"            nodes_mapping,","class":"lineCov","hits":"1","order":"130","possible_hits":"1",},
{"lineNum":"  315","line":"            nodes_reverse_mapping,","class":"lineCov","hits":"1","order":"131","possible_hits":"1",},
{"lineNum":"  316","line":"            edge_types,","class":"lineCov","hits":"1","order":"132","possible_hits":"1",},
{"lineNum":"  317","line":"            edge_types_mapping,","class":"linePartCov","hits":"3","order":"69","possible_hits":"4",},
{"lineNum":"  318","line":"            edge_types_reverse_mapping,","class":"lineCov","hits":"1","order":"70","possible_hits":"1",},
{"lineNum":"  319","line":"            weights","class":"lineCov","hits":"1","order":"71","possible_hits":"1",},
{"lineNum":"  320","line":"        ) = Graph::read_edges_csv(","class":"lineCov","hits":"1","order":"72","possible_hits":"1",},
{"lineNum":"  321","line":"            &edge_path,","class":"lineCov","hits":"1","order":"73","possible_hits":"1",},
{"lineNum":"  322","line":"            &_edge_sep,"},
{"lineNum":"  323","line":"            &sources_column,"},
{"lineNum":"  324","line":"            &destinations_column,"},
{"lineNum":"  325","line":"            &edge_types_column,"},
{"lineNum":"  326","line":"            &default_edge_type,","class":"lineCov","hits":"4","order":"124","possible_hits":"4",},
{"lineNum":"  327","line":"            &weights_column,"},
{"lineNum":"  328","line":"            &default_weight"},
{"lineNum":"  329","line":"        )?;"},
{"lineNum":"  330","line":"","class":"lineCov","hits":"1","order":"135","possible_hits":"1",},
{"lineNum":"  331","line":"","class":"lineCov","hits":"1","order":"136","possible_hits":"1",},
{"lineNum":"  332","line":"        let (","class":"lineCov","hits":"1","order":"137","possible_hits":"1",},
{"lineNum":"  333","line":"            node_types,","class":"linePartCov","hits":"2","order":"133","possible_hits":"3",},
{"lineNum":"  334","line":"            node_types_mapping,"},
{"lineNum":"  335","line":"            node_types_reverse_mapping","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"        ) = if let Some(path) = &node_path {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"            let (","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"                node_types,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  339","line":"                node_types_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"                node_types_reverse_mapping","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"            ) = Graph::read_nodes_csv(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"                &path,"},
{"lineNum":"  343","line":"                &_node_sep,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"                &nodes_column.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"                &nodes_mapping,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  346","line":"                &node_types_column.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"                &default_node_type.unwrap(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":"            )?;","class":"lineCov","hits":"1","order":"134","possible_hits":"1",},
{"lineNum":"  349","line":"            (Some(node_types), Some(node_types_mapping), Some(node_types_reverse_mapping))","class":"linePartCov","hits":"1","order":"138","possible_hits":"2",},
{"lineNum":"  350","line":"        } else {"},
{"lineNum":"  351","line":"            (None, None, None)","class":"lineCov","hits":"2","order":"139","possible_hits":"2",},
{"lineNum":"  352","line":"        };","class":"lineCov","hits":"1","order":"151","possible_hits":"1",},
{"lineNum":"  353","line":"","class":"lineCov","hits":"1","order":"140","possible_hits":"1",},
{"lineNum":"  354","line":"        if directed {","class":"lineCov","hits":"1","order":"141","possible_hits":"1",},
{"lineNum":"  355","line":"            Graph::new_directed(","class":"lineCov","hits":"1","order":"142","possible_hits":"1",},
{"lineNum":"  356","line":"                sources,","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":"  357","line":"                destinations,","class":"lineCov","hits":"1","order":"144","possible_hits":"1",},
{"lineNum":"  358","line":"                nodes_mapping,","class":"lineCov","hits":"1","order":"145","possible_hits":"1",},
{"lineNum":"  359","line":"                nodes_reverse_mapping,","class":"lineCov","hits":"1","order":"146","possible_hits":"1",},
{"lineNum":"  360","line":"                node_types,","class":"lineCov","hits":"1","order":"147","possible_hits":"1",},
{"lineNum":"  361","line":"                node_types_mapping,","class":"lineCov","hits":"1","order":"148","possible_hits":"1",},
{"lineNum":"  362","line":"                node_types_reverse_mapping,","class":"lineCov","hits":"1","order":"149","possible_hits":"1",},
{"lineNum":"  363","line":"                edge_types,","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":"  364","line":"                edge_types_mapping,"},
{"lineNum":"  365","line":"                edge_types_reverse_mapping,","class":"lineCov","hits":"1","order":"231","possible_hits":"1",},
{"lineNum":"  366","line":"                weights,"},
{"lineNum":"  367","line":"                validate_input_data,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"            )","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  369","line":"        } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"            Graph::new_undirected(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"                sources,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"                destinations,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"                nodes_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"                nodes_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"                node_types,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"                node_types_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"                node_types_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"                edge_types,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"                edge_types_mapping,"},
{"lineNum":"  380","line":"                edge_types_reverse_mapping,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"                weights,"},
{"lineNum":"  382","line":"                validate_input_data,","class":"linePartCov","hits":"3","order":"232","possible_hits":"6",},
{"lineNum":"  383","line":"            )"},
{"lineNum":"  384","line":"        }"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "only_edge_file", "date" : "2020-06-20 18:18:05", "instrumented" : 214, "covered" : 106,};
var merged_data = [];
