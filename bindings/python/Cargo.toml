[package]
edition = "2018"
name = "ensmallen"
version = "0.7.0"
license = "MIT"
repository= "https://github.com/LucaCappelletti94/ensmallen"
authors = [
    "Luca Cappelletti <cappelletti.luca94@gmail.com>",
    "Tommaso Fontana <tommaso.fontana.96@gmail.com>"    
]
readme = "../../../README.rst"
description = "🍇 Ensmallen is the Rust/Python high-performance graph processing submodule of the GraPE library."
exclude = ["pytests/*", "Python-*", "./*.py"]
keywords = ["python", "rust", "graph", "random", "walk"]

[package.metadata.maturin]
requires-python = ">=3.7"
requires-dist = [
    "toml~=0.10.0",
    "downloaders>=1.0.15",
    "compress_json>=1.0.7",
    "userinput>=1.0.19",
    "cache_decorator>=2.1.11",
    "tqdm",
    "pandas",
    "py-cpuinfo",
    "environments_utils>=1.0.4"
]

[lib]
name = "ensmallen"
crate-type = ["cdylib"]

[dependencies.pyo3]
version = "0.16"
features = ["extension-module", "abi3", "abi3-py37", "macros", "multiple-pymethods"]

[dependencies]
env_logger = "0.8.1"
libc = "*"
regex = "1"
graph = { path = "../../graph" }
cpu_models = { path = "../../graph/cpu_models" }
mmap = { path = "../../graph/mmap" }
express_measures = { path = "../../graph/express_measures" }
tags = { path = "../../graph/tags" }
vec_rand = { git = "https://github.com/zommiommy/vec_rand", branch = "master" }
roaring = { git = "https://github.com/zommiommy/roaring-rs", branch = "master" }
numpy = {version="0.16.2", features = ["half"] }
rand = {version="0.7", features = ["small_rng"] }
strsim = "0.10.0"
markdown = "0.3"
rayon = "1.5.0"
indicatif = {version="0.16.0", features = ["rayon"]}
ctrlc = "3.1.7"
half = {path = "../python/half", features = ["use-intrinsics", "num-traits"]}

[profile.release]
debug = false             # Include debug info.
overflow-checks = true # Provides panic messages in case of overflows
# The opt-level setting controls the number of optimizations Rust will apply to 
# your code, with a range of 0 to 3. Applying more optimizations extends 
# compiling time, so if you’re in development and compiling your code often, 
# you’ll want faster compiling even if the resulting code runs slower. That is 
# the reason the default opt-level for dev is 0. When you’re ready to release 
# your code, it’s best to spend more time compiling. You’ll only compile in 
# release mode once, but you’ll run the compiled program many times, so release 
# mode trades longer compile time for code that runs faster. That is why the 
# default opt-level for the release profile is 3.
opt-level = 3

# This flag controls whether LLVM uses link time optimizations to produce better 
# optimized code, using whole-program analysis, at the cost of longer linking 
# time.
# Perform "fat" LTO which attempts to perform optimizations across all crates 
# within the dependency graph
lto = "fat"

# When a crate is split into multiple codegen units, LLVM is able to process 
# them in parallel. Increasing parallelism may speed up compile times, but may 
# also produce slower code. Setting this to 1 may improve the performance of 
# generated code, but may be slower to compile.
# The default value, if not specified, is 16 for non-incremental builds. For 
# incremental builds the default is 256 which allows caching to be more 
# granular.
# codgen-units=1

# This option lets you set the default threshold for inlining a function. 
# It takes an unsigned integer as a value. Inlining is based on a cost model, 
# where a higher threshold will allow more inlining.
# The default for opt-level=3 is 275.
#inline-threshold=1000000
