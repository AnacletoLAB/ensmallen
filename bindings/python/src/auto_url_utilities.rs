#[allow(unused_imports)]
use crate::types::EnsmallenGraph;
#[allow(unused_imports)]
use graph::{DumpGraph, Graph};
#[allow(unused_imports)]
use numpy::{PyArray, PyArray1, PyArray2};
#[allow(unused_imports)]
use pyo3::prelude::*;
#[allow(unused_imports)]
use pyo3::types::PyDict;
#[allow(unused_imports)]
use shared::*;
#[allow(unused_imports)]
use std::collections::{HashMap, HashSet};
#[allow(unused_imports)]
use tags::*;

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the OWL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_owl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_owl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Basic Formal Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_basic_formal_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_basic_formal_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the mouse genome informatics nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_genome_informatics_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_genome_informatics_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Pig QTL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_pig_qtl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_pig_qtl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Hugo Gene Name Consortium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_hugo_gene_name_consortium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_hugo_gene_name_consortium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mental Functioning Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mental_functioning_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mental_functioning_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the XSD nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_xsd_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_xsd_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Common Anatomy Reference Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_common_anatomy_reference_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_common_anatomy_reference_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Unified phenotype ontology (uPheno) nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_unified_phenotype_ontology_upheno_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_unified_phenotype_ontology_upheno_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Monarch Initiative Data nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_monarch_initiative_data_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_monarch_initiative_data_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mouse adult gross anatomy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_adult_gross_anatomy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_adult_gross_anatomy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the RGD Reference nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_rgd_reference_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_rgd_reference_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Coriell Collection nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_coriell_collection_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_coriell_collection_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Pubblications nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_pubblications_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_pubblications_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Biological Spatial Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_biological_spatial_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_biological_spatial_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the UCSC Golden Path nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ucsc_golden_path_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ucsc_golden_path_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Pathway ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_pathway_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_pathway_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the SCHEMA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_schema_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_schema_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the InterPro nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_interpro_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_interpro_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Sheep QTL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_sheep_qtl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_sheep_qtl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns URL from given STRING node name.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
///
/// Safety
/// ------
/// This method assumes that the provided node name is a {library_name} node name and
///  may cause a panic if the aforementioned assumption is not true.
pub unsafe fn format_string_url_from_node_name(node_name: &str) -> String {
    url_utilities::format_string_url_from_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Dublin Core Types nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dublin_core_types_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dublin_core_types_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the dictyBase Gene nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dictybase_gene_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dictybase_gene_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the ensembl nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ensembl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ensembl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the VOID nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_void_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_void_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Environment Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_environment_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_environment_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the EDAM Data nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_edam_data_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_edam_data_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Dictyostelium discoideum anatomy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dictyostelium_discoideum_anatomy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dictyostelium_discoideum_anatomy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI MESH nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_mesh_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_mesh_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCI Thesaurus OBO Edition nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_nci_thesaurus_obo_edition_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_nci_thesaurus_obo_edition_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Drosophila gross anatomy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_drosophila_gross_anatomy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_drosophila_gross_anatomy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the RDFS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_rdfs_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_rdfs_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mugen nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mugen_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mugen_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the FOODON nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_foodon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_foodon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the An ontology of core ecological entities nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_an_ontology_of_core_ecological_entities_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_an_ontology_of_core_ecological_entities_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the European Mouse Mutant Archive nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_european_mouse_mutant_archive_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_european_mouse_mutant_archive_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mouse Developmental Anatomy Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_developmental_anatomy_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_developmental_anatomy_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Rainbow-Trout QTL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_rainbow_trout_qtl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_rainbow_trout_qtl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mouse Phenome Database Strain nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_phenome_database_strain_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_phenome_database_strain_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the BRENDA tissue / enzyme source nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_brenda_tissue_enzyme_source_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_brenda_tissue_enzyme_source_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Human developmental anatomy, abstract nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_human_developmental_anatomy_abstract_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_human_developmental_anatomy_abstract_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mental Disease Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mental_disease_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mental_disease_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the wikidata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_wikidata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_wikidata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the CHEMBL Target nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_chembl_target_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_chembl_target_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Online Mendelian Inheritance in Animals nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_online_mendelian_inheritance_in_animals_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_online_mendelian_inheritance_in_animals_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Monarch Initiative nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_monarch_initiative_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_monarch_initiative_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Dublin Core Terms nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dublin_core_terms_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dublin_core_terms_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Dublin Core nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dublin_core_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dublin_core_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Vertebrate trait ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_vertebrate_trait_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_vertebrate_trait_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Drosophila development nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_drosophila_development_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_drosophila_development_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Zebrafish Phenotype Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_zebrafish_phenotype_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_zebrafish_phenotype_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Protein modification nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_protein_modification_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_protein_modification_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Chembl Compound nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_chembl_compound_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_chembl_compound_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the INTACT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_intact_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_intact_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Environmental conditions, treatments and exposures ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_environmental_conditions_treatments_and_exposures_ontology_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_environmental_conditions_treatments_and_exposures_ontology_node_name(
        node_name,
    )
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI Books nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_books_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_books_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Human Phenotype Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_human_phenotype_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_human_phenotype_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Coriell nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_coriell_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_coriell_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Swiss Protein nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_swiss_protein_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_swiss_protein_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Monarch Initiative Archive nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_monarch_initiative_archive_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_monarch_initiative_archive_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal QTL Traits nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_qtl_traits_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_qtl_traits_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the rat_genome_database nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_rat_genome_database_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_rat_genome_database_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the The Arabidopsis Information Resource Locus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_the_arabidopsis_information_resource_locus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_the_arabidopsis_information_resource_locus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the flybase nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_flybase_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_flybase_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Phenotype And Trait Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_phenotype_and_trait_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_phenotype_and_trait_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ontology for General Medical Science nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ontology_for_general_medical_science_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ontology_for_general_medical_science_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI Genes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_gene_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_gene_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Unified Medical Language System Semantic Group nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_unified_medical_language_system_semantic_group_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_unified_medical_language_system_semantic_group_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Dictybase Genes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_dictybase_genes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_dictybase_genes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Plant Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_plant_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_plant_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Human Developmental Stages nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_human_developmental_stages_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_human_developmental_stages_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the eagle-i resource ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_eaglei_resource_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_eaglei_resource_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Panther Database nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_panther_database_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_panther_database_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the PHARMGKB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_pharmgkb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_pharmgkb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Chromosome Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_chromosome_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_chromosome_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gene Ontology Reference nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gene_ontology_reference_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gene_ontology_reference_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the JAX nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_jax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_jax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the zfin nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_zfin_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_zfin_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Game Ontology Project nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_game_ontology_project_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_game_ontology_project_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gene Ontology Relations nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_website_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_website_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Reactome nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_reactome_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_reactome_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the FlyBase Controlled Vocabulary nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_flybase_controlled_vocabulary_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_flybase_controlled_vocabulary_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Zebrafish anatomy and development ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_zebrafish_anatomy_and_development_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_zebrafish_anatomy_and_development_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the sequence ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_sequence_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_sequence_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Chicken QTL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_chicken_qtl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_chicken_qtl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI clinvars nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_clinvar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_clinvar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Database SNP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_database_snp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_database_snp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gene Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gene_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gene_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the World Geodetic System nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_world_geodetic_system_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_world_geodetic_system_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mutant Mouse Resource & Research Center nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mmrrc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mmrrc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Therapeutic Target Database nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_therapeutic_target_database_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_therapeutic_target_database_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the RBRC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_rbrc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_rbrc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Translation of EMBL nucleotide sequence database nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_translation_of_embl_nucleotide_sequence_database_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_translation_of_embl_nucleotide_sequence_database_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Feature Annotation Location Description Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_feature_annotation_location_description_ontology_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_feature_annotation_location_description_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the KEGG Homo sapiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_kegg_homo_sapiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_kegg_homo_sapiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the C. elegans Gross Anatomy Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_c_elegans_gross_anatomy_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_c_elegans_gross_anatomy_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Yeast Genome Locus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_yeast_genome_locus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_yeast_genome_locus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Chemical Methods Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_chemical_methods_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_chemical_methods_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the POMBASE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_pombase_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_pombase_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Semantic Science nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_semantic_science_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_semantic_science_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Human Disease Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_human_disease_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_human_disease_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_type_name)"]
/// Returns url describing the given node type if a pattern is known.
///
/// Parameters
/// ----------
/// node_type_name: str,
///     Node name to query for.
///
///
/// Raises
/// -------
/// ValueError
///     If there is no known url source for the given node type.
///
pub fn get_node_type_source_url_from_node_type_name(node_type_name: &str) -> PyResult<String> {
    pe!(url_utilities::get_node_type_source_url_from_node_type_name(
        node_type_name
    ))
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(edge_type_name)"]
/// Returns url describing the given edge type if a pattern is known.
///
/// Parameters
/// ----------
/// edge_type_name: str,
///     edge name to query for.
///
///
/// Raises
/// -------
/// ValueError
///     If there is no known url source for the given edge type.
///
pub fn get_edge_type_source_url_from_edge_type_name(edge_type_name: &str) -> PyResult<String> {
    pe!(url_utilities::get_edge_type_source_url_from_edge_type_name(
        edge_type_name
    ))
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_type_name)"]
/// Returns html-formatted source of given node type name if known.
///
/// Parameters
/// ----------
/// node_type_name: str,
///     Node name to query for.
///
pub fn get_node_type_source_html_url_from_node_type_name(node_type_name: &str) -> String {
    url_utilities::get_node_type_source_html_url_from_node_type_name(node_type_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(edge_type_name)"]
/// Returns html-formatted source of given edge type name if known.
///
/// Parameters
/// ----------
/// edge_type_name: str,
///     edge name to query for.
///
pub fn get_edge_type_source_html_url_from_edge_type_name(edge_type_name: &str) -> String {
    url_utilities::get_edge_type_source_html_url_from_edge_type_name(edge_type_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Arabidopsis Tair nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_arabidopsis_tair_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_arabidopsis_tair_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the UNIPROT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_uniprotkb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_uniprotkb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Livestock Product Trait nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_livestock_product_trait_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_livestock_product_trait_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the ORPHA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_orpha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_orpha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mammalian Phenotype Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mammalian_phenotype_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mammalian_phenotype_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mouse pathology ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_pathology_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_pathology_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Aspergillus Genomic Data Reference nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_aspergillus_genomic_data_reference_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_aspergillus_genomic_data_reference_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the WormBase nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_wormbase_gene_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_wormbase_gene_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Pubmed NCBI nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_pubmed_ncbi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_pubmed_ncbi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the KEGG-KO nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_kegg_ko_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_kegg_ko_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gene Ontology Relations nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gene_ontology_relations_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gene_ontology_relations_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the GDC Project nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gdc_project_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gdc_project_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the EcoGene nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ecogene_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ecogene_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ontology of Adverse Events nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ontology_of_adverse_events_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ontology_of_adverse_events_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gene Ontology OBO in OWL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gene_ontology_obo_in_owl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gene_ontology_obo_in_owl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI Clinical Variants Submitters nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_clinical_variants_submitters_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_clinical_variants_submitters_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Infectious Disease Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_infectious_disease_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_infectious_disease_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Exposure ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_exposure_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_exposure_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Fungal gross anatomy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_fungal_gross_anatomy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_fungal_gross_anatomy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Unified Medical Language System Semantic Type nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_unified_medical_language_system_semantic_type_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_unified_medical_language_system_semantic_type_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the RDF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_rdf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_rdf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ascomycete phenotype ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ascomycete_phenotype_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ascomycete_phenotype_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the DrugBank nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_drugbank_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_drugbank_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the drugcentral nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_drugcentral_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_drugcentral_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Quantity, Unit, Dimension and Type nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_quantity_unit_dimension_and_type_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_quantity_unit_dimension_and_type_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Yeast Genome Reference nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_yeast_genome_reference_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_yeast_genome_reference_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Semantic MEDLINE Database nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_semantic_medline_database_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_semantic_medline_database_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Animal Genome Horse QTL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_animal_genome_horse_qtl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_animal_genome_horse_qtl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Complex Portal nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_complex_portal_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_complex_portal_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI Gene Expression Omnibus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_gene_expression_omnibus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_gene_expression_omnibus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Scientific Evidence and Provenance Information Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_scientific_evidence_and_provenance_information_ontology_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_scientific_evidence_and_provenance_information_ontology_node_name(
        node_name,
    )
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Foundational Model of Anatomy Ontology (subset) nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_foundational_model_of_anatomy_ontology_subset_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_foundational_model_of_anatomy_ontology_subset_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Coriell Family nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_coriell_family_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_coriell_family_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the XENBASE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_xenbase_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_xenbase_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the SNP Individual nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_snp_individual_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_snp_individual_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the omim nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_omim_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_omim_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Open Biomedical Association nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_open_biomedical_association_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_open_biomedical_association_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Evidence ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_evidence_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_evidence_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCIMR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncimr_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncimr_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the WormBase nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_wormbase_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_wormbase_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the OMIM Phenotypic Series nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_omim_phenotypic_series_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_omim_phenotypic_series_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Apergillus Genome Data nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_apergillus_genome_data_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_apergillus_genome_data_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Experimental condition ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_experimental_condition_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_experimental_condition_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Uberon Core nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_uberon_core_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_uberon_core_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mouse Phenome Database Assay nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mouse_phenome_database_assay_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mouse_phenome_database_assay_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the The Statistical Methods Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_the_statistical_methods_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_the_statistical_methods_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Confidence Information Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_confidence_information_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_confidence_information_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Mondo Disease Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_mondo_disease_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_mondo_disease_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Zebrafish developmental stages ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_zebrafish_developmental_stages_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_zebrafish_developmental_stages_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI dbGaP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_dbgap_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_dbgap_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the CORD Pubmed Central nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_cord_pubmed_central_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_cord_pubmed_central_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Jackson Lab Reference nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_jackson_lab_reference_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_jackson_lab_reference_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ontology for Biomedical Investigations nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ontology_for_biomedical_investigations_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ontology_for_biomedical_investigations_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Genotype Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_genotype_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_genotype_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Uberon multi-species anatomy ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_uberon_multispecies_anatomy_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_uberon_multispecies_anatomy_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Provenance, Authoring and Versioning nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_provenance_authoring_and_versioning_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_provenance_authoring_and_versioning_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Information Artifact Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_information_artifact_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_information_artifact_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the C. elegans phenotype nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_c_elegans_phenotype_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_c_elegans_phenotype_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Cell Line Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_cell_line_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_cell_line_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the BioLink nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_biolink_from_object(node_name: &str) -> bool {
    url_utilities::is_valid_biolink_from_object(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Units of measurement ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_units_of_measurement_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_units_of_measurement_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Cell Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_cell_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_cell_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Variation Representation Specification nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_variation_representation_specification_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_variation_representation_specification_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Vertebrate Gene Names Consortium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_vertebrate_gene_names_consortium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_vertebrate_gene_names_consortium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Clinical measurement ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_clinical_measurement_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_clinical_measurement_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Unified Medical Language System nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_unified_medical_language_system_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_unified_medical_language_system_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Unified Medical Language System Semantic Code nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_unified_medical_language_system_semantic_code_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_unified_medical_language_system_semantic_code_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI taxonomy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_taxonomy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_taxonomy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Population and Community Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_population_and_community_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_population_and_community_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the KEGG Disease nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_kegg_disease_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_kegg_disease_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ontology for Parasite LifeCycle nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ontology_for_parasite_lifecycle_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ontology_for_parasite_lifecycle_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Experimental Factor Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_experimental_factor_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_experimental_factor_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the PRotein Ontology (PRO) nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_protein_ontology_pro_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_protein_ontology_pro_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the NCBI Protein nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ncbi_protein_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ncbi_protein_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the biogrid nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_biogrid_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_biogrid_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the KEGG Path nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_kegg_path_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_kegg_path_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the doi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_doi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_doi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the GDC Annotation nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gdc_annotation_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gdc_annotation_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the chebi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_chebi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_chebi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Ontology of Biological Attributes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_ontology_of_biological_attributes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_ontology_of_biological_attributes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Gazetteer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_gazetteer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_gazetteer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Open Biomedical Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_open_biomedical_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_open_biomedical_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas aeruginosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_aeruginosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_aeruginosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia cepacia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_cepacia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_cepacia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas oleovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_oleovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_oleovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas campestris campestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_campestris_campestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_campestris_campestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium rhizogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_rhizogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_rhizogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium fredii NGR234 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_fredii_ngr234_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_fredii_ngr234_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter baumannii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_baumannii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_baumannii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcaligenes faecalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcaligenes_faecalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcaligenes_faecalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea agglomerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_agglomerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_agglomerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Klebsiella oxytoca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_klebsiella_oxytoca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_klebsiella_oxytoca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Klebsiella pneumoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_klebsiella_pneumoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_klebsiella_pneumoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteus vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteus_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteus_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia pseudotuberculosis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_pseudotuberculosis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_pseudotuberculosis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio vulnificus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_vulnificus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_vulnificus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pasteurella multocida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pasteurella_multocida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pasteurella_multocida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pasteurella pneumotropica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pasteurella_pneumotropica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pasteurella_pneumotropica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia trachomatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_trachomatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_trachomatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter ureolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_ureolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_ureolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio vulgaris Hildenborough nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_vulgaris_hildenborough_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_vulgaris_hildenborough_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio vulgaris Miyazaki nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_vulgaris_miyazaki_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_vulgaris_miyazaki_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium hydatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_hydatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_hydatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter longus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_longus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_longus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus elongatus PCC7942 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_elongatus_pcc7942_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_elongatus_pcc7942_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechocystis sp. PCC6714 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechocystis_sp_pcc6714_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechocystis_sp_pcc6714_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechocystis sp. PCC6803 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechocystis_sp_pcc6803_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechocystis_sp_pcc6803_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc lactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_lactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_lactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dermacoccus nishinomiyaensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dermacoccus_nishinomiyaensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dermacoccus_nishinomiyaensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus aureus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_aureus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_aureus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus xylosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_xylosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_xylosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pyogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pyogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pyogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus iniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_iniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_iniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus cereus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_cereus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_cereus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus mycoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_mycoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_mycoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. ATCC29733 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_atcc29733_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_atcc29733_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sticklandii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sticklandii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sticklandii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus animalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_animalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_animalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium adolescentis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_adolescentis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_adolescentis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium coryneforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_coryneforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_coryneforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium cuniculi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_cuniculi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_cuniculi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium pseudolongum globosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_pseudolongum_globosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_pseudolongum_globosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium magnum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_magnum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_magnum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium minimum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_minimum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_minimum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oerskovia turbata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oerskovia_turbata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oerskovia_turbata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium pseudotuberculosis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_pseudotuberculosis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_pseudotuberculosis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus fascians nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_fascians_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_fascians_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes utahensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_utahensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_utahensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces aureofaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_aureofaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_aureofaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces bikiniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_bikiniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_bikiniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces fradiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_fradiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_fradiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces glaucescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_glaucescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_glaucescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces halstedii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_halstedii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_halstedii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sclerotialus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sclerotialus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sclerotialus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces virginiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_virginiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_virginiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces cellulosae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_cellulosae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_cellulosae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microtetraspora glauca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microtetraspora_glauca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microtetraspora_glauca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptosporangium amethystogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptosporangium_amethystogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptosporangium_amethystogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pimelobacter simplex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pimelobacter_simplex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pimelobacter_simplex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudonocardia autotrophica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudonocardia_autotrophica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudonocardia_autotrophica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma agalactiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_agalactiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_agalactiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma californicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_californicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_californicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacter kivui nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacter_kivui_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacter_kivui_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solemya velum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solemya_velum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solemya_velum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sodalis pierantonius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sodalis_pierantonius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sodalis_pierantonius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fervidobacterium islandicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fervidobacterium_islandicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fervidobacterium_islandicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrus sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrus_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrus_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synergistes jonesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synergistes_jonesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synergistes_jonesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaeodactylum tricornutum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaeodactylum_tricornutum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaeodactylum_tricornutum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ectocarpus siliculosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ectocarpus_siliculosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ectocarpus_siliculosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Emiliania huxleyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_emiliania_huxleyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_emiliania_huxleyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydomonas reinhardtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydomonas_reinhardtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydomonas_reinhardtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Volvox carteri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_volvox_carteri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_volvox_carteri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Auxenochlorella protothecoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_auxenochlorella_protothecoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_auxenochlorella_protothecoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Physcomitrella patens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_physcomitrella_patens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_physcomitrella_patens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Theobroma cacao nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_theobroma_cacao_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_theobroma_cacao_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carica papaya nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carica_papaya_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carica_papaya_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cucumis melo nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cucumis_melo_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cucumis_melo_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cucumis sativus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cucumis_sativus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cucumis_sativus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Populus trichocarpa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_populus_trichocarpa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_populus_trichocarpa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arabidopsis thaliana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arabidopsis_thaliana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arabidopsis_thaliana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brassica rapa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brassica_rapa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brassica_rapa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brassica oleracea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brassica_oleracea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brassica_oleracea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Malus domestica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_malus_domestica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_malus_domestica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prunus persica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prunus_persica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prunus_persica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cicer arietinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cicer_arietinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cicer_arietinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glycine max nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glycine_max_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glycine_max_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Medicago truncatula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_medicago_truncatula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_medicago_truncatula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaseolus vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaseolus_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaseolus_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Manihot esculenta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_manihot_esculenta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_manihot_esculenta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ricinus communis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ricinus_communis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ricinus_communis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Linum usitatissimum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_linum_usitatissimum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_linum_usitatissimum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solanum lycopersicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solanum_lycopersicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solanum_lycopersicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nicotiana sylvestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nicotiana_sylvestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nicotiana_sylvestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nicotiana tomentosiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nicotiana_tomentosiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nicotiana_tomentosiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solanum tuberosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solanum_tuberosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solanum_tuberosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythranthe guttata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythranthe_guttata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythranthe_guttata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nelumbo nucifera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nelumbo_nucifera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nelumbo_nucifera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hordeum vulgare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hordeum_vulgare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hordeum_vulgare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza rufipogon nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_rufipogon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_rufipogon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza sativa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_sativa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_sativa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza brachyantha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_brachyantha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_brachyantha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza nivara nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_nivara_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_nivara_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza punctata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_punctata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_punctata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza glaberrima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_glaberrima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_glaberrima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Setaria italica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_setaria_italica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_setaria_italica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sorghum bicolor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sorghum_bicolor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sorghum_bicolor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Triticum aestivum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_triticum_aestivum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_triticum_aestivum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Triticum urartu nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_triticum_urartu_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_triticum_urartu_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zea mays nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zea_mays_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zea_mays_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Musa acuminata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_musa_acuminata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_musa_acuminata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytophthora infestans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytophthora_infestans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytophthora_infestans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytophthora parasitica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytophthora_parasitica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytophthora_parasitica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schizosaccharomyces pombe nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schizosaccharomyces_pombe_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schizosaccharomyces_pombe_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schizosaccharomyces japonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schizosaccharomyces_japonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schizosaccharomyces_japonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schizosaccharomyces octosporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schizosaccharomyces_octosporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schizosaccharomyces_octosporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pichia kudriavzevii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pichia_kudriavzevii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pichia_kudriavzevii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Millerozyma farinosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_millerozyma_farinosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_millerozyma_farinosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Komagataella pastoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_komagataella_pastoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_komagataella_pastoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Scheffersomyces stipitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_scheffersomyces_stipitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_scheffersomyces_stipitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meyerozyma guilliermondii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meyerozyma_guilliermondii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meyerozyma_guilliermondii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomyces cerevisiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomyces_cerevisiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomyces_cerevisiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Torulaspora delbrueckii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_torulaspora_delbrueckii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_torulaspora_delbrueckii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yarrowia lipolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yarrowia_lipolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yarrowia_lipolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zygosaccharomyces rouxii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zygosaccharomyces_rouxii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zygosaccharomyces_rouxii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Debaryomyces hansenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_debaryomyces_hansenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_debaryomyces_hansenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Taphrina deformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_taphrina_deformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_taphrina_deformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bipolaris maydis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bipolaris_maydis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bipolaris_maydis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bipolaris zeicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bipolaris_zeicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bipolaris_zeicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptosphaeria maculans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptosphaeria_maculans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptosphaeria_maculans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Histoplasma capsulatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_histoplasma_capsulatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_histoplasma_capsulatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastomyces dermatitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastomyces_dermatitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastomyces_dermatitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus clavatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_clavatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_clavatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus flavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_flavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_flavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus niger nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_niger_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_niger_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Claviceps purpurea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_claviceps_purpurea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_claviceps_purpurea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusarium fujikuroi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusarium_fujikuroi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusarium_fujikuroi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neurospora crassa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neurospora_crassa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neurospora_crassa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Podospora anserina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_podospora_anserina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_podospora_anserina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sordaria macrospora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sordaria_macrospora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sordaria_macrospora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sclerotinia sclerotiorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sclerotinia_sclerotiorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sclerotinia_sclerotiorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cryptococcus neoformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cryptococcus_neoformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cryptococcus_neoformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tremella mesenterica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tremella_mesenterica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tremella_mesenterica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ustilago maydis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ustilago_maydis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ustilago_maydis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodosporidium toruloides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodosporidium_toruloides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodosporidium_toruloides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Puccinia graminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_puccinia_graminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_puccinia_graminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schizophyllum commune nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schizophyllum_commune_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schizophyllum_commune_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agaricus bisporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agaricus_bisporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agaricus_bisporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprinopsis cinerea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprinopsis_cinerea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprinopsis_cinerea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum orbiculare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_orbiculare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_orbiculare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida albicans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_albicans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_albicans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida glabrata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_glabrata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_glabrata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida maltosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_maltosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_maltosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida parapsilosis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_parapsilosis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_parapsilosis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida tropicalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_tropicalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_tropicalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coccidioides immitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coccidioides_immitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coccidioides_immitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusarium oxysporum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusarium_oxysporum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusarium_oxysporum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusarium graminearum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusarium_graminearum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusarium_graminearum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichophyton rubrum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichophyton_rubrum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichophyton_rubrum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leishmania major nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leishmania_major_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leishmania_major_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leishmania infantum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leishmania_infantum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leishmania_infantum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leishmania panamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leishmania_panamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leishmania_panamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trypanosoma brucei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trypanosoma_brucei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trypanosoma_brucei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trypanosoma cruzi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trypanosoma_cruzi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trypanosoma_cruzi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichomonas vaginalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichomonas_vaginalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichomonas_vaginalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Giardia intestinalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_giardia_intestinalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_giardia_intestinalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Entamoeba histolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_entamoeba_histolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_entamoeba_histolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Naegleria gruberi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_naegleria_gruberi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_naegleria_gruberi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dictyostelium purpureum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dictyostelium_purpureum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dictyostelium_purpureum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cryptosporidium muris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cryptosporidium_muris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cryptosporidium_muris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Toxoplasma gondii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_toxoplasma_gondii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_toxoplasma_gondii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium berghei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_berghei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_berghei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium chabaudi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_chabaudi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_chabaudi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium cynomolgi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_cynomolgi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_cynomolgi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium falciparum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_falciparum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_falciparum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium knowlesi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_knowlesi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_knowlesi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium vivax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_vivax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_vivax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plasmodium vinckei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plasmodium_vinckei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plasmodium_vinckei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Babesia bovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_babesia_bovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_babesia_bovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Babesia equi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_babesia_equi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_babesia_equi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Theileria annulata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_theileria_annulata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_theileria_annulata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Theileria parva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_theileria_parva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_theileria_parva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paramecium tetraurelia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paramecium_tetraurelia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paramecium_tetraurelia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetrahymena thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetrahymena_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetrahymena_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ichthyophthirius multifiliis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ichthyophthirius_multifiliis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ichthyophthirius_multifiliis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exophiala dermatitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exophiala_dermatitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exophiala_dermatitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hydra vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hydra_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hydra_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schistosoma mansoni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schistosoma_mansoni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schistosoma_mansoni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Echinococcus multilocularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_echinococcus_multilocularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_echinococcus_multilocularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis briggsae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_briggsae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_briggsae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis elegans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_elegans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_elegans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bursaphelenchus xylophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bursaphelenchus_xylophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bursaphelenchus_xylophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichinella spiralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichinella_spiralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichinella_spiralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helobdella robusta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helobdella_robusta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helobdella_robusta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aplysia californica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aplysia_californica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aplysia_californica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Daphnia pulex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_daphnia_pulex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_daphnia_pulex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acyrthosiphon pisum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acyrthosiphon_pisum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acyrthosiphon_pisum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tribolium castaneum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tribolium_castaneum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tribolium_castaneum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bombyx mori nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bombyx_mori_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bombyx_mori_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aedes aegypti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aedes_aegypti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aedes_aegypti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anopheles gambiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anopheles_gambiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anopheles_gambiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Culex quinquefasciatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_culex_quinquefasciatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_culex_quinquefasciatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Loa loa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_loa_loa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_loa_loa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ceratitis capitata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ceratitis_capitata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ceratitis_capitata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila ananassae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_ananassae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_ananassae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila erecta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_erecta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_erecta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila grimshawi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_grimshawi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_grimshawi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila melanogaster nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_melanogaster_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_melanogaster_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila mojavensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_mojavensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_mojavensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila persimilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_persimilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_persimilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila pseudoobscura nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_pseudoobscura_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_pseudoobscura_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila virilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_virilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_virilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila yakuba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_yakuba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_yakuba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Drosophila willistoni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_drosophila_willistoni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_drosophila_willistoni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Musca domestica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_musca_domestica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_musca_domestica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nasonia vitripennis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nasonia_vitripennis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nasonia_vitripennis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Apis mellifera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_apis_mellifera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_apis_mellifera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Strongylocentrotus purpuratus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_strongylocentrotus_purpuratus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_strongylocentrotus_purpuratus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ciona intestinalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ciona_intestinalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ciona_intestinalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Branchiostoma floridae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_branchiostoma_floridae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_branchiostoma_floridae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Latimeria chalumnae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_latimeria_chalumnae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_latimeria_chalumnae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lepisosteus oculatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lepisosteus_oculatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lepisosteus_oculatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Danio rerio nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_danio_rerio_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_danio_rerio_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Astyanax mexicanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_astyanax_mexicanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_astyanax_mexicanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Esox lucius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_esox_lucius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_esox_lucius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gadus morhua nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gadus_morhua_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gadus_morhua_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Poecilia reticulata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_poecilia_reticulata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_poecilia_reticulata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xiphophorus maculatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xiphophorus_maculatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xiphophorus_maculatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryzias latipes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryzias_latipes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryzias_latipes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oreochromis niloticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oreochromis_niloticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oreochromis_niloticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haplochromis burtoni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haplochromis_burtoni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haplochromis_burtoni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xenopus tropicalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xenopus_tropicalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xenopus_tropicalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chelonia mydas nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chelonia_mydas_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chelonia_mydas_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chrysemys picta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chrysemys_picta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chrysemys_picta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alligator mississippiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alligator_mississippiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alligator_mississippiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Columba livia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_columba_livia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_columba_livia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gallus gallus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gallus_gallus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gallus_gallus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ornithorhynchus anatinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ornithorhynchus_anatinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ornithorhynchus_anatinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sarcophilus harrisii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sarcophilus_harrisii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sarcophilus_harrisii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Macropus eugenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_macropus_eugenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_macropus_eugenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dasypus novemcinctus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dasypus_novemcinctus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dasypus_novemcinctus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erinaceus europaeus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erinaceus_europaeus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erinaceus_europaeus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Echinops telfairi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_echinops_telfairi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_echinops_telfairi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pteropus alecto nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pteropus_alecto_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pteropus_alecto_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tarsius syrichta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tarsius_syrichta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tarsius_syrichta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Callithrix jacchus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_callithrix_jacchus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_callithrix_jacchus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Macaca fascicularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_macaca_fascicularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_macaca_fascicularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Macaca mulatta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_macaca_mulatta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_macaca_mulatta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Papio anubis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_papio_anubis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_papio_anubis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gorilla gorilla nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gorilla_gorilla_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gorilla_gorilla_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pan paniscus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pan_paniscus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pan_paniscus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pan troglodytes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pan_troglodytes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pan_troglodytes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pongo abelii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pongo_abelii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pongo_abelii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Homo sapiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_homo_sapiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_homo_sapiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Canis lupus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_canis_lupus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_canis_lupus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ailuropoda melanoleuca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ailuropoda_melanoleuca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ailuropoda_melanoleuca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mustela putorius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mustela_putorius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mustela_putorius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Felis catus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_felis_catus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_felis_catus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Panthera tigris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_panthera_tigris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_panthera_tigris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Odobenus rosmarus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_odobenus_rosmarus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_odobenus_rosmarus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptonychotes weddellii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptonychotes_weddellii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptonychotes_weddellii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Orcinus orca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_orcinus_orca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_orcinus_orca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tursiops truncatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tursiops_truncatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tursiops_truncatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Balaenoptera acutorostrata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_balaenoptera_acutorostrata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_balaenoptera_acutorostrata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichechus manatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichechus_manatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichechus_manatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Loxodonta africana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_loxodonta_africana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_loxodonta_africana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Orycteropus afer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_orycteropus_afer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_orycteropus_afer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sus scrofa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sus_scrofa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sus_scrofa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bos taurus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bos_taurus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bos_taurus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ovis aries nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ovis_aries_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ovis_aries_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ochotona princeps nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ochotona_princeps_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ochotona_princeps_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryctolagus cuniculus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryctolagus_cuniculus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryctolagus_cuniculus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cricetulus griseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cricetulus_griseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cricetulus_griseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesocricetus auratus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesocricetus_auratus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesocricetus_auratus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peromyscus maniculatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peromyscus_maniculatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peromyscus_maniculatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mus musculus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mus_musculus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mus_musculus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rattus norvegicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rattus_norvegicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rattus_norvegicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cavia porcellus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cavia_porcellus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cavia_porcellus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Octodon degus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_octodon_degus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_octodon_degus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Heterocephalus glaber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_heterocephalus_glaber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_heterocephalus_glaber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccoglossus kowalevskii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccoglossus_kowalevskii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccoglossus_kowalevskii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichoplax adhaerens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichoplax_adhaerens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichoplax_adhaerens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atta cephalotes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atta_cephalotes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atta_cephalotes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dactylococcopsis salina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dactylococcopsis_salina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dactylococcopsis_salina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Danaus plexippus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_danaus_plexippus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_danaus_plexippus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodnius prolixus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodnius_prolixus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodnius_prolixus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amborella trichopoda nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amborella_trichopoda_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amborella_trichopoda_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobotrys oligospora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobotrys_oligospora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobotrys_oligospora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Monodelphis domestica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_monodelphis_domestica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_monodelphis_domestica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parastagonospora nodorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parastagonospora_nodorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parastagonospora_nodorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas paucimobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_paucimobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_paucimobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium yanoikuyae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_yanoikuyae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_yanoikuyae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelodiscus sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelodiscus_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelodiscus_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachypodium distachyon nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachypodium_distachyon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachypodium_distachyon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Naumovozyma castellii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_naumovozyma_castellii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_naumovozyma_castellii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Naumovozyma dairenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_naumovozyma_dairenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_naumovozyma_dairenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verticillium dahliae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verticillium_dahliae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verticillium_dahliae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saimiri boliviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saimiri_boliviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saimiri_boliviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mnemiopsis leidyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mnemiopsis_leidyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mnemiopsis_leidyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharopolyspora rectivirgula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharopolyspora_rectivirgula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharopolyspora_rectivirgula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nostoc sp. PCC7524 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nostoc_sp_pcc7524_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nostoc_sp_pcc7524_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas macacae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_macacae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_macacae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia kristensenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_kristensenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_kristensenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photodesmus katoptron nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photodesmus_katoptron_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photodesmus_katoptron_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colwellia psychrerythraea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colwellia_psychrerythraea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colwellia_psychrerythraea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cobetia marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cobetia_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cobetia_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anolis carolinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anolis_carolinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anolis_carolinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbidospora cretacea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbidospora_cretacea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbidospora_cretacea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tarenaya hassleriana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tarenaya_hassleriana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tarenaya_hassleriana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Talaromyces stipitatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_talaromyces_stipitatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_talaromyces_stipitatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Allomyces macrogynus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_allomyces_macrogynus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_allomyces_macrogynus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Elephantulus edwardii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_elephantulus_edwardii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_elephantulus_edwardii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kluyveromyces lactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kluyveromyces_lactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kluyveromyces_lactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ursus maritimus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ursus_maritimus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ursus_maritimus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eptesicus fuscus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eptesicus_fuscus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eptesicus_fuscus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neospora caninum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neospora_caninum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neospora_caninum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseoluteus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseoluteus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseoluteus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia ruckeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_ruckeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_ruckeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio navarrensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_navarrensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_navarrensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrialba asiatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrialba_asiatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrialba_asiatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janthinobacterium lividum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janthinobacterium_lividum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janthinobacterium_lividum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gossypium raimondii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gossypium_raimondii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gossypium_raimondii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vitis vinifera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vitis_vinifera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vitis_vinifera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gaeumannomyces graminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gaeumannomyces_graminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gaeumannomyces_graminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichoderma virens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichoderma_virens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichoderma_virens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporothrix schenckii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporothrix_schenckii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporothrix_schenckii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Otolemur garnettii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_otolemur_garnettii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_otolemur_garnettii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Takifugu rubripes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_takifugu_rubripes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_takifugu_rubripes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis remanei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_remanei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_remanei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum graminicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_graminicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_graminicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium pseudolongum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_pseudolongum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_pseudolongum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clavibacter michiganensis sepedonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clavibacter_michiganensis_sepedonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clavibacter_michiganensis_sepedonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter sputorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_sputorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_sputorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri ATCC14405 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_atcc14405_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_atcc14405_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. PCC7002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_pcc7002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_pcc7002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 7803 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_7803_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_7803_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Calothrix sp. PCC7103 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_calothrix_sp_pcc7103_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_calothrix_sp_pcc7103_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetranychus urticae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetranychus_urticae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetranychus_urticae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neolamprologus brichardi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neolamprologus_brichardi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neolamprologus_brichardi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blautia producta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blautia_producta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blautia_producta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eremothecium gossypii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eremothecium_gossypii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eremothecium_gossypii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus terreus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_terreus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_terreus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Uncinocarpus reesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_uncinocarpus_reesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_uncinocarpus_reesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catenuloplanes japonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catenuloplanes_japonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catenuloplanes_japonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces galbus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_galbus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_galbus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium thermophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_thermophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_thermophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus versutus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_versutus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_versutus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mixia osmundae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mixia_osmundae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mixia_osmundae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blumeria graminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blumeria_graminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blumeria_graminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Strongyloides ratti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_strongyloides_ratti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_strongyloides_ratti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Heliconius melpomene nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_heliconius_melpomene_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_heliconius_melpomene_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chinchilla lanigera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chinchilla_lanigera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chinchilla_lanigera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassiosira pseudonana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassiosira_pseudonana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassiosira_pseudonana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter amalonaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_amalonaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_amalonaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thielavia terrestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thielavia_terrestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thielavia_terrestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Macrophomina phaseolina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_macrophomina_phaseolina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_macrophomina_phaseolina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dactylosporangium aurantiacum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dactylosporangium_aurantiacum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dactylosporangium_aurantiacum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium choerinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_choerinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_choerinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus thermoamylovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_thermoamylovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_thermoamylovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vanderwaltozyma polyspora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vanderwaltozyma_polyspora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vanderwaltozyma_polyspora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mucor circinelloides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mucor_circinelloides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mucor_circinelloides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pythium irregulare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pythium_irregulare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pythium_irregulare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neosartorya fischeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neosartorya_fischeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neosartorya_fischeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Penicillium digitatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_penicillium_digitatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_penicillium_digitatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium abscessus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_abscessus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_abscessus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wigglesworthia glossinidia sp. Gbr nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wigglesworthia_glossinidia_sp_gbr_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wigglesworthia_glossinidia_sp_gbr_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas cangingivalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_cangingivalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_cangingivalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas canoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_canoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_canoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lodderomyces elongisporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lodderomyces_elongisporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lodderomyces_elongisporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium algidicarnis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_algidicarnis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_algidicarnis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aegilops tauschii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aegilops_tauschii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aegilops_tauschii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma mali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_mali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_mali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Talaromyces marneffei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_talaromyces_marneffei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_talaromyces_marneffei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus opacus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_opacus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_opacus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chaetomium globosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chaetomium_globosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chaetomium_globosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alligator sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alligator_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alligator_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Panicum virgatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_panicum_virgatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_panicum_virgatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonas pusilla nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonas_pusilla_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonas_pusilla_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tuber melanosporum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tuber_melanosporum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tuber_melanosporum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus equi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_equi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_equi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neurospora tetrasperma nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neurospora_tetrasperma_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neurospora_tetrasperma_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza glumipatula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_glumipatula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_glumipatula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza meridionalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_meridionalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_meridionalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter junii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_junii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_junii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. CIPA165 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_cipa165_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_cipa165_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus kawachii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_kawachii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_kawachii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fomitopsis pinicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fomitopsis_pinicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fomitopsis_pinicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stereum hirsutum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stereum_hirsutum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stereum_hirsutum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Botrytis cinerea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_botrytis_cinerea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_botrytis_cinerea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lentzea albidocapillata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lentzea_albidocapillata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lentzea_albidocapillata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. PCC8801 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_pcc8801_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_pcc8801_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bathycoccus prasinos nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bathycoccus_prasinos_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bathycoccus_prasinos_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pneumocystis jirovecii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pneumocystis_jirovecii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pneumocystis_jirovecii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pythium vexans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pythium_vexans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pythium_vexans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sorex araneus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sorex_araneus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sorex_araneus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubrobacter radiotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubrobacter_radiotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubrobacter_radiotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phoenix dactylifera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phoenix_dactylifera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phoenix_dactylifera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida dubliniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_dubliniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_dubliniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas salina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_salina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_salina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anopheles darlingi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anopheles_darlingi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anopheles_darlingi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ictidomys tridecemlineatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ictidomys_tridecemlineatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ictidomys_tridecemlineatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capronia epimyces nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capronia_epimyces_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capronia_epimyces_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capronia coronata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capronia_coronata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capronia_coronata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prauserella rugosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prauserella_rugosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prauserella_rugosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces wedmorensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_wedmorensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_wedmorensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. ATCC51142 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_atcc51142_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_atcc51142_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aureococcus anophagefferens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aureococcus_anophagefferens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aureococcus_anophagefferens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces megasporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_megasporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_megasporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus durus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_durus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_durus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium avium avium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_avium_avium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_avium_avium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dictyostelium discoideum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dictyostelium_discoideum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dictyostelium_discoideum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bipolaris sorokiniana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bipolaris_sorokiniana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bipolaris_sorokiniana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrenophora triticirepentis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrenophora_triticirepentis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrenophora_triticirepentis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanidioschyzon merolae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanidioschyzon_merolae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanidioschyzon_merolae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eremothecium cymbalariae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eremothecium_cymbalariae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eremothecium_cymbalariae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nematostella vectensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nematostella_vectensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nematostella_vectensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma conjunctivae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_conjunctivae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_conjunctivae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida tenuis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_tenuis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_tenuis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anabaena sp. 90 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anabaena_sp_90_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anabaena_sp_90_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella hellenica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_hellenica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_hellenica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium chlorophenolicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_chlorophenolicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_chlorophenolicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Entamoeba dispar nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_entamoeba_dispar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_entamoeba_dispar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces olivaceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_olivaceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_olivaceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces lydicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_lydicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_lydicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium triplex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_triplex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_triplex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Poecilia formosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_poecilia_formosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_poecilia_formosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arabis alpina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arabis_alpina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arabis_alpina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter trogontum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_trogontum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_trogontum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jaculus jaculus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jaculus_jaculus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jaculus_jaculus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichoderma reesei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichoderma_reesei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichoderma_reesei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ciona savignyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ciona_savignyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ciona_savignyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. EE36 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_ee36_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_ee36_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haliaeetus leucocephalus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haliaeetus_leucocephalus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haliaeetus_leucocephalus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrenophora teres nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrenophora_teres_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrenophora_teres_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium betavasculorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_betavasculorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_betavasculorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Guillardia theta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_guillardia_theta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_guillardia_theta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio anguillarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_anguillarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_anguillarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces toyocaensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_toyocaensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_toyocaensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cylindrospermum stagnale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cylindrospermum_stagnale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cylindrospermum_stagnale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillatoria acuminata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillatoria_acuminata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillatoria_acuminata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophus aciditrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophus_aciditrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophus_aciditrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fragaria vesca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fragaria_vesca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fragaria_vesca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirillospora albida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirillospora_albida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirillospora_albida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces celluloflavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_celluloflavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_celluloflavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsiella grylli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsiella_grylli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsiella_grylli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fibrobacter succinogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fibrobacter_succinogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fibrobacter_succinogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myotis lucifugus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myotis_lucifugus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myotis_lucifugus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantholops hodgsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantholops_hodgsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantholops_hodgsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arabidopsis lyrata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arabidopsis_lyrata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arabidopsis_lyrata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma australiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_australiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_australiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ficedula albicollis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ficedula_albicollis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ficedula_albicollis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus pastoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_pastoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_pastoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9107 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9107_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9107_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus GP2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_gp2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_gp2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus SB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_sb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_sb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 7805 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_7805_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_7805_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus paraplantarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_paraplantarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_paraplantarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorocebus sabaeus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorocebus_sabaeus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorocebus_sabaeus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ophiostoma piceae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ophiostoma_piceae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ophiostoma_piceae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coniosporium apollinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coniosporium_apollinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coniosporium_apollinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhinopithecus roxellana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhinopithecus_roxellana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhinopithecus_roxellana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pluralibacter gergoviae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pluralibacter_gergoviae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pluralibacter_gergoviae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nomascus leucogenys nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nomascus_leucogenys_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nomascus_leucogenys_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azoarcus sp. BH72 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azoarcus_sp_bh72_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azoarcus_sp_bh72_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. ADP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_adp1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_adp1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthroderma benhamiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthroderma_benhamiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthroderma_benhamiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microsporum gypseum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microsporum_gypseum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microsporum_gypseum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthroderma otae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthroderma_otae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthroderma_otae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichophyton equinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichophyton_equinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichophyton_equinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichoderma atroviride nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichoderma_atroviride_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichoderma_atroviride_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nostoc punctiforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nostoc_punctiforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nostoc_punctiforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycosphaerella pini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycosphaerella_pini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycosphaerella_pini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. CC9311 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_cc9311_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_cc9311_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pythium ultimum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pythium_ultimum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pythium_ultimum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halothece sp. PCC7418 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halothece_sp_pcc7418_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halothece_sp_pcc7418_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. PCC7424 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_pcc7424_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_pcc7424_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oryza barthii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oryza_barthii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oryza_barthii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoalloteichus cyanogriseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoalloteichus_cyanogriseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoalloteichus_cyanogriseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Piriformospora indica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_piriformospora_indica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_piriformospora_indica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea stewartii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_stewartii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_stewartii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces niger nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_niger_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_niger_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces violens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_violens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_violens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces roseoverticillatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_roseoverticillatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_roseoverticillatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus clausii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_clausii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_clausii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces atroolivaceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_atroolivaceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_atroolivaceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces bicolor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_bicolor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_bicolor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces catenulae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_catenulae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_catenulae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseorubens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseorubens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseorubens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces albus albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_albus_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_albus_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces alboflavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_alboflavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_alboflavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces aureocirculatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_aureocirculatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_aureocirculatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces californicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_californicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_californicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces lavenduligriseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_lavenduligriseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_lavenduligriseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces mutabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_mutabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_mutabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces purpeofuscus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_purpeofuscus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_purpeofuscus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces resistomycificus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_resistomycificus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_resistomycificus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces varsoviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_varsoviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_varsoviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytophthora sojae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytophthora_sojae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytophthora_sojae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lechevalieria aerocolonigenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lechevalieria_aerocolonigenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lechevalieria_aerocolonigenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces durhamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_durhamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_durhamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces flavochromogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_flavochromogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_flavochromogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces iakyrus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_iakyrus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_iakyrus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces katrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_katrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_katrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces pyridomyceticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_pyridomyceticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_pyridomyceticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces albulus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_albulus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_albulus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Theileria orientalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_theileria_orientalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_theileria_orientalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus kodakarensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_kodakarensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_kodakarensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 5701 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_5701_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_5701_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquamicrobium defluvii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquamicrobium_defluvii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquamicrobium_defluvii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gasterosteus aculeatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gasterosteus_aculeatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gasterosteus_aculeatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microplitis demolitor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microplitis_demolitor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microplitis_demolitor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. VLB120 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_vlb120_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_vlb120_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter henricii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_henricii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_henricii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Penicillium oxalicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_penicillium_oxalicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_penicillium_oxalicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ostreococcus tauri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ostreococcus_tauri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ostreococcus_tauri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus horikoshii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_horikoshii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_horikoshii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eucalyptus grandis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eucalyptus_grandis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eucalyptus_grandis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus influenzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_influenzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_influenzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bos mutus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bos_mutus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bos_mutus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaeroforma arctica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaeroforma_arctica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaeroforma_arctica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ophiocordyceps sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ophiocordyceps_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ophiocordyceps_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporisorium reilianum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporisorium_reilianum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporisorium_reilianum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Boechera stricta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_boechera_stricta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_boechera_stricta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eutrema salsugineum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eutrema_salsugineum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eutrema_salsugineum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces seoulensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_seoulensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_seoulensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cordyceps militaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cordyceps_militaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cordyceps_militaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9302 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9302_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9302_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9312 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9312_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9312_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9313 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9313_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9313_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomonas intermedia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomonas_intermedia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomonas_intermedia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aromatoleum aromaticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aromatoleum_aromaticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aromatoleum_aromaticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycetocola saprophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycetocola_saprophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycetocola_saprophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida GB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_gb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_gb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leersia perrieri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leersia_perrieri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leersia_perrieri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium subtile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_subtile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_subtile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthobacter autotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthobacter_autotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthobacter_autotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium gallinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_gallinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_gallinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium merycicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_merycicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_merycicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium ruminantium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_ruminantium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_ruminantium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium carotovorum odoriferum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_carotovorum_odoriferum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_carotovorum_odoriferum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myceliophthora thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myceliophthora_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myceliophthora_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mortierella verticillata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mortierella_verticillata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mortierella_verticillata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microtus ochrogaster nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microtus_ochrogaster_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microtus_ochrogaster_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coniophora puteana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coniophora_puteana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coniophora_puteana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum higginsianum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_higginsianum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_higginsianum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Monosiga brevicollis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_monosiga_brevicollis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_monosiga_brevicollis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capsella rubella nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capsella_rubella_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capsella_rubella_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichosporon asahii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichosporon_asahii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichosporon_asahii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudanabaena sp. PCC7367 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudanabaena_sp_pcc7367_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudanabaena_sp_pcc7367_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia grimesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_grimesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_grimesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia plymuthica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_plymuthica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_plymuthica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter mediterraneus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_mediterraneus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_mediterraneus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium tuberculosis H37Rv nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_tuberculosis_h37rv_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_tuberculosis_h37rv_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudocercospora fijiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudocercospora_fijiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudocercospora_fijiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HdN1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_hdn1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_hdn1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter antibioticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_antibioticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_antibioticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 8102 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_8102_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_8102_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudozyma flocculosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudozyma_flocculosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudozyma_flocculosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thauera sp. MZ1T nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thauera_sp_mz1t_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thauera_sp_mz1t_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrus clementina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrus_clementina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrus_clementina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerulina musiva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerulina_musiva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerulina_musiva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pylori 26695 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pylori_26695_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pylori_26695_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pylori J99 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pylori_j99_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pylori_j99_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serpula lacrymans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serpula_lacrymans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serpula_lacrymans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cladophialophora carrionii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cladophialophora_carrionii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cladophialophora_carrionii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING endosymbiont of Acanthamoeba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endosymbiont_of_acanthamoeba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endosymbiont_of_acanthamoeba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium pasteurianum BC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_pasteurianum_bc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_pasteurianum_bc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas tunicata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_tunicata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_tunicata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selaginella moellendorffii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selaginella_moellendorffii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selaginella_moellendorffii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseovarius nubinhibens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseovarius_nubinhibens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseovarius_nubinhibens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bubalus bubalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bubalus_bubalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bubalus_bubalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salmonella enterica Typhimurium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salmonella_enterica_typhimurium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salmonella_enterica_typhimurium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Camelina sativa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_camelina_sativa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_camelina_sativa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira sp. MilosT1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_sp_milost1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_sp_milost1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira sp. MilosT2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_sp_milost2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_sp_milost2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. PCC7335 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_pcc7335_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_pcc7335_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracaedibacter acanthamoebae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracaedibacter_acanthamoebae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracaedibacter_acanthamoebae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metarhizium acridum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metarhizium_acridum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metarhizium_acridum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9201 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9201_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9201_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9211 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9211_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9211_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9215 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9215_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9215_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pandoraea pnomenusa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pandoraea_pnomenusa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pandoraea_pnomenusa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Setosphaeria turcica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_setosphaeria_turcica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_setosphaeria_turcica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella sp. ANA3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_sp_ana3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_sp_ana3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella petrii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_petrii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_petrii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. M1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_m1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_m1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfococcus oleovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfococcus_oleovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfococcus_oleovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eutypa lata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eutypa_lata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eutypa_lata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sp. ASF360 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sp_asf360_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sp_asf360_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. ASF356 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_asf356_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_asf356_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. ASF502 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_asf502_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_asf502_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fischerella thermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fischerella_thermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fischerella_thermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hammondia hammondi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hammondia_hammondi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hammondia_hammondi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Calothrix sp. PCC7507 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_calothrix_sp_pcc7507_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_calothrix_sp_pcc7507_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces coelicolor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_coelicolor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_coelicolor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolbachia sp. Ooc nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolbachia_sp_ooc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolbachia_sp_ooc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusarium pseudograminearum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusarium_pseudograminearum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusarium_pseudograminearum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bipolaris oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bipolaris_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bipolaris_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus jostii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_jostii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_jostii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glarea lozoyensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glarea_lozoyensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glarea_lozoyensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prunus mume nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prunus_mume_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prunus_mume_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xenococcus sp. PCC7305 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xenococcus_sp_pcc7305_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xenococcus_sp_pcc7305_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. PCC7375 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_pcc7375_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_pcc7375_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gloeocapsa sp. PCC73106 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gloeocapsa_sp_pcc73106_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gloeocapsa_sp_pcc73106_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acromyrmex echinatior nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acromyrmex_echinatior_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acromyrmex_echinatior_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nostoc sp. PCC7120 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nostoc_sp_pcc7120_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nostoc_sp_pcc7120_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharothrix syringae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharothrix_syringae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharothrix_syringae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gloeophyllum trabeum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gloeophyllum_trabeum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gloeophyllum_trabeum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia sp. ATCC39006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_sp_atcc39006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_sp_atcc39006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus neutrinimicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_neutrinimicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_neutrinimicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus carbonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_carbonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_carbonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosococcus watsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosococcus_watsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosococcus_watsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. CcI3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_cci3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_cci3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maylandia zebra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maylandia_zebra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maylandia_zebra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter bereziniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_bereziniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_bereziniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylosinus sp. LW3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylosinus_sp_lw3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylosinus_sp_lw3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylosinus sp. PW1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylosinus_sp_pw1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylosinus_sp_pw1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola APS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_aps_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_aps_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myotis brandtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myotis_brandtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myotis_brandtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spizellomyces punctatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spizellomyces_punctatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spizellomyces_punctatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Batrachochytrium dendrobatidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_batrachochytrium_dendrobatidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_batrachochytrium_dendrobatidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioides sp. CF8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioides_sp_cf8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioides_sp_cf8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gregarina niphandrodes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gregarina_niphandrodes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gregarina_niphandrodes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. CC9605 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_cc9605_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_cc9605_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. CC9616 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_cc9616_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_cc9616_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas gulae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_gulae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_gulae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stanieria cyanosphaera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stanieria_cyanosphaera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stanieria_cyanosphaera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. PCC7376 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_pcc7376_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_pcc7376_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saprolegnia diclina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saprolegnia_diclina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saprolegnia_diclina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geminocystis herdmanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geminocystis_herdmanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geminocystis_herdmanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. Tv2a2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_tv2a2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_tv2a2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetrapisispora phaffii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetrapisispora_phaffii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetrapisispora_phaffii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. ORS278 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_ors278_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_ors278_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pythium iwayamai nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pythium_iwayamai_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pythium_iwayamai_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila pneumoniae AR39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_pneumoniae_ar39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_pneumoniae_ar39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila pneumoniae CWL029 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_pneumoniae_cwl029_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_pneumoniae_cwl029_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusarium verticillioides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusarium_verticillioides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusarium_verticillioides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chrysiogenes arsenatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chrysiogenes_arsenatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chrysiogenes_arsenatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pleurocapsa sp. PCC7319 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pleurocapsa_sp_pcc7319_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pleurocapsa_sp_pcc7319_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pleurocapsa sp. PCC7327 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pleurocapsa_sp_pcc7327_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pleurocapsa_sp_pcc7327_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nodosilinea nodulosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nodosilinea_nodulosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nodosilinea_nodulosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coleofasciculus chthonoplastes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coleofasciculus_chthonoplastes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coleofasciculus_chthonoplastes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudanabaena sp. PCC6802 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudanabaena_sp_pcc6802_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudanabaena_sp_pcc6802_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lipotes vexillifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lipotes_vexillifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lipotes_vexillifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ustilago hordei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ustilago_hordei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ustilago_hordei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pediculus humanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pediculus_humanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pediculus_humanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccidioides brasiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccidioides_brasiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccidioides_brasiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Persephonella marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_persephonella_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_persephonella_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella trematum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_trematum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_trematum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Strigamia maritima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_strigamia_maritima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_strigamia_maritima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nipponia nippon nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nipponia_nippon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nipponia_nippon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Galdieria sulphuraria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_galdieria_sulphuraria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_galdieria_sulphuraria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bombus impatiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bombus_impatiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bombus_impatiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pteropus vampyrus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pteropus_vampyrus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pteropus_vampyrus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes sp. SE50110 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_sp_se50110_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_sp_se50110_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis brenneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_brenneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_brenneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zootermopsis nevadensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zootermopsis_nevadensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zootermopsis_nevadensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kocuria polaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kocuria_polaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kocuria_polaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylosinus sp. LW4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylosinus_sp_lw4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylosinus_sp_lw4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfitobacterium hafniense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfitobacterium_hafniense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfitobacterium_hafniense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nectria haematococca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nectria_haematococca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nectria_haematococca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnobacterium bovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnobacterium_bovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnobacterium_bovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zobellia uliginosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zobellia_uliginosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zobellia_uliginosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stegastes partitus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stegastes_partitus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stegastes_partitus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus AS9601 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_as9601_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_as9601_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseofuscus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseofuscus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseofuscus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Magnaporthiopsis poae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_magnaporthiopsis_poae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_magnaporthiopsis_poae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus kunkeei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_kunkeei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_kunkeei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wallemia sebi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wallemia_sebi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wallemia_sebi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kozakia baliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kozakia_baliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kozakia_baliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporocytophaga myxococcoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporocytophaga_myxococcoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporocytophaga_myxococcoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosomonas sp. AL212 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosomonas_sp_al212_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosomonas_sp_al212_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gallibacterium genomosp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gallibacterium_genomosp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gallibacterium_genomosp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli O157H7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_o157h7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_o157h7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonadales bacterium TW7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonadales_bacterium_tw7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonadales_bacterium_tw7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Magnetococcus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_magnetococcus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_magnetococcus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium imitans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_imitans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_imitans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aphanomyces invadans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aphanomyces_invadans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aphanomyces_invadans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas cremoricolorata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_cremoricolorata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_cremoricolorata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerochaeta globosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerochaeta_globosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerochaeta_globosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerochaeta pleomorpha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerochaeta_pleomorpha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerochaeta_pleomorpha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium resinovorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_resinovorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_resinovorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium scardovii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_scardovii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_scardovii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cedecea neteri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cedecea_neteri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cedecea_neteri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dechloromonas aromatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dechloromonas_aromatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dechloromonas_aromatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sacchari nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sacchari_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sacchari_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassiosira oceanica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassiosira_oceanica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassiosira_oceanica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida KT2440 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_kt2440_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_kt2440_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xylella fastidiosa 9a5c nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xylella_fastidiosa_9a5c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xylella_fastidiosa_9a5c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus borealis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_borealis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_borealis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Auricularia delicata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_auricularia_delicata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_auricularia_delicata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobacterium hydrogeniphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobacterium_hydrogeniphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobacterium_hydrogeniphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter sp. SD21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_sp_sd21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_sp_sd21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beta vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beta_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beta_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus nidulans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_nidulans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_nidulans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolbachia sp. Dme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolbachia_sp_dme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolbachia_sp_dme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anabaena sp. PCC7108 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anabaena_sp_pcc7108_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anabaena_sp_pcc7108_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytophthora ramorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytophthora_ramorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytophthora_ramorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. JLS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_jls_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_jls_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 8109 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_8109_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_8109_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. WH 8016 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_wh_8016_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_wh_8016_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus CCMP1375 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_ccmp1375_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_ccmp1375_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9515 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9515_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9515_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9301 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9301_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9301_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9314 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9314_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9314_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus MIT9322 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_mit9322_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_mit9322_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus marinus NATL1A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_marinus_natl1a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_marinus_natl1a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria monocytogenes EGDe nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_monocytogenes_egde_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_monocytogenes_egde_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pneumoniae TIGR4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pneumoniae_tigr4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pneumoniae_tigr4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pneumoniae R6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pneumoniae_r6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pneumoniae_r6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus picturae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_picturae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_picturae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Elizabethkingia miricola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_elizabethkingia_miricola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_elizabethkingia_miricola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. thb2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_thb2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_thb2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beauveria bassiana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beauveria_bassiana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beauveria_bassiana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus epidermidis RP62A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_epidermidis_rp62a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_epidermidis_rp62a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus epidermidis ATCC12228 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_epidermidis_atcc12228_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_epidermidis_atcc12228_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium fabrum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_fabrum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_fabrum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Python bivittatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_python_bivittatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_python_bivittatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella tularensis SCHUS4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_tularensis_schus4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_tularensis_schus4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobacterium autotrophicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobacterium_autotrophicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobacterium_autotrophicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotalea psychrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotalea_psychrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotalea_psychrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum aerophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_aerophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_aerophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter malorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_malorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_malorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillatoria nigroviridis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillatoria_nigroviridis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillatoria_nigroviridis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobium sp. PCC7001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobium_sp_pcc7001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobium_sp_pcc7001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Robinsoniella peoriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_robinsoniella_peoriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_robinsoniella_peoriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudopodoces humilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudopodoces_humilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudopodoces_humilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila pneumoniae TW183 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_pneumoniae_tw183_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_pneumoniae_tw183_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter cetorum MIT007128 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_cetorum_mit007128_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_cetorum_mit007128_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chrysochloris asiatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chrysochloris_asiatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chrysochloris_asiatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Baumannia cicadellinicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_baumannia_cicadellinicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_baumannia_cicadellinicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus furiosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_furiosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_furiosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkalilimnicola ehrlichii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkalilimnicola_ehrlichii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkalilimnicola_ehrlichii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocystis sp. SC2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocystis_sp_sc2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocystis_sp_sc2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dermacoccus sp. Ellin185 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dermacoccus_sp_ellin185_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dermacoccus_sp_ellin185_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus graminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_graminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_graminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus odorifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_odorifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_odorifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. Ec33 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_ec33_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_ec33_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum ATCC25586 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_atcc25586_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_atcc25586_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas axonopodis citri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_axonopodis_citri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_axonopodis_citri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter crescentus CB15 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_crescentus_cb15_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_crescentus_cb15_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium atypicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_atypicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_atypicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter jejuni NCTC11168 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_jejuni_nctc11168_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_jejuni_nctc11168_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capsaspora owczarzaki nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capsaspora_owczarzaki_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capsaspora_owczarzaki_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanosarcina mazei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanosarcina_mazei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanosarcina_mazei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium tepidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_tepidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_tepidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. ATCC31555 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_atcc31555_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_atcc31555_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium perfringens ATCC13124 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_perfringens_atcc13124_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_perfringens_atcc13124_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haematobacter massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haematobacter_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haematobacter_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. PCC7336 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_pcc7336_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_pcc7336_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. PCC6312 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_pcc6312_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_pcc6312_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus nautili nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_nautili_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_nautili_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioides sp. JS614 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioides_sp_js614_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioides_sp_js614_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium efficiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_efficiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_efficiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sordidicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sordidicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sordidicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. Ai1a2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_ai1a2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_ai1a2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium glutamicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_glutamicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_glutamicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosynechococcus elongatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosynechococcus_elongatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosynechococcus_elongatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus anthracis Ames nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_anthracis_ames_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_anthracis_ames_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shigella flexneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shigella_flexneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shigella_flexneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus gonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_gonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_gonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya dadantii 3937 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_dadantii_3937_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_dadantii_3937_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola Sg nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_sg_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_sg_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coccidioides posadasii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coccidioides_posadasii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coccidioides_posadasii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli CFT073 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_cft073_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_cft073_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Punctularia strigosozonata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_punctularia_strigosozonata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_punctularia_strigosozonata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria ivanovii londoniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_ivanovii_londoniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_ivanovii_londoniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter gerneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_gerneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_gerneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter tandoii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_tandoii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_tandoii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter tjernbergiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_tjernbergiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_tjernbergiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter towneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_towneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_towneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminiclostridium thermocellum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminiclostridium_thermocellum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminiclostridium_thermocellum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc mesenteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_mesenteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_mesenteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharophagus degradans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharophagus_degradans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharophagus_degradans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oenococcus oeni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oenococcus_oeni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oenococcus_oeni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trichodesmium erythraeum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trichodesmium_erythraeum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trichodesmium_erythraeum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tropheryma whipplei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tropheryma_whipplei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tropheryma_whipplei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tannerella forsythia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tannerella_forsythia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tannerella_forsythia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blochmannia floridanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blochmannia_floridanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blochmannia_floridanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Melampsora laricipopulina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_melampsora_laricipopulina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_melampsora_laricipopulina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurihydrogenibium azorense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurihydrogenibium_azorense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurihydrogenibium_azorense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Koribacter versatilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_koribacter_versatilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_koribacter_versatilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herminiimonas arsenicoxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herminiimonas_arsenicoxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herminiimonas_arsenicoxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus somnus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_somnus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_somnus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae B728a nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_b728a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_b728a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ehrlichia chaffeensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ehrlichia_chaffeensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ehrlichia_chaffeensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens Pf01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_pf01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_pf01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio alaskensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_alaskensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_alaskensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neptuniibacter caesariensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neptuniibacter_caesariensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neptuniibacter_caesariensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis japonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_japonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_japonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis vancoresmycina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_vancoresmycina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_vancoresmycina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium sp. 174 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_sp_174_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_sp_174_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fomitiporia mediterranea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fomitiporia_mediterranea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fomitiporia_mediterranea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chaetomium thermophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chaetomium_thermophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chaetomium_thermophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mutans UA159 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mutans_ua159_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mutans_ua159_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus agalactiae NEM316 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_agalactiae_nem316_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_agalactiae_nem316_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Allokutzneria albata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_allokutzneria_albata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_allokutzneria_albata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorogloeopsis fritschii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorogloeopsis_fritschii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorogloeopsis_fritschii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella oneidensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_oneidensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_oneidensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaplasma phagocytophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaplasma_phagocytophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaplasma_phagocytophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia pestis CO92 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_pestis_co92_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_pestis_co92_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Larimichthys crocea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_larimichthys_crocea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_larimichthys_crocea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enhygromyxa salina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enhygromyxa_salina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enhygromyxa_salina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas rhizosphaerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_rhizosphaerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_rhizosphaerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Croceibacter atlanticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_croceibacter_atlanticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_croceibacter_atlanticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia cenocepacia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_cenocepacia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_cenocepacia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium marinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_marinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_marinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens SBW25 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_sbw25_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_sbw25_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leguminosarum 3841 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leguminosarum_3841_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leguminosarum_3841_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium longum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_longum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_longum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium psychraerophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_psychraerophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_psychraerophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus vietnamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_vietnamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_vietnamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium atrosepticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_atrosepticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_atrosepticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salmonella bongori NCTC12419 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salmonella_bongori_nctc12419_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salmonella_bongori_nctc12419_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus uberis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_uberis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_uberis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila abortus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_abortus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_abortus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquilegia coerulea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquilegia_coerulea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquilegia_coerulea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonospora sp. ATCC39149 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonospora_sp_atcc39149_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonospora_sp_atcc39149_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salmonella enterica CT18 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salmonella_enterica_ct18_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salmonella_enterica_ct18_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas protegens Pf5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_protegens_pf5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_protegens_pf5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus plantarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_plantarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_plantarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema putidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_putidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_putidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moniliophthora roreri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moniliophthora_roreri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moniliophthora_roreri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus iheyensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_iheyensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_iheyensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mastigocladopsis repens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mastigocladopsis_repens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mastigocladopsis_repens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. RS9916 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_rs9916_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_rs9916_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. RS9917 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_rs9917_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_rs9917_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mannheimia succiniciproducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mannheimia_succiniciproducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mannheimia_succiniciproducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. BMG512 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_bmg512_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_bmg512_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neorickettsia sennetsu nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neorickettsia_sennetsu_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neorickettsia_sennetsu_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrinema altunense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrinema_altunense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrinema_altunense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kocuria marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kocuria_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kocuria_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Togninia minima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_togninia_minima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_togninia_minima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae tomato nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_tomato_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_tomato_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio parahaemolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_parahaemolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_parahaemolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus subtilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_subtilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_subtilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquifex aeolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquifex_aeolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquifex_aeolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Archaeoglobus fulgidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_archaeoglobus_fulgidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_archaeoglobus_fulgidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobrevibacter sp. AbM4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobrevibacter_sp_abm4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobrevibacter_sp_abm4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium diazoefficiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_diazoefficiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_diazoefficiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brucella melitensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brucella_melitensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brucella_melitensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola Bp nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_bp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_bp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrus x bretschneideri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrus_x_bretschneideri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrus_x_bretschneideri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myotis davidii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myotis_davidii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myotis_davidii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella piezotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_piezotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_piezotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter adhaerens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_adhaerens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_adhaerens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus faecalis V583 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_faecalis_v583_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_faecalis_v583_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides thetaiotaomicron nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_thetaiotaomicron_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_thetaiotaomicron_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Grosmannia clavigera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_grosmannia_clavigera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_grosmannia_clavigera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bigelowiella natans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bigelowiella_natans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bigelowiella_natans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coxiella burnetii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coxiella_burnetii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coxiella_burnetii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces avermitilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_avermitilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_avermitilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila caviae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_caviae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_caviae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus pleuropneumoniae 1 4074 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_pleuropneumoniae_1_4074_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_pleuropneumoniae_1_4074_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas neptunium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_neptunium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_neptunium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosomonas europaea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosomonas_europaea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosomonas_europaea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beijerinckia mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beijerinckia_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beijerinckia_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas alkaliantarctica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_alkaliantarctica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_alkaliantarctica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. CB0101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_cb0101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_cb0101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax sp. JS42 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_sp_js42_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_sp_js42_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus ducreyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_ducreyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_ducreyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solibacter usitatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solibacter_usitatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solibacter_usitatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus erythropolis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_erythropolis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_erythropolis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaplasma marginale Maries nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaplasma_marginale_maries_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaplasma_marginale_maries_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas sp. SM9913 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_sp_sm9913_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_sp_sm9913_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter hepaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_hepaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_hepaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus kaustophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_kaustophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_kaustophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus jiangxiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_jiangxiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_jiangxiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax sp. DG881 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_sp_dg881_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_sp_dg881_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium formosense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_formosense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_formosense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Scalindua brodae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_scalindua_brodae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_scalindua_brodae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas alkylphenolia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_alkylphenolia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_alkylphenolia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter sp. NAP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_sp_nap1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_sp_nap1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacterium capsulatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacterium_capsulatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacterium_capsulatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucomicrobium spinosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucomicrobium_spinosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucomicrobium_spinosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anabaena variabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anabaena_variabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anabaena_variabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacillus dabanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacillus_dabanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacillus_dabanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ostreococcus lucimarinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ostreococcus_lucimarinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ostreococcus_lucimarinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas gingivalis W83 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_gingivalis_w83_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_gingivalis_w83_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopirellula baltica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopirellula_baltica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopirellula_baltica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidithiobacillus ferrooxidans ATCC23270 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidithiobacillus_ferrooxidans_atcc23270_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidithiobacillus_ferrooxidans_atcc23270_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia mallei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_mallei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_mallei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia muridarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_muridarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_muridarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalococcoides mccartyi 195 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalococcoides_mccartyi_195_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalococcoides_mccartyi_195_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus radiodurans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_radiodurans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_radiodurans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter sulfurreducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_sulfurreducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_sulfurreducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocaldococcus jannaschii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocaldococcus_jannaschii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocaldococcus_jannaschii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylococcus capsulatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylococcus_capsulatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylococcus_capsulatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photorhabdus luminescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photorhabdus_luminescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photorhabdus_luminescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma arthritidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_arthritidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_arthritidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma genitalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_genitalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_genitalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga maritima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_maritima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_maritima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema denticola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_denticola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_denticola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema pallidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_pallidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_pallidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio cholerae O1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_cholerae_o1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_cholerae_o1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chromobacterium violaceum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chromobacterium_violaceum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chromobacterium_violaceum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas lutea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_lutea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_lutea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cynoglossus semilaevis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cynoglossus_semilaevis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cynoglossus_semilaevis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caedibacter acanthamoebae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caedibacter_acanthamoebae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caedibacter_acanthamoebae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracaedibacter symbiosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracaedibacter_symbiosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracaedibacter_symbiosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wallemia ichthyophaga nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wallemia_ichthyophaga_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wallemia_ichthyophaga_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carboxydothermus hydrogenoformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carboxydothermus_hydrogenoformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carboxydothermus_hydrogenoformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dichelobacter nodosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dichelobacter_nodosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dichelobacter_nodosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium smegmatis MC2155 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_smegmatis_mc2155_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_smegmatis_mc2155_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myxococcus xanthus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myxococcus_xanthus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myxococcus_xanthus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus albus 8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_albus_8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_albus_8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruegeria pomeroyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruegeria_pomeroyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruegeria_pomeroyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis NCTC 12261 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_nctc_12261_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_nctc_12261_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tupaia chinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tupaia_chinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tupaia_chinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus sp. AM4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_sp_am4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_sp_am4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia farcinica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_farcinica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_farcinica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING planctomycete KSU1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planctomycete_ksu1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planctomycete_ksu1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HTCC2143 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_htcc2143_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_htcc2143_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HTCC2148 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_htcc2148_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_htcc2148_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HTCC2080 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_htcc2080_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_htcc2080_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coccomyxa subellipsoidea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coccomyxa_subellipsoidea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coccomyxa_subellipsoidea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gloeobacter violaceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gloeobacter_violaceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gloeobacter_violaceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chroococcidiopsis thermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chroococcidiopsis_thermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chroococcidiopsis_thermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola batsensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_batsensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_batsensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. C nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ehrlichia ruminantium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ehrlichia_ruminantium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ehrlichia_ruminantium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalococcoides mccartyi CBDB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalococcoides_mccartyi_cbdb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalococcoides_mccartyi_cbdb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella bronchiseptica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_bronchiseptica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_bronchiseptica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella pertussis Tohama nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_pertussis_tohama_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_pertussis_tohama_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus johnsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_johnsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_johnsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia typhi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_typhi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_typhi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kitasatospora arboriphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kitasatospora_arboriphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kitasatospora_arboriphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium cosmeticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_cosmeticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_cosmeticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris CGA009 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_cga009_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_cga009_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter arcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_arcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_arcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus anthracis Sterne nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_anthracis_sterne_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_anthracis_sterne_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosomonas sp. Is79A3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosomonas_sp_is79a3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosomonas_sp_is79a3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola Ctu nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_ctu_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_ctu_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium avium paratuberculosis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_avium_paratuberculosis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_avium_paratuberculosis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium sibiricum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_sibiricum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_sibiricum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma hyopneumoniae J nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_hyopneumoniae_j_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_hyopneumoniae_j_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma synoviae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_synoviae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_synoviae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus thermophilus HB27 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_thermophilus_hb27_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_thermophilus_hb27_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma onion yellows nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_onion_yellows_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_onion_yellows_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucosispora maris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucosispora_maris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucosispora_maris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pneumocystis murina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pneumocystis_murina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pneumocystis_murina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Picrophilus torridus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_picrophilus_torridus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_picrophilus_torridus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia eutropha JMP134 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_eutropha_jmp134_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_eutropha_jmp134_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus thermophilus LMG18311 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_thermophilus_lmg18311_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_thermophilus_lmg18311_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Protochlamydia amoebophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_protochlamydia_amoebophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_protochlamydia_amoebophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila felis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_felis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_felis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zymomonas mobilis ZM4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zymomonas_mobilis_zm4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zymomonas_mobilis_zm4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capsella grandiflora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capsella_grandiflora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capsella_grandiflora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bdellovibrio bacteriovorus HD100 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bdellovibrio_bacteriovorus_hd100_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bdellovibrio_bacteriovorus_hd100_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae phaseolicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_phaseolicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_phaseolicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella ruminicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_ruminicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_ruminicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moorella thermoacetica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moorella_thermoacetica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moorella_thermoacetica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Byssochlamys spectabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_byssochlamys_spectabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_byssochlamys_spectabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacillus flagellatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacillus_flagellatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacillus_flagellatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesoplasma florum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesoplasma_florum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesoplasma_florum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus cibi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_cibi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_cibi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubrobacter xylanophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubrobacter_xylanophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubrobacter_xylanophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cupriavidus metallidurans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cupriavidus_metallidurans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cupriavidus_metallidurans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia xenovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_xenovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_xenovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium antarcticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_antarcticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_antarcticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas gingivicanis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_gingivicanis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_gingivicanis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chelativorans sp. BNC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chelativorans_sp_bnc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chelativorans_sp_bnc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassobacter stenotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassobacter_stenotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassobacter_stenotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium meliloti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_meliloti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_meliloti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium loti MAFF303099 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_loti_maff303099_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_loti_maff303099_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kineococcus radiotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kineococcus_radiotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kineococcus_radiotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus maripaludis S2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_maripaludis_s2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_maripaludis_s2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia solanacearum GMI1000 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_solanacearum_gmi1000_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_solanacearum_gmi1000_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium acnes KPA171202 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_acnes_kpa171202_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_acnes_kpa171202_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma mobile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_mobile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_mobile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus wynnii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_wynnii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_wynnii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronomonas moolapensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronomonas_moolapensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronomonas_moolapensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus elongatus PCC6301 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_elongatus_pcc6301_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_elongatus_pcc6301_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia vietnamiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_vietnamiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_vietnamiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ehrlichia canis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ehrlichia_canis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ehrlichia_canis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodospirillum rubrum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodospirillum_rubrum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodospirillum_rubrum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanosarcina barkeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanosarcina_barkeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanosarcina_barkeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cytophaga hutchinsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cytophaga_hutchinsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cytophaga_hutchinsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter metallireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_metallireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_metallireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermobifida fusca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermobifida_fusca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermobifida_fusca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter sp. ELB17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_sp_elb17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_sp_elb17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anabaena cylindrica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anabaena_cylindrica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anabaena_cylindrica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya boryana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_boryana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_boryana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aggregatibacter actinomycetemcomitans HK1651 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aggregatibacter_actinomycetemcomitans_hk1651_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_aggregatibacter_actinomycetemcomitans_hk1651_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeropyrum pernix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeropyrum_pernix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeropyrum_pernix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus halodurans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_halodurans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_halodurans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides fragilis NCTC 9343 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_fragilis_nctc_9343_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_fragilis_nctc_9343_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia pseudomallei K96243 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_pseudomallei_k96243_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_pseudomallei_k96243_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium acetobutylicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_acetobutylicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_acetobutylicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoclostridium difficile 630 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoclostridium_difficile_630_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoclostridium_difficile_630_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gluconacetobacter diazotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gluconacetobacter_diazotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gluconacetobacter_diazotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloarcula marismortui nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloarcula_marismortui_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloarcula_marismortui_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus acidophilus NCFM nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_acidophilus_ncfm_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_acidophilus_ncfm_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus lactis Il1403 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_lactis_il1403_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_lactis_il1403_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella pneumophila Philadelphia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_pneumophila_philadelphia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_pneumophila_philadelphia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria innocua nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_innocua_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_innocua_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium extorquens AM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_extorquens_am1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_extorquens_am1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium leprae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_leprae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_leprae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma mycoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_mycoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_mycoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma penetrans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_penetrans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_penetrans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma pulmonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_pulmonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_pulmonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus abyssi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_abyssi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_abyssi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacter capsulatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacter_capsulatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacter_capsulatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacter sphaeroides 241 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacter_sphaeroides_241_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacter_sphaeroides_241_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia prowazekii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_prowazekii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_prowazekii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia sibirica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_sibirica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_sibirica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyaloperonospora arabidopsidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyaloperonospora_arabidopsidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyaloperonospora_arabidopsidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfolobus solfataricus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfolobus_solfataricus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfolobus_solfataricus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfolobus tokodaii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfolobus_tokodaii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfolobus_tokodaii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldanaerobacter subterraneus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldanaerobacter_subterraneus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldanaerobacter_subterraneus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoplasma acidophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoplasma_acidophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoplasma_acidophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoplasma volcanium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoplasma_volcanium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoplasma_volcanium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ureaplasma parvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ureaplasma_parvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ureaplasma_parvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolinella succinogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolinella_succinogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolinella_succinogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Candida orthopsilosis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candida_orthopsilosis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candida_orthopsilosis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia marcescens Db11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_marcescens_db11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_marcescens_db11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium oleivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_oleivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_oleivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pediococcus pentosaceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pediococcus_pentosaceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pediococcus_pentosaceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Diplosphaera colitermitum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_diplosphaera_colitermitum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_diplosphaera_colitermitum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacteriaceae bacterium TAA166 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacteriaceae_bacterium_taa166_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacteriaceae_bacterium_taa166_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus licheniformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_licheniformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_licheniformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium aromaticivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_aromaticivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_aromaticivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudogulbenkiania ferrooxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudogulbenkiania_ferrooxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudogulbenkiania_ferrooxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus haemolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_haemolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_haemolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leifsonia xyli CTCB07 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leifsonia_xyli_ctcb07_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leifsonia_xyli_ctcb07_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis japonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_japonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_japonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella quintana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_quintana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_quintana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella henselae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_henselae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_henselae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas sp. Bsw20308 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_sp_bsw20308_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_sp_bsw20308_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Idiomarina loihiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_idiomarina_loihiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_idiomarina_loihiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces flavovariabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_flavovariabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_flavovariabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces xylophagus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_xylophagus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_xylophagus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces fulvoviolaceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_fulvoviolaceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_fulvoviolaceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis rifamycinica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_rifamycinica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_rifamycinica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. BTAi1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_btai1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_btai1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Renibacterium salmoninarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_renibacterium_salmoninarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_renibacterium_salmoninarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfovibrio yellowstonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfovibrio_yellowstonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfovibrio_yellowstonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobacterium commune nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobacterium_commune_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobacterium_commune_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma bovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_bovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_bovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium limicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_limicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_limicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium phaeobacteroides DSM266 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_phaeobacteroides_dsm266_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_phaeobacteroides_dsm266_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium phaeovibrioides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_phaeovibrioides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_phaeovibrioides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter aurescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_aurescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_aurescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaeromyxobacter dehalogenans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaeromyxobacter_dehalogenans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaeromyxobacter_dehalogenans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chromohalobacter salexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chromohalobacter_salexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chromohalobacter_salexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. FB24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_fb24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_fb24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jannaschia sp. CCS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jannaschia_sp_ccs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jannaschia_sp_ccs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium beijerinckii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_beijerinckii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_beijerinckii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia garinii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_garinii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_garinii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prosthecochloris aestuarii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prosthecochloris_aestuarii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prosthecochloris_aestuarii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gluconobacter oxydans 621H nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gluconobacter_oxydans_621h_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gluconobacter_oxydans_621h_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photorhabdus asymbiotica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photorhabdus_asymbiotica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photorhabdus_asymbiotica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blochmannia pennsylvanicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blochmannia_pennsylvanicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blochmannia_pennsylvanicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruegeria sp. TM1040 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruegeria_sp_tm1040_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruegeria_sp_tm1040_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiobacillus denitrificans ATCC25259 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiobacillus_denitrificans_atcc25259_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiobacillus_denitrificans_atcc25259_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Symbiobacterium thermophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_symbiobacterium_thermophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_symbiobacterium_thermophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobacterium stanieri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobacterium_stanieri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobacterium_stanieri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobium gracile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobium_gracile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobium_gracile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolbachia sp. Bma nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolbachia_sp_bma_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolbachia_sp_bma_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyphellophora europaea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyphellophora_europaea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyphellophora_europaea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia canadensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_canadensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_canadensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia akari nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_akari_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_akari_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkaliphilus metalliredigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkaliphilus_metalliredigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkaliphilus_metalliredigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma hyopneumoniae 232 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_hyopneumoniae_232_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_hyopneumoniae_232_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonas sp. RCC299 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonas_sp_rcc299_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonas_sp_rcc299_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaromonas sp. JS666 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaromonas_sp_js666_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaromonas_sp_js666_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella pneumophila Paris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_pneumophila_paris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_pneumophila_paris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium profundum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_profundum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_profundum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. EAN1pec nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_ean1pec_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_ean1pec_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. EuI1c nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_eui1c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_eui1c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. CN3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_cn3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_cn3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus thermophilus HB8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_thermophilus_hb8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_thermophilus_hb8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pundamilia nyererei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pundamilia_nyererei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pundamilia_nyererei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocella paludicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocella_paludicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocella_paludicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thauera sp. 27 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thauera_sp_27_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thauera_sp_27_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endozoicomonas elysicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endozoicomonas_elysicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endozoicomonas_elysicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter lari nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_lari_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_lari_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter upsaliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_upsaliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_upsaliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fischerella muscicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fischerella_muscicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fischerella_muscicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium jeikeium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_jeikeium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_jeikeium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium vrystaatense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_vrystaatense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_vrystaatense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprothermobacter proteolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprothermobacter_proteolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprothermobacter_proteolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dictyoglomus thermophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dictyoglomus_thermophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dictyoglomus_thermophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloferax volcanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloferax_volcanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloferax_volcanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermomicrobium roseum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermomicrobium_roseum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermomicrobium_roseum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga neapolitana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_neapolitana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_neapolitana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinibacter ruber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinibacter_ruber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinibacter_ruber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neofusicoccum parvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neofusicoccum_parvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neofusicoccum_parvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium vitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_vitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_vitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium radiobacter nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_radiobacter_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_radiobacter_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalococcoides mccartyi VS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalococcoides_mccartyi_vs_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalococcoides_mccartyi_vs_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polynucleobacter necessarius asymbioticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polynucleobacter_necessarius_asymbioticus_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_polynucleobacter_necessarius_asymbioticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING actinobacterium PHSC20C1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacterium_phsc20c1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacterium_phsc20c1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio fischeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_fischeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_fischeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janibacter sp. HTCC2649 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janibacter_sp_htcc2649_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janibacter_sp_htcc2649_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dokdonia sp. MED134 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dokdonia_sp_med134_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dokdonia_sp_med134_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaribacter irgensii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaribacter_irgensii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaribacter_irgensii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychroflexus torquis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychroflexus_torquis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychroflexus_torquis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Robiginitalea biformata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_robiginitalea_biformata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_robiginitalea_biformata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaribacter sp. MED152 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaribacter_sp_med152_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaribacter_sp_med152_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maribacter sp. HTCC2170 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maribacter_sp_htcc2170_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maribacter_sp_htcc2170_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microscilla marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microscilla_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microscilla_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lyngbya sp. PCC8106 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lyngbya_sp_pcc8106_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lyngbya_sp_pcc8106_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nodularia spumigena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nodularia_spumigena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nodularia_spumigena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. BL107 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_bl107_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_bl107_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lentisphaera araneosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lentisphaera_araneosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lentisphaera_araneosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter litoralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_litoralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_litoralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastopirellula marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastopirellula_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastopirellula_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fulvimarina pelagi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fulvimarina_pelagi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fulvimarina_pelagi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Loktanella vestfoldensis SKA53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_loktanella_vestfoldensis_ska53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_loktanella_vestfoldensis_ska53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicaulis sp. HTCC2633 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicaulis_sp_htcc2633_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicaulis_sp_htcc2633_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola granulosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_granulosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_granulosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parvularcula bermudensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parvularcula_bermudensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parvularcula_bermudensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter sp. MED193 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_sp_med193_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_sp_med193_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseovarius sp. 217 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseovarius_sp_217_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseovarius_sp_217_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibaca bermudensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibaca_bermudensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibaca_bermudensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. SKA58 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_ska58_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_ska58_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacteraceae bacterium HTCC2083 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacteraceae_bacterium_htcc2083_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacteraceae_bacterium_htcc2083_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maritimibacter alkaliphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maritimibacter_alkaliphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maritimibacter_alkaliphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas macleodii Deep nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_macleodii_deep_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_macleodii_deep_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrococcus mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrococcus_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrococcus_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychromonas sp. CNPT3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychromonas_sp_cnpt3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychromonas_sp_cnpt3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Congregibacter litoralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_congregibacter_litoralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_congregibacter_litoralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HTCC2207 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_htcc2207_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_htcc2207_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium angustum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_angustum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_angustum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sakei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sakei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sakei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mariprofundus ferrooxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mariprofundus_ferrooxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mariprofundus_ferrooxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING beta proteobacterium KB13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beta_proteobacterium_kb13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beta_proteobacterium_kb13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia hermsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_hermsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_hermsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia turicatae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_turicatae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_turicatae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia felis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_felis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_felis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus weihenstephanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_weihenstephanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_weihenstephanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus cytotoxicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_cytotoxicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_cytotoxicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus pumilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_pumilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_pumilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris BisA53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_bisa53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_bisa53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris BisB18 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_bisb18_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_bisb18_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris BisB5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_bisb5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_bisb5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris HaA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_haa2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_haa2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter daltonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_daltonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_daltonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas campestris vesicatoria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_campestris_vesicatoria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_campestris_vesicatoria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herpetosiphon aurantiacus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herpetosiphon_aurantiacus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herpetosiphon_aurantiacus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aliivibrio salmonicida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aliivibrio_salmonicida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aliivibrio_salmonicida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. RCC307 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_rcc307_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_rcc307_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. CC9902 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_cc9902_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_cc9902_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli K12 W3110 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_k12_w3110_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_k12_w3110_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas axonopodis phaseoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_axonopodis_phaseoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_axonopodis_phaseoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira crunogena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_crunogena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_crunogena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorothrix hollandica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorothrix_hollandica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorothrix_hollandica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis alaskensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_alaskensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_alaskensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nostoc sp. PCC7107 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nostoc_sp_pcc7107_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nostoc_sp_pcc7107_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella frigidimarina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_frigidimarina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_frigidimarina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium rufum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_rufum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_rufum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sulfidigenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sulfidigenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sulfidigenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Magnaporthe oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_magnaporthe_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_magnaporthe_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. WSM1743 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_wsm1743_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_wsm1743_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. WSM1253 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_wsm1253_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_wsm1253_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella putrefaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_putrefaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_putrefaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium luteolum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_luteolum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_luteolum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nonlabens sediminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nonlabens_sediminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nonlabens_sediminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus geothermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_geothermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_geothermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaplasma marginale Florida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaplasma_marginale_florida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaplasma_marginale_florida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. JA33Ab nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_ja33ab_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_ja33ab_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. JA23Ba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_ja23ba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_ja23ba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas simiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_simiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_simiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium linens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_linens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_linens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma wheat blue nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_wheat_blue_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_wheat_blue_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma aster yellows nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_aster_yellows_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_aster_yellows_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus thermophilus LMD9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_thermophilus_lmd9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_thermophilus_lmd9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azotobacter vinelandii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azotobacter_vinelandii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azotobacter_vinelandii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrobacter hamburgensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrobacter_hamburgensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrobacter_hamburgensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrobacter winogradskyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrobacter_winogradskyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrobacter_winogradskyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanospirillum hungatei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanospirillum_hungatei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanospirillum_hungatei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosococcus oceani nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosococcus_oceani_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosococcus_oceani_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosospira multiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosospira_multiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosospira_multiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella loihica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_loihica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_loihica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. JDR2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_jdr2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_jdr2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chloroflexus aurantiacus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chloroflexus_aurantiacus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chloroflexus_aurantiacus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus gasseri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_gasseri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_gasseri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelodictyon phaeoclathratiforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelodictyon_phaeoclathratiforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelodictyon_phaeoclathratiforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytophthora kernoviae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytophthora_kernoviae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytophthora_kernoviae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas axonopodis vasculorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_axonopodis_vasculorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_axonopodis_vasculorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella amazonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_amazonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_amazonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurimonas denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurimonas_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurimonas_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus amyloliquefaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_amyloliquefaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_amyloliquefaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia alni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_alni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_alni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus helveticus CNRZ32 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_helveticus_cnrz32_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_helveticus_cnrz32_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium breve nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_breve_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_breve_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chloroflexus aggregans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chloroflexus_aggregans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chloroflexus_aggregans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas haloplanktis TAC125 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_haloplanktis_tac125_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_haloplanktis_tac125_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudozyma hubeiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudozyma_hubeiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudozyma_hubeiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium crudilactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_crudilactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_crudilactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acaryochloris marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acaryochloris_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acaryochloris_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis jejuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_jejuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_jejuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrospira defluvii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrospira_defluvii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrospira_defluvii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfolobus acidocaldarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfolobus_acidocaldarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfolobus_acidocaldarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. Bge nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_bge_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_bge_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Simkania negevensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_simkania_negevensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_simkania_negevensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydophila pecorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydophila_pecorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydophila_pecorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia psittaci 6BC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_psittaci_6bc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_psittaci_6bc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium phaeobacteroides BS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_phaeobacteroides_bs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_phaeobacteroides_bs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium BAL199 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_bal199_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_bal199_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium drakei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_drakei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_drakei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus okhensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_okhensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_okhensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus fermentum IFO3956 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_fermentum_ifo3956_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_fermentum_ifo3956_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Finegoldia magna ATCC29328 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_finegoldia_magna_atcc29328_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_finegoldia_magna_atcc29328_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia tamurae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_tamurae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_tamurae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosomonas eutropha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosomonas_eutropha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosomonas_eutropha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter cryohalolentis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_cryohalolentis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_cryohalolentis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophomonas wolfei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophomonas_wolfei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophomonas_wolfei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophobacter fumaroxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophobacter_fumaroxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophobacter_fumaroxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. S23321 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_s23321_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_s23321_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HTCC1062 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_htcc1062_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_htcc1062_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia bellii RML369C nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_bellii_rml369c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_bellii_rml369c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyronema omphalodes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyronema_omphalodes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyronema_omphalodes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia sp. KTR9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_sp_ktr9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_sp_ktr9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelobacter carbinolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelobacter_carbinolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelobacter_carbinolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelobacter propionicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelobacter_propionicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelobacter_propionicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodoferax ferrireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodoferax_ferrireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodoferax_ferrireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia ambifaria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_ambifaria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_ambifaria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus succinogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_succinogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_succinogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanosphaera stadtmanae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanosphaera_stadtmanae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanosphaera_stadtmanae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacter pseudethanolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacter_pseudethanolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacter_pseudethanolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spathaspora passalidarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spathaspora_passalidarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spathaspora_passalidarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium chlorochromatii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_chlorochromatii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_chlorochromatii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia oklahomensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_oklahomensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_oklahomensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus saprophyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_saprophyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_saprophyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas atlantica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_atlantica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_atlantica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus sp. NA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_sp_na2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_sp_na2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sodalis glossinidius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sodalis_glossinidius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sodalis_glossinidius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planctomyces maris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planctomyces_maris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planctomyces_maris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio cholerae O395 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_cholerae_o395_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_cholerae_o395_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus coagulans 36D1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_coagulans_36d1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_coagulans_36d1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kutzneria sp. 744 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kutzneria_sp_744_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kutzneria_sp_744_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma hominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_hominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_hominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium etli CFN42 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_etli_cfn42_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_etli_cfn42_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronomonas pharaonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronomonas_pharaonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronomonas_pharaonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. LPU83 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_lpu83_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_lpu83_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacter sphaeroides ATCC17025 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacter_sphaeroides_atcc17025_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacter_sphaeroides_atcc17025_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. PRwf1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_prwf1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_prwf1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus reuteri 10023 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_reuteri_10023_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_reuteri_10023_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorhodospira halophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorhodospira_halophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorhodospira_halophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum reducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_reducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_reducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidiphilium cryptum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidiphilium_cryptum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidiphilium_cryptum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc citreum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_citreum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_citreum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus polymyxa E681 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_polymyxa_e681_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_polymyxa_e681_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hahella chejuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hahella_chejuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hahella_chejuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Akkermansia muciniphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_akkermansia_muciniphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_akkermansia_muciniphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia intermedia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_intermedia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_intermedia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia frederiksenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_frederiksenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_frederiksenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium gilvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_gilvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_gilvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium vanbaalenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_vanbaalenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_vanbaalenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkaliphilus oremlandii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkaliphilus_oremlandii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkaliphilus_oremlandii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter sp. AzwK3b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_sp_azwk3b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_sp_azwk3b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocella arvoryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocella_arvoryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocella_arvoryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter hydrocarbonoclasticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_hydrocarbonoclasticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_hydrocarbonoclasticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidothermus cellulolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidothermus_cellulolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidothermus_cellulolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor saccharolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_saccharolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_saccharolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida F1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_f1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_f1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyramidobacter piscolens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyramidobacter_piscolens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyramidobacter_piscolens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus delbrueckii 2038 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_delbrueckii_2038_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_delbrueckii_2038_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter jejuni 81176 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_jejuni_81176_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_jejuni_81176_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium tsurumiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_tsurumiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_tsurumiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonospora chokoriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonospora_chokoriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonospora_chokoriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Orientia tsutsugamushi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_orientia_tsutsugamushi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_orientia_tsutsugamushi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides dorei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_dorei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_dorei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychromonas ingrahamii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychromonas_ingrahamii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychromonas_ingrahamii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseiflexus sp. RS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseiflexus_sp_rs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseiflexus_sp_rs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnoclostridium phytofermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnoclostridium_phytofermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnoclostridium_phytofermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax sp. KKS102 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_sp_kks102_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_sp_kks102_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobiforma lacisalsi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobiforma_lacisalsi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobiforma_lacisalsi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus brevis NBRC100599 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_brevis_nbrc100599_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_brevis_nbrc100599_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces olindensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_olindensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_olindensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas oryzae PXO99A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_oryzae_pxo99a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_oryzae_pxo99a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella bacilliformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_bacilliformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_bacilliformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter concisus 13826 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_concisus_13826_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_concisus_13826_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter fetus 8240 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_fetus_8240_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_fetus_8240_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter hominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_hominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_hominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella avium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_avium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_avium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium sp. AT1b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_sp_at1b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_sp_at1b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium ulcerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_ulcerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_ulcerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium reichenbachii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_reichenbachii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_reichenbachii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli 536 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_536_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_536_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloquadratum walsbyi DSM16790 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloquadratum_walsbyi_dsm16790_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloquadratum_walsbyi_dsm16790_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lawsonia intracellularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lawsonia_intracellularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lawsonia_intracellularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endocarpon pusillum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endocarpon_pusillum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endocarpon_pusillum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaromonas naphthalenivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaromonas_naphthalenivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaromonas_naphthalenivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ramlibacter tataouinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ramlibacter_tataouinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ramlibacter_tataouinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. BCU110501 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_bcu110501_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_bcu110501_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis B6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_b6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_b6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium medicae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_medicae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_medicae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter sp. K31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_sp_k31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_sp_k31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas fuscans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_fuscans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_fuscans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phycicoccus jejuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phycicoccus_jejuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phycicoccus_jejuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacterales bacterium HTCC2255 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacterales_bacterium_htcc2255_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacterales_bacterium_htcc2255_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter butzleri RM4018 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_butzleri_rm4018_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_butzleri_rm4018_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanoculleus marisnigri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanoculleus_marisnigri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanoculleus_marisnigri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermofilum pendens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermofilum_pendens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermofilum_pendens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinispora tropica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinispora_tropica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinispora_tropica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelotomaculum thermopropionicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelotomaculum_thermopropionicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelotomaculum_thermopropionicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erwinia typographi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erwinia_typographi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erwinia_typographi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacter sp. SW2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacter_sp_sw2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacter_sp_sw2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola BCc nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_bcc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_bcc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pneumoniae D39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pneumoniae_d39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pneumoniae_d39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halothermothrix orenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halothermothrix_orenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halothermothrix_orenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rivularia sp. PCC7116 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rivularia_sp_pcc7116_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rivularia_sp_pcc7116_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Korarchaeum cryptofilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_korarchaeum_cryptofilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_korarchaeum_cryptofilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janthinobacterium sp. Marseille nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janthinobacterium_sp_marseille_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janthinobacterium_sp_marseille_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella tularensis holarctica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_tularensis_holarctica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_tularensis_holarctica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium johnsoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_johnsoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_johnsoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Teredinibacter turnerae T7901 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_teredinibacter_turnerae_t7901_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_teredinibacter_turnerae_t7901_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kocuria rhizophila DC2201 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kocuria_rhizophila_dc2201_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kocuria_rhizophila_dc2201_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stigmatella aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stigmatella_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stigmatella_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemmatimonas aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemmatimonas_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemmatimonas_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri A1501 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_a1501_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_a1501_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas albilineans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_albilineans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_albilineans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidithiobacillus ferrooxidans ATCC53993 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidithiobacillus_ferrooxidans_atcc53993_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidithiobacillus_ferrooxidans_atcc53993_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas hydrophila ATCC7966 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_hydrophila_atcc7966_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_hydrophila_atcc7966_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hydrogenobaculum sp. Y04AAS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hydrogenobaculum_sp_y04aas1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hydrogenobaculum_sp_y04aas1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachancea thermotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachancea_thermotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachancea_thermotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia eutropha H16 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_eutropha_h16_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_eutropha_h16_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fervidobacterium nodosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fervidobacterium_nodosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fervidobacterium_nodosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas salmonicida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_salmonicida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_salmonicida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucomicrobiae bacterium DG1235 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucomicrobiae_bacterium_dg1235_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucomicrobiae_bacterium_dg1235_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter acinonychis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_acinonychis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_acinonychis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella tribocorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_tribocorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_tribocorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseiflexus castenholzii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseiflexus_castenholzii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseiflexus_castenholzii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erythrobacter sp. JL475 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erythrobacter_sp_jl475_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erythrobacter_sp_jl475_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas oryzae oryzicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_oryzae_oryzicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_oryzae_oryzicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum islandicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_islandicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_islandicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas entomophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_entomophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_entomophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Labrenzia aggregata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_labrenzia_aggregata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_labrenzia_aggregata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermophagus xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermophagus_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermophagus_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria welshimeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_welshimeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_welshimeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium novyi NT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_novyi_nt_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_novyi_nt_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobacterium arcticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobacterium_arcticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobacterium_arcticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratiruptor sp. SB1552 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratiruptor_sp_sb1552_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratiruptor_sp_sb1552_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurovum sp. NBC371 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurovum_sp_nbc371_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurovum_sp_nbc371_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus brevis ATCC367 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_brevis_atcc367_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_brevis_atcc367_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Archaeoglobus sulfaticallidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_archaeoglobus_sulfaticallidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_archaeoglobus_sulfaticallidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cupriavidus sp. amp6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cupriavidus_sp_amp6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cupriavidus_sp_amp6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sagittula stellata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sagittula_stellata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sagittula_stellata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacteraceae bacterium HTCC2150 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacteraceae_bacterium_htcc2150_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacteraceae_bacterium_htcc2150_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algoriphagus machipongonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algoriphagus_machipongonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algoriphagus_machipongonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planktothrix agardhii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planktothrix_agardhii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planktothrix_agardhii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter sp. SK20926 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_sp_sk20926_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_sp_sk20926_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sanguinis SK36 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sanguinis_sk36_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sanguinis_sk36_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida W619 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_w619_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_w619_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia afzelii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_afzelii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_afzelii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus delbrueckii ATCC11842 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_delbrueckii_atcc11842_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_delbrueckii_atcc11842_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga petrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_petrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_petrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinocatenispora sera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinocatenispora_sera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinocatenispora_sera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stenotrophomonas maltophilia R5513 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stenotrophomonas_maltophilia_r5513_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stenotrophomonas_maltophilia_r5513_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosipho melanesiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosipho_melanesiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosipho_melanesiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ehrlichia sp. HF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ehrlichia_sp_hf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ehrlichia_sp_hf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinispora arenicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinispora_arenicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinispora_arenicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia phymatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_phymatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_phymatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulibacter bethesdensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulibacter_bethesdensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulibacter_bethesdensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis 05ZYH33 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_05zyh33_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_05zyh33_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kordia algicida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kordia_algicida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kordia_algicida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter sp. GAI101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_sp_gai101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_sp_gai101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter sp. CCS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_sp_ccs2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_sp_ccs2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseobacter litoralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseobacter_litoralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseobacter_litoralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter sp. BAL39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_sp_bal39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_sp_bal39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteria bacterium BAL38 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteria_bacterium_bal38_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteria_bacterium_bal38_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas sp. BAL3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_sp_bal3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_sp_bal3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteriales bacterium ALC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteriales_bacterium_alc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteriales_bacterium_alc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. CCY0110 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_ccy0110_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_ccy0110_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseovarius sp. TM1035 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseovarius_sp_tm1035_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseovarius_sp_tm1035_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HTCC5015 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_htcc5015_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_htcc5015_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Octadecabacter arcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_octadecabacter_arcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_octadecabacter_arcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaeobacter inhibens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaeobacter_inhibens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaeobacter_inhibens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus barophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_barophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_barophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanibulbus indolifex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanibulbus_indolifex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanibulbus_indolifex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plesiocystis pacifica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plesiocystis_pacifica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plesiocystis_pacifica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Octadecabacter antarcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_octadecabacter_antarcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_octadecabacter_antarcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verminephrobacter eiseniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verminephrobacter_eiseniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verminephrobacter_eiseniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia bellii OSU85389 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_bellii_osu85389_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_bellii_osu85389_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratireductor pacificus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratireductor_pacificus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratireductor_pacificus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas wittichii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_wittichii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_wittichii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella woodyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_woodyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_woodyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pestalotiopsis fici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pestalotiopsis_fici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pestalotiopsis_fici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia enterocolitica 8081 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_enterocolitica_8081_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_enterocolitica_8081_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum polymorphum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_polymorphum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_polymorphum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax borkumensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_borkumensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_borkumensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas crevioricanis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_crevioricanis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_crevioricanis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maricaulis maris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maricaulis_maris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maricaulis_maris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium cellulolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_cellulolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_cellulolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia multivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_multivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_multivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leguminosarum WSM2304 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leguminosarum_wsm2304_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leguminosarum_wsm2304_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beggiatoa alba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beggiatoa_alba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beggiatoa_alba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gallionella capsiferriformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gallionella_capsiferriformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gallionella_capsiferriformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptothrix cholodnii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptothrix_cholodnii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptothrix_cholodnii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. PCC7425 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_pcc7425_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_pcc7425_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beijerinckia indica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beijerinckia_indica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beijerinckia_indica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocapsa acidiphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocapsa_acidiphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocapsa_acidiphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocella silvestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocella_silvestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocella_silvestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachybacterium phenoliresistens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachybacterium_phenoliresistens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachybacterium_phenoliresistens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus carnosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_carnosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_carnosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sulfidiphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sulfidiphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sulfidiphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. K90mix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_k90mix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_k90mix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marmoricola aequoreus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marmoricola_aequoreus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marmoricola_aequoreus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 284 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_284_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_284_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium A2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_a2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_a2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium A4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_a4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_a4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax citrulli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_citrulli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_citrulli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldivirga maquilingensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldivirga_maquilingensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldivirga_maquilingensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus pseudofirmus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_pseudofirmus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_pseudofirmus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudobacteroides cellulosolvens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudobacteroides_cellulosolvens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudobacteroides_cellulosolvens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium bifidum NCIMB41171 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_bifidum_ncimb41171_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_bifidum_ncimb41171_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium elkanii USDA76 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_elkanii_usda76_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_elkanii_usda76_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia phytofirmans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_phytofirmans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_phytofirmans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Delftia acidovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_delftia_acidovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_delftia_acidovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella pealeana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_pealeana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_pealeana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dinoroseobacter shibae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dinoroseobacter_shibae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dinoroseobacter_shibae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leeuwenhoekiella blandensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leeuwenhoekiella_blandensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leeuwenhoekiella_blandensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter lovleyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_lovleyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_lovleyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metallosphaera sedula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metallosphaera_sedula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metallosphaera_sedula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylothermus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylothermus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylothermus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mendocina ymp nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mendocina_ymp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mendocina_ymp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia proteamaculans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_proteamaculans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_proteamaculans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter sp. 638 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_sp_638_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_sp_638_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Comamonas testosteroni KF1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_comamonas_testosteroni_kf1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_comamonas_testosteroni_kf1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinomonas sp. MWYL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinomonas_sp_mwyl1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinomonas_sp_mwyl1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amphimedon queenslandica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amphimedon_queenslandica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amphimedon_queenslandica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Terriglobus saanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_terriglobus_saanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_terriglobus_saanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium dentium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_dentium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_dentium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosinus carboxydivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosinus_carboxydivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosinus_carboxydivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium psychrophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_psychrophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_psychrophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia pickettii 12J nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_pickettii_12j_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_pickettii_12j_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kamptonema formosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kamptonema_formosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kamptonema_formosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus maripaludis C5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_maripaludis_c5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_maripaludis_c5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parvibaculum lavamentivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parvibaculum_lavamentivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parvibaculum_lavamentivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Petrotoga mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_petrotoga_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_petrotoga_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter bemidjiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_bemidjiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_bemidjiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaeromyxobacter sp. Fw1095 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaeromyxobacter_sp_fw1095_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaeromyxobacter_sp_fw1095_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus helveticus DPC4571 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_helveticus_dpc4571_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_helveticus_dpc4571_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharopolyspora erythraea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharopolyspora_erythraea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharopolyspora_erythraea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. m313 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_m313_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_m313_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus vannielii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_vannielii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_vannielii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrinema sp. J72 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrinema_sp_j72_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrinema_sp_j72_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xenorhabdus nematophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xenorhabdus_nematophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xenorhabdus_nematophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xenorhabdus bovienii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xenorhabdus_bovienii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xenorhabdus_bovienii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioidaceae bacterium Broad1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioidaceae_bacterium_broad1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioidaceae_bacterium_broad1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocorpusculum labreanum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocorpusculum_labreanum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocorpusculum_labreanum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum calidifontis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_calidifontis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_calidifontis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gramella forsetii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gramella_forsetii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gramella_forsetii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus obeum ATCC29174 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_obeum_atcc29174_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_obeum_atcc29174_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus torques ATCC27756 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_torques_atcc27756_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_torques_atcc27756_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dorea formicigenerans ATCC27755 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dorea_formicigenerans_atcc27755_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dorea_formicigenerans_atcc27755_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dorea longicatena DSM13814 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dorea_longicatena_dsm13814_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dorea_longicatena_dsm13814_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium ventriosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_ventriosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_ventriosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio piger nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_piger_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_piger_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parvimonas micra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parvimonas_micra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parvimonas_micra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces odontolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_odontolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_odontolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoflavonifractor capillosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoflavonifractor_capillosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoflavonifractor_capillosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium scindens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_scindens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_scindens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium hallii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_hallii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_hallii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus gnavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_gnavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_gnavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Subdoligranulum variabile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_subdoligranulum_variabile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_subdoligranulum_variabile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus callidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_callidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_callidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprococcus eutactus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprococcus_eutactus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprococcus_eutactus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides ovatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_ovatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_ovatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parabacteroides merdae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parabacteroides_merdae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parabacteroides_merdae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides uniformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_uniformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_uniformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Faecalibacterium prausnitzii A2165 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_faecalibacterium_prausnitzii_a2165_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_faecalibacterium_prausnitzii_a2165_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. L250 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_l250_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_l250_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerostipes caccae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerostipes_caccae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerostipes_caccae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hoeflea phototrophica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hoeflea_phototrophica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hoeflea_phototrophica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides caccae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_caccae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_caccae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium bolteae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_bolteae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_bolteae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia duttonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_duttonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_duttonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus sp. TRP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_sp_trp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_sp_trp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vesicomyosocius okutanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vesicomyosocius_okutanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vesicomyosocius_okutanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruthia magnifica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruthia_magnifica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruthia_magnifica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorubrum halophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorubrum_halophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorubrum_halophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodospirillum centenum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodospirillum_centenum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodospirillum_centenum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinopolyspora erythraea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinopolyspora_erythraea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinopolyspora_erythraea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyperthermus butylicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyperthermus_butylicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyperthermus_butylicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus pleuropneumoniae 5b L20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_pleuropneumoniae_5b_l20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_pleuropneumoniae_5b_l20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorubrum lacusprofundi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorubrum_lacusprofundi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorubrum_lacusprofundi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga lettingae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_lettingae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_lettingae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus lactis cremoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_lactis_cremoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_lactis_cremoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium extorquens PA1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_extorquens_pa1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_extorquens_pa1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus aeolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_aeolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_aeolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium tuberculosis H37Ra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_tuberculosis_h37ra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_tuberculosis_h37ra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus thermodenitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_thermodenitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_thermodenitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobrevibacter smithii ATCC35061 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobrevibacter_smithii_atcc35061_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobrevibacter_smithii_atcc35061_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microvirga lupini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microvirga_lupini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microvirga_lupini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylibium petroleiphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylibium_petroleiphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylibium_petroleiphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus garvieae Lg2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_garvieae_lg2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_garvieae_lg2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter rudis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_rudis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_rudis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Epilithonimonas lactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_epilithonimonas_lactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_epilithonimonas_lactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium luteum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_luteum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_luteum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella sediminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_sediminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_sediminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter sp. MIT016451 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_sp_mit016451_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_sp_mit016451_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomonas arsenitoxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomonas_arsenitoxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomonas_arsenitoxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. 446 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_446_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_446_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium radiotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_radiotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_radiotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus maripaludis C7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_maripaludis_c7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_maripaludis_c7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia rhamnosiphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_rhamnosiphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_rhamnosiphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium leptum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_leptum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_leptum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium spiroforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_spiroforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_spiroforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium dolichum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_dolichum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_dolichum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ammonifex degensii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ammonifex_degensii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ammonifex_degensii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dactylellina haptotyla nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dactylellina_haptotyla_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dactylellina_haptotyla_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Baudoinia compniacensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_baudoinia_compniacensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_baudoinia_compniacensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium kluyveri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_kluyveri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_kluyveri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas gingivalis ATCC33277 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_gingivalis_atcc33277_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_gingivalis_atcc33277_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kazachstania africana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kazachstania_africana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kazachstania_africana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neorickettsia risticii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neorickettsia_risticii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neorickettsia_risticii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides vulgatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_vulgatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_vulgatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parabacteroides distasonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parabacteroides_distasonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parabacteroides_distasonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces graevenitzii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_graevenitzii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_graevenitzii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria mucosa C102 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_mucosa_c102_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_mucosa_c102_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus hominis C80 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_hominis_c80_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_hominis_c80_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus capitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_capitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_capitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. C150 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_c150_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_c150_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Idiomarina salinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_idiomarina_salinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_idiomarina_salinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurihydrogenibium sp. YO3AOP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurihydrogenibium_sp_yo3aop1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurihydrogenibium_sp_yo3aop1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus jeojiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_jeojiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_jeojiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosopumilus maritimus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosopumilus_maritimus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosopumilus_maritimus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter oleivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_oleivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_oleivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azorhizobium caulinodans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azorhizobium_caulinodans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azorhizobium_caulinodans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfatibacillum alkenivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfatibacillum_alkenivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfatibacillum_alkenivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus selenitireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_selenitireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_selenitireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ochrobactrum anthropi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ochrobactrum_anthropi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ochrobactrum_anthropi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aciduliprofundum boonei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aciduliprofundum_boonei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aciduliprofundum_boonei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter sp. HTCC7211 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_sp_htcc7211_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_sp_htcc7211_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacterales bacterium Y4I nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacterales_bacterium_y4i_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacterales_bacterium_y4i_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruegeria sp. R11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruegeria_sp_r11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruegeria_sp_r11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. Chol1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_chol1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_chol1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium populi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_populi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_populi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma laidlawii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_laidlawii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_laidlawii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus coahuilensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_coahuilensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_coahuilensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter sp. M18 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_sp_m18_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_sp_m18_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacter sp. M21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacter_sp_m21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacter_sp_m21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter algicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_algicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_algicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolicicoccus subflavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolicicoccus_subflavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolicicoccus_subflavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinitoga piezophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinitoga_piezophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinitoga_piezophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces clavuligerus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_clavuligerus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_clavuligerus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. Cp53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_cp53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_cp53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clavibacter michiganensis NCPPB382 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clavibacter_michiganensis_ncppb382_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clavibacter_michiganensis_ncppb382_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum neutrophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_neutrophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_neutrophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus maripaludis C6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_maripaludis_c6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_maripaludis_c6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum NCTC2916 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_nctc2916_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_nctc2916_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes putredinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_putredinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_putredinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerofustis stercorihominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerofustis_stercorihominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerofustis_stercorihominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerotruncus colihominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerotruncus_colihominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerotruncus_colihominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Intestinibacter bartlettii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_intestinibacter_bartlettii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_intestinibacter_bartlettii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelatoclostridium ramosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelatoclostridium_ramosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelatoclostridium_ramosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Collinsella stercoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_collinsella_stercoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_collinsella_stercoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia valaisiana VS116 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_valaisiana_vs116_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_valaisiana_vs116_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinosynnema mirum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinosynnema_mirum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinosynnema_mirum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachybacterium faecium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachybacterium_faecium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachybacterium_faecium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas flavigena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_flavigena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_flavigena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis dassonvillei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_dassonvillei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_dassonvillei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sanguibacter keddieii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sanguibacter_keddieii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sanguibacter_keddieii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stackebrandtia nassauensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stackebrandtia_nassauensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stackebrandtia_nassauensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xylanimonas cellulosilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xylanimonas_cellulosilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xylanimonas_cellulosilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sorangium cellulosum So ce56 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sorangium_cellulosum_so_ce56_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sorangium_cellulosum_so_ce56_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microcystis aeruginosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microcystis_aeruginosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microcystis_aeruginosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides stercoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_stercoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_stercoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium profundi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_profundi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_profundi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phenylobacterium zucineum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phenylobacterium_zucineum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phenylobacterium_zucineum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amoebophilus asiaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amoebophilus_asiaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amoebophilus_asiaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Opitutus terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_opitutus_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_opitutus_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polynucleobacter necessarius STIR1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polynucleobacter_necessarius_stir1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polynucleobacter_necessarius_stir1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kitasatospora setae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kitasatospora_setae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kitasatospora_setae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia rickettsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_rickettsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_rickettsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium japonicum UT26S nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_japonicum_ut26s_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_japonicum_ut26s_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter chlorophenolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_chlorophenolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_chlorophenolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ignicoccus hospitalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ignicoccus_hospitalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ignicoccus_hospitalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas arboricola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_arboricola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_arboricola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola sp. HTCC2999 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_sp_htcc2999_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_sp_htcc2999_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanococcus voltae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanococcus_voltae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanococcus_voltae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanoregula boonei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanoregula_boonei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanoregula_boonei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. 7243FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_7243faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_7243faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. 31syn3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_31syn3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_31syn3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum animalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_animalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_animalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus sp. 5139BFAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_sp_5139bfaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_sp_5139bfaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synergistes sp. 31syn1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synergistes_sp_31syn1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synergistes_sp_31syn1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium 1747FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_1747faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_1747faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides fragilis 3112 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_fragilis_3112_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_fragilis_3112_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces albus J1074 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_albus_j1074_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_albus_j1074_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces pristinaespiralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_pristinaespiralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_pristinaespiralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natranaerobius thermophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natranaerobius_thermophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natranaerobius_thermophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Macrococcus caseolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_macrococcus_caseolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_macrococcus_caseolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella halifaxensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_halifaxensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_halifaxensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cloacimonas acidaminovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cloacimonas_acidaminovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cloacimonas_acidaminovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrospira platensis C1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrospira_platensis_c1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrospira_platensis_c1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium nodulans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_nodulans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_nodulans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sviceus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sviceus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sviceus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micrococcus luteus NCTC 2665 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micrococcus_luteus_nctc_2665_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micrococcus_luteus_nctc_2665_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. Mg1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_mg1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_mg1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erwinia tasmaniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erwinia_tasmaniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erwinia_tasmaniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HTCC8051 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_htcc8051_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_htcc8051_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. Ver3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_ver3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_ver3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseoflavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseoflavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseoflavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacteraceae bacterium KLH11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacteraceae_bacterium_klh11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacteraceae_bacterium_klh11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus gordonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_gordonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_gordonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia kroppenstedtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_kroppenstedtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_kroppenstedtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli BL21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_bl21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_bl21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermobispora bispora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermobispora_bispora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermobispora_bispora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cryptobacterium curtum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cryptobacterium_curtum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cryptobacterium_curtum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dethiosulfovibrio peptidovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dethiosulfovibrio_peptidovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dethiosulfovibrio_peptidovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halogeometricum borinquense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halogeometricum_borinquense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halogeometricum_borinquense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Conexibacter woesei DSM14684 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_conexibacter_woesei_dsm14684_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_conexibacter_woesei_dsm14684_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter sp. 302 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_sp_302_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_sp_302_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprobacillus sp. 291 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprobacillus_sp_291_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprobacillus_sp_291_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum vincentii 3136A2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_vincentii_3136a2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_vincentii_3136a2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum vincentii 4113 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_vincentii_4113_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_vincentii_4113_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. 2136FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_2136faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_2136faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderiales bacterium 1147 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderiales_bacterium_1147_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderiales_bacterium_1147_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium gonidiaformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_gonidiaformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_gonidiaformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium mortiferum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_mortiferum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_mortiferum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium ulcerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_ulcerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_ulcerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium varium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_varium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_varium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides coprocola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_coprocola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_coprocola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cladophialophora yegresii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cladophialophora_yegresii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cladophialophora_yegresii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus sp. WCH70 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_sp_wch70_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_sp_wch70_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermomonospora curvata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermomonospora_curvata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermomonospora_curvata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Beutenbergia cavernae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beutenbergia_cavernae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beutenbergia_cavernae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dyadobacter fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dyadobacter_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dyadobacter_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Slackia heliotrinireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_slackia_heliotrinireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_slackia_heliotrinireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jonesia denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jonesia_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jonesia_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora viridis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_viridis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_viridis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides intestinalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_intestinalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_intestinalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia stuartii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_stuartii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_stuartii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus lactaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_lactaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_lactaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteus penneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteus_penneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteus_penneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratireductor basaltis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratireductor_basaltis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratireductor_basaltis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosococcus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosococcus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosococcus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum gloeosporioides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_gloeosporioides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_gloeosporioides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blautia hydrogenotrophica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blautia_hydrogenotrophica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blautia_hydrogenotrophica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter arsenitoxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_arsenitoxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_arsenitoxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri TS44 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_ts44_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_ts44_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Modestobacter marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_modestobacter_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_modestobacter_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulforudis audaxviator nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulforudis_audaxviator_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulforudis_audaxviator_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucomicrobia bacterium LP2A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucomicrobia_bacterium_lp2a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucomicrobia_bacterium_lp2a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marvinbryantia formatexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marvinbryantia_formatexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marvinbryantia_formatexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kytococcus sedentarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kytococcus_sedentarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kytococcus_sedentarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nakamurella multipartita nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nakamurella_multipartita_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nakamurella_multipartita_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptosporangium roseum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptosporangium_roseum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptosporangium_roseum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catenulispora acidiphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catenulispora_acidiphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catenulispora_acidiphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerobacter thermophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerobacter_thermophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerobacter_thermophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kribbella flavida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kribbella_flavida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kribbella_flavida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella parvula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_parvula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_parvula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eggerthella lenta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eggerthella_lenta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eggerthella_lenta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylacidiphilum infernorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylacidiphilum_infernorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylacidiphilum_infernorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli ATCC8739 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_atcc8739_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_atcc8739_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus canis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_canis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_canis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Galeopterus variegatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_galeopterus_variegatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_galeopterus_variegatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides finegoldii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_finegoldii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_finegoldii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides eggerthii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_eggerthii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_eggerthii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides pectinophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_pectinophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_pectinophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myxococcus fulvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myxococcus_fulvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myxococcus_fulvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides plebeius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_plebeius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_plebeius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosipho africanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosipho_africanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosipho_africanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella philomiragia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_philomiragia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_philomiragia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelosinus sp. UFO1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelosinus_sp_ufo1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelosinus_sp_ufo1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ktedonobacter racemifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ktedonobacter_racemifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ktedonobacter_racemifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomicrobium mukohataei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomicrobium_mukohataei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomicrobium_mukohataei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfohalobium retbaense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfohalobium_retbaense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfohalobium_retbaense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum acetoxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_acetoxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_acetoxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter heparinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_heparinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_heparinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chitinophaga pinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chitinophaga_pinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chitinophaga_pinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium intracellulare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_intracellulare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_intracellulare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteria bacterium MS0242A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteria_bacterium_ms0242a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteria_bacterium_ms0242a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Puniceispirillum marinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_puniceispirillum_marinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_puniceispirillum_marinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria lactamica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_lactamica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_lactamica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moorea producens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moorea_producens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moorea_producens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurococcus kamchatkensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurococcus_kamchatkensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurococcus_kamchatkensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium hispalense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_hispalense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_hispalense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus flavithermus WK1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_flavithermus_wk1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_flavithermus_wk1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium etli CIAT652 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_etli_ciat652_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_etli_ciat652_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinomonas posidonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinomonas_posidonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinomonas_posidonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium alamii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_alamii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_alamii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola arctica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_arctica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_arctica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. TB15 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_tb15_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_tb15_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. TB23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_tb23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_tb23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thauera sp. 63 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thauera_sp_63_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thauera_sp_63_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chthoniobacter flavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chthoniobacter_flavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chthoniobacter_flavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanothece sp. PCC7822 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanothece_sp_pcc7822_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanothece_sp_pcc7822_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellvibrio japonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellvibrio_japonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellvibrio_japonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia spielmanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_spielmanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_spielmanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Heliobacterium modesticaldum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_heliobacterium_modesticaldum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_heliobacterium_modesticaldum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus aquaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_aquaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_aquaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces avicenniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_avicenniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_avicenniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tyzzerella nexilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tyzzerella_nexilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tyzzerella_nexilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium hiranonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_hiranonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_hiranonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mitsuokella multacida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mitsuokella_multacida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mitsuokella_multacida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia rustigianii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_rustigianii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_rustigianii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter youngae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_youngae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_youngae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citreicella sp. SE45 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citreicella_sp_se45_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citreicella_sp_se45_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haliangium ochraceum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haliangium_ochraceum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haliangium_ochraceum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia albertii TW07627 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_albertii_tw07627_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_albertii_tw07627_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eggerthella sp. YY7918 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eggerthella_sp_yy7918_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eggerthella_sp_yy7918_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirosoma linguale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirosoma_linguale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirosoma_linguale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium urealyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_urealyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_urealyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jejuia pallidilutea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jejuia_pallidilutea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jejuia_pallidilutea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus ruber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_ruber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_ruber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oligotropha carboxidovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oligotropha_carboxidovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oligotropha_carboxidovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rheinheimera sp. A13L nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rheinheimera_sp_a13l_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rheinheimera_sp_a13l_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter segnis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_segnis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_segnis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetivibrio cellulolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetivibrio_cellulolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetivibrio_cellulolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter sp. V48 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_sp_v48_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_sp_v48_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldisericum exile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldisericum_exile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldisericum_exile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanimonas sp. GK1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanimonas_sp_gk1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanimonas_sp_gk1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia coli K12 MG1655 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_coli_k12_mg1655_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_coli_k12_mg1655_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus buchneri NRRLB30929 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_buchneri_nrrlb30929_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_buchneri_nrrlb30929_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio crossotus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_crossotus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_crossotus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azobacteroides pseudotrichonymphae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azobacteroides_pseudotrichonymphae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azobacteroides_pseudotrichonymphae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma crocodyli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_crocodyli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_crocodyli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes missouriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_missouriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_missouriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Riesia pediculicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_riesia_pediculicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_riesia_pediculicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium eligens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_eligens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_eligens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio proteoclasticus B316 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_proteoclasticus_b316_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_proteoclasticus_b316_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dictyoglomus turgidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dictyoglomus_turgidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dictyoglomus_turgidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobaculum parvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobaculum_parvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobaculum_parvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chloroherpeton thalassium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chloroherpeton_thalassium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chloroherpeton_thalassium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. aB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_ab_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_ab_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citromicrobium sp. JLT1363 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citromicrobium_sp_jlt1363_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citromicrobium_sp_jlt1363_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium angulatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_angulatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_angulatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Holdemanella biformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_holdemanella_biformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_holdemanella_biformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodothermus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodothermus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodothermus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptobacillus moniliformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptobacillus_moniliformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptobacillus_moniliformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorhabdus utahensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorhabdus_utahensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorhabdus_utahensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ectothiorhodospira sp. PHS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ectothiorhodospira_sp_phs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ectothiorhodospira_sp_phs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NIPH973 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_niph973_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_niph973_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia alcalifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_alcalifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_alcalifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia rettgeri DSM1131 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_rettgeri_dsm1131_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_rettgeri_dsm1131_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Collinsella intestinalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_collinsella_intestinalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_collinsella_intestinalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia bissettii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_bissettii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_bissettii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanosphaerula palustris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanosphaerula_palustris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanosphaerula_palustris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kosmotoga olearia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kosmotoga_olearia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kosmotoga_olearia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium parvulum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_parvulum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_parvulum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tsukamurella paurometabola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tsukamurella_paurometabola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tsukamurella_paurometabola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga ochracea DSM7271 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_ochracea_dsm7271_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_ochracea_dsm7271_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus acidocaldarius DSM446 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_acidocaldarius_dsm446_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_acidocaldarius_dsm446_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces timonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_timonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_timonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor bescii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_bescii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_bescii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planctomyces limnophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planctomyces_limnophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planctomyces_limnophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas caeni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_caeni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_caeni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Accumulibacter phosphatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_accumulibacter_phosphatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_accumulibacter_phosphatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stenotrophomonas maltophilia K279a nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stenotrophomonas_maltophilia_k279a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stenotrophomonas_maltophilia_k279a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Denitrovibrio acetiphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_denitrovibrio_acetiphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_denitrovibrio_acetiphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kangiella koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kangiella_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kangiella_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia buccalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_buccalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_buccalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloferax mediterranei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloferax_mediterranei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloferax_mediterranei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanothermococcus thermolithotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanothermococcus_thermolithotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanothermococcus_thermolithotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus onnurineus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_onnurineus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_onnurineus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio desulfuricans ATCC27774 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_desulfuricans_atcc27774_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_desulfuricans_atcc27774_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. ATCC27244 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_atcc27244_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_atcc27244_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces coleocanis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_coleocanis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_coleocanis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces urogenitalis DSM15434 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_urogenitalis_dsm15434_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_urogenitalis_dsm15434_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus lactolyticus ATCC51172 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_lactolyticus_atcc51172_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_lactolyticus_atcc51172_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus tetradius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_tetradius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_tetradius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium vaginae DSM15829 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_vaginae_dsm15829_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_vaginae_dsm15829_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium gleum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_gleum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_gleum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium accolens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_accolens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_accolens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium lipophiloflavum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_lipophiloflavum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_lipophiloflavum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium pseudogenitalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_pseudogenitalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_pseudogenitalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium striatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_striatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_striatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Finegoldia magna ATCC53516 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_finegoldia_magna_atcc53516_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_finegoldia_magna_atcc53516_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus antri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_antri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_antri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus buchneri ATCC11577 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_buchneri_atcc11577_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_buchneri_atcc11577_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus ultunensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_ultunensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_ultunensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria grayi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_grayi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_grayi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium parascrofulaceum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_parascrofulaceum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_parascrofulaceum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium spiritivorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_spiritivorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_spiritivorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus caprae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_caprae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_caprae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus equinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_equinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_equinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfomicrobium baculatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfomicrobium_baculatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfomicrobium_baculatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum deleyianum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_deleyianum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_deleyianum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermanaerovibrio acidaminovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermanaerovibrio_acidaminovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermanaerovibrio_acidaminovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermobaculum terrenum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermobaculum_terrenum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermobaculum_terrenum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidimicrobium ferrooxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidimicrobium_ferrooxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidimicrobium_ferrooxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus prevotii DSM20548 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_prevotii_dsm20548_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_prevotii_dsm20548_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sebaldella termitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sebaldella_termitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sebaldella_termitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio salexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_salexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_salexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachyspira murdochii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachyspira_murdochii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachyspira_murdochii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geodermatophilus obscurus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geodermatophilus_obscurus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geodermatophilus_obscurus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia bronchialis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_bronchialis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_bronchialis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus silvanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_silvanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_silvanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia aldovae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_aldovae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_aldovae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteus mirabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteus_mirabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteus_mirabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus yayanosii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_yayanosii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_yayanosii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thecamonas trahens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thecamonas_trahens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thecamonas_trahens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodoluna lacicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodoluna_lacicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodoluna_lacicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pirellula staleyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pirellula_staleyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pirellula_staleyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteriaceae bacterium 351910 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteriaceae_bacterium_351910_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteriaceae_bacterium_351910_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cylindrospermopsis raciborskii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cylindrospermopsis_raciborskii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cylindrospermopsis_raciborskii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Raphidiopsis brookii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_raphidiopsis_brookii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_raphidiopsis_brookii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax ebreus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_ebreus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_ebreus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium opportunistum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_opportunistum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_opportunistum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium carboxidivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_carboxidivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_carboxidivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum A2 Kyoto nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_a2_kyoto_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_a2_kyoto_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum E1 BoNT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_e1_bont_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_e1_bont_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blautia hansenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blautia_hansenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blautia_hansenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella copri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_copri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_copri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium methylpentosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_methylpentosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_methylpentosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Liberibacter asiaticus psy62 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_liberibacter_asiaticus_psy62_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_liberibacter_asiaticus_psy62_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter canadensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_canadensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_canadensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter cinaedi CCUG18818 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_cinaedi_ccug18818_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_cinaedi_ccug18818_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pullorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pullorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pullorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloterrigena turkmenica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloterrigena_turkmenica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloterrigena_turkmenica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes subtropicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_subtropicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_subtropicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Variovorax paradoxus S110 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_variovorax_paradoxus_s110_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_variovorax_paradoxus_s110_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus casei BL23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_casei_bl23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_casei_bl23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING beta proteobacterium CB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_beta_proteobacterium_cb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_beta_proteobacterium_cb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium arbusti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_arbusti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_arbusti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. AKL11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_akl11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_akl11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALJ24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alj24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alj24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus megaterium QM B1551 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_megaterium_qm_b1551_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_megaterium_qm_b1551_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema primitia ZAS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_primitia_zas2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_primitia_zas2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema azotonutricium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_azotonutricium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_azotonutricium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Holdemania filiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_holdemania_filiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_holdemania_filiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium celatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_celatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_celatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria cinerea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_cinerea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_cinerea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria flavescens NRL30031H210 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_flavescens_nrl30031h210_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_flavescens_nrl30031h210_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria mucosa ATCC25996 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_mucosa_atcc25996_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_mucosa_atcc25996_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria polysaccharea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_polysaccharea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_polysaccharea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria subflava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_subflava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_subflava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Filifactor alocis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_filifactor_alocis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_filifactor_alocis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella haemolysans ATCC10379 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_haemolysans_atcc10379_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_haemolysans_atcc10379_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sputigena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sputigena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sputigena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella dispar nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_dispar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_dispar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eikenella corrodens ATCC23834 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eikenella_corrodens_atcc23834_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eikenella_corrodens_atcc23834_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium periodonticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_periodonticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_periodonticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus deserti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_deserti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_deserti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides coprophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_coprophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_coprophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium pseudocatenulatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_pseudocatenulatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_pseudocatenulatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria sicca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_sicca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_sicca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hydrogenobaculum sp. HO nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hydrogenobaculum_sp_ho_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hydrogenobaculum_sp_ho_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium vulneris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_vulneris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_vulneris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrialba magadii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrialba_magadii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrialba_magadii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium aurimucosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_aurimucosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_aurimucosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium glucuronolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_glucuronolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_glucuronolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mobiluncus curtisii ATCC43063 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mobiluncus_curtisii_atcc43063_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mobiluncus_curtisii_atcc43063_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ferrimonas balearica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ferrimonas_balearica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ferrimonas_balearica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nostoc azollae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nostoc_azollae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nostoc_azollae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hirschia maritima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hirschia_maritima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hirschia_maritima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ponticaulis koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ponticaulis_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ponticaulis_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelotrichaceae bacterium 5254FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelotrichaceae_bacterium_5254faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelotrichaceae_bacterium_5254faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcaceae bacterium D16 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcaceae_bacterium_d16_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcaceae_bacterium_d16_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cryptococcus gattii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cryptococcus_gattii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cryptococcus_gattii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium animalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_animalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_animalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalogenimonas lykanthroporepellens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalogenimonas_lykanthroporepellens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalogenimonas_lykanthroporepellens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella bivia JCVIHMP010 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_bivia_jcvihmp010_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_bivia_jcvihmp010_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella melaninogenica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_melaninogenica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_melaninogenica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas endodontalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_endodontalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_endodontalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sputigena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sputigena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sputigena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga gingivalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_gingivalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_gingivalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium rimae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_rimae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_rimae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium amycolatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_amycolatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_amycolatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium matruchotii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_matruchotii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_matruchotii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enhydrobacter aerosaccus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enhydrobacter_aerosaccus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enhydrobacter_aerosaccus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter rectus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_rectus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_rectus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter showae RM3277 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_showae_rm3277_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_showae_rm3277_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter gracilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_gracilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_gracilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cobetia crustatorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cobetia_crustatorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cobetia_crustatorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium hylemonae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_hylemonae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_hylemonae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorella variabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorella_variabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorella_variabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosediminibacter oceani nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosediminibacter_oceani_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosediminibacter_oceani_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dethiobacter alkaliphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dethiobacter_alkaliphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dethiobacter_alkaliphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zymomonas mobilis ATCC10988 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zymomonas_mobilis_atcc10988_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zymomonas_mobilis_atcc10988_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Galbibacter marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_galbibacter_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_galbibacter_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halothiobacillus neapolitanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halothiobacillus_neapolitanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halothiobacillus_neapolitanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfonatronospira thiodismutans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfonatronospira_thiodismutans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfonatronospira_thiodismutans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium sp. Rr 217 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_sp_rr_217_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_sp_rr_217_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. D5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_d5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_d5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium necrophorum D12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_necrophorum_d12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_necrophorum_d12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter winghamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_winghamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_winghamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oxalobacter formigenes HOxBLS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oxalobacter_formigenes_hoxbls_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oxalobacter_formigenes_hoxbls_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oxalobacter formigenes OXCC13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oxalobacter_formigenes_oxcc13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oxalobacter_formigenes_oxcc13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus reuteri DSM20016 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_reuteri_dsm20016_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_reuteri_dsm20016_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Laribacter hongkongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_laribacter_hongkongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_laribacter_hongkongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium kansasii ATCC12478 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_kansasii_atcc12478_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_kansasii_atcc12478_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium piperi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_piperi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_piperi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lentibacillus jeotgali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lentibacillus_jeotgali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lentibacillus_jeotgali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium doosanense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_doosanense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_doosanense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas sp. AE122 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_sp_ae122_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_sp_ae122_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomadura flavalba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomadura_flavalba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomadura_flavalba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus hydrogenalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_hydrogenalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_hydrogenalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium gallicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_gallicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_gallicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya zeae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_zeae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_zeae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium carotovorum PC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_carotovorum_pc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_carotovorum_pc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium wasabiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_wasabiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_wasabiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amphibacillus jilinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amphibacillus_jilinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amphibacillus_jilinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kyrpidia tusciae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kyrpidia_tusciae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kyrpidia_tusciae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces viscosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_viscosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_viscosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella haemolysans M341 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_haemolysans_m341_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_haemolysans_m341_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella morbillorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_morbillorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_morbillorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella sanguinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_sanguinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_sanguinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oris C735 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oris_c735_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oris_c735_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. C561 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_c561_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_c561_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. M143 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_m143_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_m143_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. M334 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_m334_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_m334_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurimonas autotrophica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurimonas_autotrophica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurimonas_autotrophica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bilophila wadsworthia 316 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bilophila_wadsworthia_316_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bilophila_wadsworthia_316_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geoglobus acetivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geoglobus_acetivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geoglobus_acetivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachyspira hyodysenteriae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachyspira_hyodysenteriae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachyspira_hyodysenteriae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Luminiphilus syltensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_luminiphilus_syltensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_luminiphilus_syltensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ureaplasma urealyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ureaplasma_urealyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ureaplasma_urealyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus gallinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_gallinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_gallinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus casseliflavus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_casseliflavus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_casseliflavus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus faecium C68 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_faecium_c68_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_faecium_c68_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces ghanaensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_ghanaensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_ghanaensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium NOR53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_nor53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_nor53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium catenulatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_catenulatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_catenulatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metarhizium robertsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metarhizium_robertsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metarhizium_robertsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus rhamnosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_rhamnosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_rhamnosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella pertussis 18323 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_pertussis_18323_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_pertussis_18323_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya sp. NCPPB569 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_sp_ncppb569_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_sp_ncppb569_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidaminococcus intestini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidaminococcus_intestini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidaminococcus_intestini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia symbiotica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_symbiotica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_symbiotica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis potens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_potens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_potens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolbachia sp. Culex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolbachia_sp_culex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolbachia_sp_culex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fodinicurvata sediminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fodinicurvata_sediminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fodinicurvata_sediminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fodinicurvata fenggangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fodinicurvata_fenggangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fodinicurvata_fenggangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sedimentitalea nanhaiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sedimentitalea_nanhaiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sedimentitalea_nanhaiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hamiltonella defensa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hamiltonella_defensa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hamiltonella_defensa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Allochromatium vinosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_allochromatium_vinosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_allochromatium_vinosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vulcanisaeta distributa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vulcanisaeta_distributa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vulcanisaeta_distributa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halanaerobium praevalens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halanaerobium_praevalens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halanaerobium_praevalens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter nitrofigilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_nitrofigilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_nitrofigilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ilyobacter polytropus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ilyobacter_polytropus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ilyobacter_polytropus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Archaeoglobus profundus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_archaeoglobus_profundus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_archaeoglobus_profundus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminobacterium colombiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminobacterium_colombiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminobacterium_colombiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium cellulovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_cellulovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_cellulovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocaldococcus infernus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocaldococcus_infernus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocaldococcus_infernus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocaldococcus fervens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocaldococcus_fervens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocaldococcus_fervens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis excentricus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_excentricus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_excentricus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio magneticus RS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_magneticus_rs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_magneticus_rs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta smaragdinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_smaragdinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_smaragdinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella sp. TX077308 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_sp_tx077308_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_sp_tx077308_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetohalobium arabaticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetohalobium_arabaticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetohalobium_arabaticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus gaemokensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_gaemokensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_gaemokensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus manliponensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_manliponensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_manliponensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaplasma centrale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaplasma_centrale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaplasma_centrale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas zhanjiangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_zhanjiangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_zhanjiangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Isosphaera pallida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_isosphaera_pallida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_isosphaera_pallida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. RUH2624 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_ruh2624_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_ruh2624_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter johnsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_johnsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_johnsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter lwoffii SH145 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_lwoffii_sh145_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_lwoffii_sh145_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter radioresistens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_radioresistens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_radioresistens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroidetes F0058 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroidetes_f0058_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroidetes_f0058_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae F0167 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_f0167_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_f0167_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus coleohominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_coleohominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_coleohominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus jensenii 1153CHN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_jensenii_1153chn_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_jensenii_1153chn_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus jensenii 272CHN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_jensenii_272chn_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_jensenii_272chn_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus sp. F0131 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_sp_f0131_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_sp_f0131_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. F0108 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_f0108_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_f0108_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio tasmaniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_tasmaniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_tasmaniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocaldococcus vulcanius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocaldococcus_vulcanius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocaldococcus_vulcanius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zymomonas mobilis pomaceae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zymomonas_mobilis_pomaceae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zymomonas_mobilis_pomaceae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya dadantii Ech703 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_dadantii_ech703_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_dadantii_ech703_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacterium thermosaccharolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacterium_thermosaccharolyticum_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_thermoanaerobacterium_thermosaccharolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacter italicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacter_italicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacter_italicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sideroxydans lithotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sideroxydans_lithotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sideroxydans_lithotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermovirga lienii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermovirga_lienii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermovirga_lienii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hirschia baltica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hirschia_baltica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hirschia_baltica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubidibacter lacunae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubidibacter_lacunae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubidibacter_lacunae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylovorus glucosetrophus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylovorus_glucosetrophus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylovorus_glucosetrophus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomicrobium denitrificans ATCC51888 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomicrobium_denitrificans_atcc51888_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomicrobium_denitrificans_atcc51888_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylotenera mobilis JLW8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylotenera_mobilis_jlw8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylotenera_mobilis_jlw8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coraliomargarita akajimensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coraliomargarita_akajimensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coraliomargarita_akajimensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminomonas paucivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminomonas_paucivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminomonas_paucivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mobiluncus curtisii ATCC35241 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mobiluncus_curtisii_atcc35241_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mobiluncus_curtisii_atcc35241_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mobiluncus mulieris ATCC35243 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mobiluncus_mulieris_atcc35243_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mobiluncus_mulieris_atcc35243_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK321 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk321_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk321_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK564 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk564_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk564_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK597 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk597_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk597_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseburia hominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseburia_hominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseburia_hominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. KORDI49 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_kordi49_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_kordi49_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. KORDI52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_kordi52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_kordi52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella bergensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_bergensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_bergensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas noxia ATCC43541 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_noxia_atcc43541_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_noxia_atcc43541_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella paramesenteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_paramesenteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_paramesenteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus amylolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_amylolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_amylolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium genitalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_genitalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_genitalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium mcbrellneri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_mcbrellneri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_mcbrellneri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromicrobium marinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromicrobium_marinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromicrobium_marinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides sp. D20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_sp_d20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_sp_d20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus manasiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_manasiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_manasiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Terribacillus aidingensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_terribacillus_aidingensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_terribacillus_aidingensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas chlororaphis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_chlororaphis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_chlororaphis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium papyrosolvens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_papyrosolvens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_papyrosolvens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizophagus irregularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizophagus_irregularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizophagus_irregularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kazachstania naganishii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kazachstania_naganishii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kazachstania_naganishii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas naejangsanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_naejangsanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_naejangsanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurivibrio alkaliphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurivibrio_alkaliphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurivibrio_alkaliphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas australica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_australica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_australica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ferroglobus placidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ferroglobus_placidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ferroglobus_placidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya dadantii Ech586 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_dadantii_ech586_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_dadantii_ech586_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas fimi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_fimi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_fimi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidaminococcus fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidaminococcus_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidaminococcus_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylothermus hellenicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylothermus_hellenicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylothermus_hellenicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus minor 202 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_minor_202_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_minor_202_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. SPB78 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_spb78_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_spb78_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. AA4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_aa4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_aa4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces viridochromogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_viridochromogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_viridochromogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces pratensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_pratensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_pratensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Abiotrophia defectiva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_abiotrophia_defectiva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_abiotrophia_defectiva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerobaculum hydrogeniformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerobaculum_hydrogeniformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerobaculum_hydrogeniformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catonella morbi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catonella_morbi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catonella_morbi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum D 1873 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_d_1873_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_d_1873_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dialister invisus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dialister_invisus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dialister_invisus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nonlabens dokdonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nonlabens_dokdonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nonlabens_dokdonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium saphenum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_saphenum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_saphenum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. At9b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_at9b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_at9b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. Sc1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_sc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_sc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus gammatolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_gammatolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_gammatolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanoregula formicica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanoregula_formicica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanoregula_formicica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellvibrio gilvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellvibrio_gilvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellvibrio_gilvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopirellula sp. SWK7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopirellula_sp_swk7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopirellula_sp_swk7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tolumonas auensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tolumonas_auensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tolumonas_auensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylosinus trichosporium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylosinus_trichosporium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylosinus_trichosporium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Variovorax paradoxus EPS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_variovorax_paradoxus_eps_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_variovorax_paradoxus_eps_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. A3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_a3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_a3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio fructosivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_fructosivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_fructosivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. U5L nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_u5l_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_u5l_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicycliphilus denitrificans BC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicycliphilus_denitrificans_bc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicycliphilus_denitrificans_bc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicycliphilus denitrificans K601 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicycliphilus_denitrificans_k601_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicycliphilus_denitrificans_k601_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcus stomatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcus_stomatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcus_stomatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus warneri L37603 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_warneri_l37603_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_warneri_l37603_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria flavescens SK114 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_flavescens_sk114_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_flavescens_sk114_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia goodfellowii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_goodfellowii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_goodfellowii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema vincentii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_vincentii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_vincentii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas uenonis 603 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_uenonis_603_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_uenonis_603_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mobiluncus mulieris 281 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mobiluncus_mulieris_281_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mobiluncus_mulieris_281_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcus anaerobius 653L nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcus_anaerobius_653l_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcus_anaerobius_653l_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus lacrimalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_lacrimalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_lacrimalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brenneria sp. EniD312 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brenneria_sp_enid312_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brenneria_sp_enid312_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nautilia profundicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nautilia_profundicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nautilia_profundicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. BPLAN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_bplan_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_bplan_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus rufus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_rufus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_rufus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus sibiricus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_sibiricus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_sibiricus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor obsidiansis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_obsidiansis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_obsidiansis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. F0262 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_f0262_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_f0262_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hydrogenobacter thermophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hydrogenobacter_thermophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hydrogenobacter_thermophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium saccharolyticum WM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_saccharolyticum_wm1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_saccharolyticum_wm1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter bilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_bilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_bilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodoferax saidenbachensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodoferax_saidenbachensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodoferax_saidenbachensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenibacter algicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenibacter_algicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenibacter_algicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio splendidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_splendidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_splendidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. F0295 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_f0295_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_f0295_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina agarilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_agarilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_agarilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. D14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_d14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_d14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseburia inulinivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseburia_inulinivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseburia_inulinivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocystis sp. ATCC49242 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocystis_sp_atcc49242_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocystis_sp_atcc49242_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulicatella elegans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulicatella_elegans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulicatella_elegans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia glumae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_glumae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_glumae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella tannerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_tannerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_tannerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shuttleworthia satelles nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shuttleworthia_satelles_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shuttleworthia_satelles_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter nanhaiticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_nanhaiticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_nanhaiticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phascolarctobacterium succinatutens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phascolarctobacterium_succinatutens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phascolarctobacterium_succinatutens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium sp. SYK6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_sp_syk6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_sp_syk6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae maculicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_maculicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_maculicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus hominis SK119 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_hominis_sk119_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_hominis_sk119_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. Mn802worker nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_mn802worker_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_mn802worker_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shimwellia blattae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shimwellia_blattae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shimwellia_blattae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiorhodovibrio sp. 970 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiorhodovibrio_sp_970_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiorhodovibrio_sp_970_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lutibaculum baratangense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lutibaculum_baratangense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lutibaculum_baratangense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium butyricum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_butyricum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_butyricum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor hydrothermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_hydrothermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_hydrothermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor kristjanssonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_kristjanssonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_kristjanssonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicellulosiruptor owensensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicellulosiruptor_owensensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicellulosiruptor_owensensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassobium sp. R2A62 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassobium_sp_r2a62_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassobium_sp_r2a62_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olsenella uli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olsenella_uli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olsenella_uli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermosphaera aggregans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermosphaera_aggregans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermosphaera_aggregans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas subvibrioides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_subvibrioides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_subvibrioides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium cellulosolvens 6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_cellulosolvens_6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_cellulosolvens_6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aggregatibacter aphrophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aggregatibacter_aphrophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aggregatibacter_aphrophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Komagataeibacter medellinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_komagataeibacter_medellinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_komagataeibacter_medellinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter pasteurianus IFO328301 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_pasteurianus_ifo328301_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_pasteurianus_ifo328301_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloarcula hispanica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloarcula_hispanica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloarcula_hispanica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobrevibacter ruminantium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobrevibacter_ruminantium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobrevibacter_ruminantium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erwinia pyrifoliae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erwinia_pyrifoliae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erwinia_pyrifoliae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erwinia billingiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erwinia_billingiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erwinia_billingiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella grahamii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_grahamii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_grahamii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus thermoglucosidasius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_thermoglucosidasius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_thermoglucosidasius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia hofstadii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_hofstadii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_hofstadii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermincola potens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermincola_potens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermincola_potens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidithiobacillus caldus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidithiobacillus_caldus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidithiobacillus_caldus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidithiobacillus thiooxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidithiobacillus_thiooxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidithiobacillus_thiooxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella violacea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_violacea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_violacea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter rodentium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_rodentium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_rodentium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus minor NM305 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_minor_nm305_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_minor_nm305_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulicatella adiacens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulicatella_adiacens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulicatella_adiacens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas flueggei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_flueggei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_flueggei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermocrinis albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermocrinis_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermocrinis_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacteria bacterium KBS146 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacteria_bacterium_kbs146_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacteria_bacterium_kbs146_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deferribacter desulfuricans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deferribacter_desulfuricans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deferribacter_desulfuricans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Starkeya novella nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_starkeya_novella_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_starkeya_novella_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dechlorosoma suillum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dechlorosoma_suillum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dechlorosoma_suillum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Segniliparus rotundus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_segniliparus_rotundus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_segniliparus_rotundus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. CCGE1001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_ccge1001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_ccge1001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. CCGE1002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_ccge1002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_ccge1002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. CCGE1003 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_ccge1003_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_ccge1003_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter asburiae LF7a nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_asburiae_lf7a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_asburiae_lf7a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. DLVIII nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_dlviii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_dlviii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus flavefaciens FD1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_flavefaciens_fd1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_flavefaciens_fd1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga granulosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_granulosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_granulosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Scardovia inopinata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_scardovia_inopinata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_scardovia_inopinata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Simonsiella muelleri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_simonsiella_muelleri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_simonsiella_muelleri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria sp. F0314 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_sp_f0314_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_sp_f0314_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio desulfuricans ND132 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_desulfuricans_nd132_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_desulfuricans_nd132_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyclobacterium qasimii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyclobacterium_qasimii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyclobacterium_qasimii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Winogradskyella psychrotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_winogradskyella_psychrotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_winogradskyella_psychrotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tatumella morbirosei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tatumella_morbirosei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tatumella_morbirosei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium lentocellum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_lentocellum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_lentocellum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microchaete sp. PCC7126 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microchaete_sp_pcc7126_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microchaete_sp_pcc7126_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio aespoeensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_aespoeensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_aespoeensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophothermus lipocalidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophothermus_lipocalidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophothermus_lipocalidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marivirga tractuosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marivirga_tractuosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marivirga_tractuosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Silicibacter sp. TrichCH4B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_silicibacter_sp_trichch4b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_silicibacter_sp_trichch4b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Silicibacter lacuscaerulensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_silicibacter_lacuscaerulensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_silicibacter_lacuscaerulensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocaldococcus sp. FS40622 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocaldococcus_sp_fs40622_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocaldococcus_sp_fs40622_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfarculus baarsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfarculus_baarsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfarculus_baarsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonospora aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonospora_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonospora_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcanobacterium haemolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcanobacterium_haemolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcanobacterium_haemolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia neofelifaecis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_neofelifaecis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_neofelifaecis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri RCH2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_rch2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_rch2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermaerobacter marianensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermaerobacter_marianensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermaerobacter_marianensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. FW1012B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_fw1012b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_fw1012b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium kroppenstedtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_kroppenstedtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_kroppenstedtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. e14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_e14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_e14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jonquetella anthropi E333E1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jonquetella_anthropi_e333e1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jonquetella_anthropi_e333e1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophobotulus glycolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophobotulus_glycolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophobotulus_glycolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus acidiphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_acidiphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_acidiphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanothermococcus okinawensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanothermococcus_okinawensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanothermococcus_okinawensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodomicrobium vannielii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodomicrobium_vannielii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodomicrobium_vannielii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. MB200 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_mb200_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_mb200_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermovibrio ammonificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermovibrio_ammonificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermovibrio_ammonificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leadbetterella byssophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leadbetterella_byssophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leadbetterella_byssophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Truepera radiovictrix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_truepera_radiovictrix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_truepera_radiovictrix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus cellulosilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_cellulosilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_cellulosilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0332 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0332_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0332_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aneurinibacillus aneurinilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aneurinibacillus_aneurinilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aneurinibacillus_aneurinilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium ammoniagenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_ammoniagenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_ammoniagenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella veroralis F0319 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_veroralis_f0319_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_veroralis_f0319_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Slackia exigua nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_slackia_exigua_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_slackia_exigua_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes sp. N902109 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_sp_n902109_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_sp_n902109_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelothrix rhusiopathiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelothrix_rhusiopathiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelothrix_rhusiopathiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodopseudomonas palustris DX1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodopseudomonas_palustris_dx1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodopseudomonas_palustris_dx1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces violaceusniger nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_violaceusniger_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_violaceusniger_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0330 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0330_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0330_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurispirillum indicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurispirillum_indicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurispirillum_indicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Albugo laibachii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_albugo_laibachii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_albugo_laibachii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus vaginalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_vaginalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_vaginalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aerococcus viridans ATCC11563 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aerococcus_viridans_atcc11563_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aerococcus_viridans_atcc11563_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oralis ATCC35037 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oralis_atcc35037_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oralis_atcc35037_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zunongwangia profunda nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zunongwangia_profunda_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zunongwangia_profunda_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudogymnoascus destructans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudogymnoascus_destructans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudogymnoascus_destructans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia symbiont nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_symbiont_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_symbiont_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halanaerobium hydrogeniformans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halanaerobium_hydrogeniformans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halanaerobium_hydrogeniformans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides xylanisolvens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_xylanisolvens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_xylanisolvens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Faecalibacterium prausnitzii SL33 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_faecalibacterium_prausnitzii_sl33_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_faecalibacterium_prausnitzii_sl33_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 3157FAACT1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_3157faact1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_3157faact1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 9143BFAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_9143bfaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_9143bfaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Liberibacter solanacearum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_liberibacter_solanacearum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_liberibacter_solanacearum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella drancourtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_drancourtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_drancourtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. H2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_h2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_h2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 1456FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_1456faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_1456faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelotrichaceae bacterium 3153 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelotrichaceae_bacterium_3153_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelotrichaceae_bacterium_3153_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesotoga prima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesotoga_prima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesotoga_prima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olsenella sp. F0356 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olsenella_sp_f0356_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olsenella_sp_f0356_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella longbeachae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_longbeachae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_longbeachae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fimbriimonas ginsengisoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fimbriimonas_ginsengisoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fimbriimonas_ginsengisoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloferax mucosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloferax_mucosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloferax_mucosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium resistens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_resistens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_resistens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ethanoligenens harbinense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ethanoligenens_harbinense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ethanoligenens_harbinense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Regiella insecticola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_regiella_insecticola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_regiella_insecticola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocapsa aurea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocapsa_aurea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocapsa_aurea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter aceti ATCC23746 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_aceti_atcc23746_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_aceti_atcc23746_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus dysgalactiae ATCC27957 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_dysgalactiae_atcc27957_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_dysgalactiae_atcc27957_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erwinia amylovora nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erwinia_amylovora_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erwinia_amylovora_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces viridosporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_viridosporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_viridosporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. 6146AFAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_6146afaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_6146afaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 3146FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_3146faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_3146faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus smithii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_smithii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_smithii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Subdoligranulum sp. 4354A2FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_subdoligranulum_sp_4354a2faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_subdoligranulum_sp_4354a2faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. 2A57CT2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_2a57ct2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_2a57ct2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planktomarina temperata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planktomarina_temperata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planktomarina_temperata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidilobus saccharovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidilobus_saccharovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidilobus_saccharovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylotenera versatilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylotenera_versatilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylotenera_versatilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia sp. 1NLS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_sp_1nls2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_sp_1nls2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodanobacter denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodanobacter_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodanobacter_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. 1NLA3E nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_1nla3e_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_1nla3e_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfatator indicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfatator_indicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfatator_indicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides salanitronis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_salanitronis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_salanitronis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Edwardsiella tarda ATCC15947 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_edwardsiella_tarda_atcc15947_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_edwardsiella_tarda_atcc15947_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. JPY347 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_jpy347_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_jpy347_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mannheimia haemolytica BOVINE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mannheimia_haemolytica_bovine_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mannheimia_haemolytica_bovine_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Profftella armatura nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_profftella_armatura_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_profftella_armatura_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microvirga aerilata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microvirga_aerilata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microvirga_aerilata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomicrobium denitrificans 1NES1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomicrobium_denitrificans_1nes1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomicrobium_denitrificans_1nes1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanithermus profundus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanithermus_profundus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanithermus_profundus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metallosphaera yellowstonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metallosphaera_yellowstonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metallosphaera_yellowstonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylomirabilis oxyfera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylomirabilis_oxyfera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylomirabilis_oxyfera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aciduliprofundum sp. MAR08339 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aciduliprofundum_sp_mar08339_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aciduliprofundum_sp_mar08339_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Babela massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_babela_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_babela_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio alginolyticus 40B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_alginolyticus_40b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_alginolyticus_40b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudonocardia dioxanivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudonocardia_dioxanivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudonocardia_dioxanivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio mimicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_mimicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_mimicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Grimontia hollisae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_grimontia_hollisae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_grimontia_hollisae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio metschnikovii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_metschnikovii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_metschnikovii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio coralliilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_coralliilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_coralliilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio sp. RC586 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_sp_rc586_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_sp_rc586_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio orientalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_orientalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_orientalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium damselae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_damselae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_damselae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella tularensis novicida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_tularensis_novicida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_tularensis_novicida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella timonensis CRIS5CB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_timonensis_cris5cb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_timonensis_cris5cb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella buccalis ATCC35310 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_buccalis_atcc35310_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_buccalis_atcc35310_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella amnii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_amnii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_amnii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bulleidia extructa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bulleidia_extructa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bulleidia_extructa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Segniliparus rugosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_segniliparus_rugosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_segniliparus_rugosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alloprevotella rava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alloprevotella_rava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alloprevotella_rava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Johnsonella ignava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_johnsonella_ignava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_johnsonella_ignava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas infelix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_infelix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_infelix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter mustelae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_mustelae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_mustelae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanoplanus petrolearius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanoplanus_petrolearius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanoplanus_petrolearius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes finegoldii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_finegoldii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_finegoldii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides coprosuis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_coprosuis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_coprosuis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces scabiei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_scabiei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_scabiei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rothia mucilaginosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rothia_mucilaginosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rothia_mucilaginosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulicella mallensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulicella_mallensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulicella_mallensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter jejuni 414 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_jejuni_414_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_jejuni_414_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria seeligeri 12b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_seeligeri_12b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_seeligeri_12b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium HIMB114 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_himb114_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_himb114_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus sp. 2009 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_sp_2009_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_sp_2009_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citromicrobium bathyomarinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citromicrobium_bathyomarinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citromicrobium_bathyomarinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus equi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_equi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_equi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. PR090111T3T6A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_pr090111t3t6a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_pr090111t3t6a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella rochalimae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_rochalimae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_rochalimae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylomicrobium album nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylomicrobium_album_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylomicrobium_album_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. S9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_s9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_s9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Comamonas testosteroni CNB2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_comamonas_testosteroni_cnb2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_comamonas_testosteroni_cnb2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella multisaccharivorax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_multisaccharivorax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_multisaccharivorax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga thermarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_thermarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_thermarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulophaga algicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulophaga_algicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulophaga_algicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. NK2B42 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_nk2b42_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_nk2b42_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium vignae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_vignae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_vignae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens NZ007 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_nz007_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_nz007_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio africanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_africanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_africanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fonticula alba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fonticula_alba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fonticula_alba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacteriaceae bacterium strain nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacteriaceae_bacterium_strain_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacteriaceae_bacterium_strain_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Archaeoglobus veneficus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_archaeoglobus_veneficus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_archaeoglobus_veneficus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillibacter valericigenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillibacter_valericigenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillibacter_valericigenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus proteolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_proteolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_proteolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides helcogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_helcogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_helcogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paludibacter propionicigenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paludibacter_propionicigenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paludibacter_propionicigenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrolobus fumarii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrolobus_fumarii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrolobus_fumarii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronococcus occultus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronococcus_occultus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronococcus_occultus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurella acetivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurella_acetivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurella_acetivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanomicrobium mobile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanomicrobium_mobile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanomicrobium_mobile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aggregatibacter actinomycetemcomitans D7S1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aggregatibacter_actinomycetemcomitans_d7s1_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_aggregatibacter_actinomycetemcomitans_d7s1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella clarridgeiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_clarridgeiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_clarridgeiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum ruminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_ruminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_ruminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum nigrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_nigrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_nigrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrospira platensis NIES39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrospira_platensis_nies39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrospira_platensis_nies39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus suis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_suis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_suis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mahella australiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mahella_australiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mahella_australiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacter tundripaludum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacter_tundripaludum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacter_tundripaludum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus larvae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_larvae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_larvae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacter wiegelii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacter_wiegelii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacter_wiegelii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus albus 7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_albus_7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_albus_7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marssonina brunnea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marssonina_brunnea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marssonina_brunnea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus lugdunensis HKU0901 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_lugdunensis_hku0901_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_lugdunensis_hku0901_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum oguniense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_oguniense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_oguniense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amphibacillus xylanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amphibacillus_xylanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amphibacillus_xylanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium tropici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_tropici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_tropici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Virgibacillus alimentarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_virgibacillus_alimentarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_virgibacillus_alimentarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gardnerella vaginalis 6119V5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gardnerella_vaginalis_6119v5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gardnerella_vaginalis_6119v5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium diphtheriae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_diphtheriae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_diphtheriae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera genomosp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_genomosp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_genomosp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales genomosp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_genomosp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_genomosp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus ratti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_ratti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_ratti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coriobacterium glomerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coriobacterium_glomerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coriobacterium_glomerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium neoaurum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_neoaurum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_neoaurum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Niastella koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_niastella_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_niastella_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio sp. N418 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_sp_n418_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_sp_n418_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter lignolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_lignolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_lignolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pediococcus claussenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pediococcus_claussenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pediococcus_claussenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium sp. PP1Y nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_sp_pp1y_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_sp_pp1y_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas noxia F0398 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_noxia_f0398_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_noxia_f0398_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oulorum F0390 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oulorum_f0390_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oulorum_f0390_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Turicibacter sanguinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_turicibacter_sanguinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_turicibacter_sanguinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium bifidum PRL2010 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_bifidum_prl2010_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_bifidum_prl2010_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea ananatis LMG20103 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_ananatis_lmg20103_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_ananatis_lmg20103_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solobacterium moorei F0204 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solobacterium_moorei_f0204_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solobacterium_moorei_f0204_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera micronuciformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_micronuciformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_micronuciformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sp. F0087 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sp_f0087_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sp_f0087_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus anginosus F0211 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_anginosus_f0211_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_anginosus_f0211_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0337 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0337_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0337_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfomonile tiedjei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfomonile_tiedjei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfomonile_tiedjei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma gallisepticum F nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_gallisepticum_f_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_gallisepticum_f_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfuricurvum kujiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfuricurvum_kujiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfuricurvum_kujiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobiaceae bacterium SG6C nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobiaceae_bacterium_sg6c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobiaceae_bacterium_sg6c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus maricopensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_maricopensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_maricopensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Odoribacter splanchnicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_odoribacter_splanchnicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_odoribacter_splanchnicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. QA3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_qa3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_qa3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum fioriniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_fioriniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_fioriniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter suis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_suis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_suis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium chubuense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_chubuense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_chubuense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium rhodesiae NBB3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_rhodesiae_nbb3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_rhodesiae_nbb3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium smegmatis JS623 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_smegmatis_js623_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_smegmatis_js623_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium tusciae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_tusciae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_tusciae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Intrasporangium calvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_intrasporangium_calvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_intrasporangium_calvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. GXT6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_gxt6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_gxt6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea vagans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_vagans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_vagans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio thiocyanodenitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_thiocyanodenitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_thiocyanodenitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio thiocyanoxidans ARh4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_thiocyanoxidans_arh4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_thiocyanoxidans_arh4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus iners nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_iners_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_iners_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leucobacter chromiiresistens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leucobacter_chromiiresistens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leucobacter_chromiiresistens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sanfranciscensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sanfranciscensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sanfranciscensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mucilaginibacter paludis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mucilaginibacter_paludis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mucilaginibacter_paludis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus fusiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_fusiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_fusiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis biprosthecum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_biprosthecum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_biprosthecum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas sp. SN2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_sp_sn2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_sp_sn2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter cloacae ATCC13047 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_cloacae_atcc13047_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_cloacae_atcc13047_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Waddlia chondrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_waddlia_chondrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_waddlia_chondrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ensifer sojae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ensifer_sojae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ensifer_sojae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flexistipes sinusarabici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flexistipes_sinusarabici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flexistipes_sinusarabici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermobacillus composti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermobacillus_composti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermobacillus_composti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus curdlanolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_curdlanolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_curdlanolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalimicrobium aerophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalimicrobium_aerophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalimicrobium_aerophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalimicrobium cyclicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalimicrobium_cyclicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalimicrobium_cyclicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinomonas mediterranea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinomonas_mediterranea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinomonas_mediterranea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomicrobium sp. MC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomicrobium_sp_mc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomicrobium_sp_mc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Faecalibacterium prausnitzii L26 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_faecalibacterium_prausnitzii_l26_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_faecalibacterium_prausnitzii_l26_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium clariflavum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_clariflavum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_clariflavum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus atrophaeus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_atrophaeus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_atrophaeus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas haloplanktis ANT505 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_haloplanktis_ant505_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_haloplanktis_ant505_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma pneumoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_pneumoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_pneumoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Idiomarina xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_idiomarina_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_idiomarina_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rahnella sp. Y9602 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rahnella_sp_y9602_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rahnella_sp_y9602_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter piechaudii ATCC43553 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_piechaudii_atcc43553_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_piechaudii_atcc43553_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Collinsella sp. 4847FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_collinsella_sp_4847faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_collinsella_sp_4847faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 2146FAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_2146faa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_2146faa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes indistinctus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_indistinctus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_indistinctus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Barnesiella intestinihominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_barnesiella_intestinihominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_barnesiella_intestinihominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides oleiciplenus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_oleiciplenus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_oleiciplenus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium citroniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_citroniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_citroniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium clostridioforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_clostridioforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_clostridioforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium orbiscindens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_orbiscindens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_orbiscindens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium symbiosum WAL14163 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_symbiosum_wal14163_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_symbiosum_wal14163_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium symbiosum WAL14673 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_symbiosum_wal14673_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_symbiosum_wal14673_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Collinsella tanakaei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_collinsella_tanakaei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_collinsella_tanakaei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dialister succinatiphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dialister_succinatiphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dialister_succinatiphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dorea formicigenerans 4653AFAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dorea_formicigenerans_4653afaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dorea_formicigenerans_4653afaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dysgonomonas gadei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dysgonomonas_gadei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dysgonomonas_gadei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dysgonomonas mossii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dysgonomonas_mossii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dysgonomonas_mossii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Odoribacter laneus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_odoribacter_laneus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_odoribacter_laneus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Slackia piriformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_slackia_piriformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_slackia_piriformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sutterella wadsworthensis 3145B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sutterella_wadsworthensis_3145b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sutterella_wadsworthensis_3145b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sutterella wadsworthensis 2159BFAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sutterella_wadsworthensis_2159bfaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sutterella_wadsworthensis_2159bfaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidithiobacillus ferrivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidithiobacillus_ferrivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidithiobacillus_ferrivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus scotoductus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_scotoductus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_scotoductus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Isoptericola variabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_isoptericola_variabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_isoptericola_variabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus lactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_lactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_lactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fulva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fulva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fulva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoxanthomonas suwonensis 111 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoxanthomonas_suwonensis_111_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoxanthomonas_suwonensis_111_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium sp. 21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_sp_21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_sp_21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocystis sp. SB2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocystis_sp_sb2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocystis_sp_sb2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma putrefaciens KS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_putrefaciens_ks1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_putrefaciens_ks1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma bovoculi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_bovoculi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_bovoculi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moraxella bovoculi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moraxella_bovoculi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moraxella_bovoculi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema caldaria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_caldaria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_caldaria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ahrensia sp. R2A130 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ahrensia_sp_r2a130_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ahrensia_sp_r2a130_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseibium sp. TrichSKD4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseibium_sp_trichskd4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseibium_sp_trichskd4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium HIMB59 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_himb59_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_himb59_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HIMB55 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_himb55_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_himb55_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rahnella aquatilis CIP78.65 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rahnella_aquatilis_cip7865_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rahnella_aquatilis_cip7865_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. MM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_mm1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_mm1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gallaecimonas xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gallaecimonas_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gallaecimonas_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olleya sp. VCSM12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olleya_sp_vcsm12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olleya_sp_vcsm12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus gobiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_gobiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_gobiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aspergillus fumigatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aspergillus_fumigatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aspergillus_fumigatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aequorivita sublithincola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aequorivita_sublithincola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aequorivita_sublithincola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobium narugense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobium_narugense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobium_narugense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma alligatoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_alligatoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_alligatoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Faecalibacterium prausnitzii KLE1255 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_faecalibacterium_prausnitzii_kle1255_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_faecalibacterium_prausnitzii_kle1255_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azoarcus sp. KH32C nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azoarcus_sp_kh32c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azoarcus_sp_kh32c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudogulbenkiania sp. NH8B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudogulbenkiania_sp_nh8b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudogulbenkiania_sp_nh8b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacteroides halobius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacteroides_halobius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacteroides_halobius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALSr1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alsr1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alsr1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus crispatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_crispatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_crispatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium ljungdahlii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_ljungdahlii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_ljungdahlii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratifractor salsuginis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratifractor_salsuginis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratifractor_salsuginis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces bingchenggensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_bingchenggensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_bingchenggensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis mediterranei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_mediterranei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_mediterranei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacterium sp. DL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacterium_sp_dl1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacterium_sp_dl1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus oshimai nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_oshimai_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_oshimai_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium HIMB30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_himb30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_himb30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema phagedenis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_phagedenis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_phagedenis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium australicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_australicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_australicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium freudenreichii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_freudenreichii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_freudenreichii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia sp. TW09308 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_sp_tw09308_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_sp_tw09308_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium aphoticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_aphoticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_aphoticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophaga nitratireducenticrescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophaga_nitratireducenticrescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophaga_nitratireducenticrescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophaga frappieri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophaga_frappieri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophaga_frappieri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobacterium aponinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobacterium_aponinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobacterium_aponinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. BNL1100 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_bnl1100_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_bnl1100_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fluviicola taffensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fluviicola_taffensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fluviicola_taffensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microcoleus vaginatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microcoleus_vaginatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microcoleus_vaginatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planctomyces brasiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planctomyces_brasiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planctomyces_brasiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfitobacterium dehalogenans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfitobacterium_dehalogenans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfitobacterium_dehalogenans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloferacales archaeon DL31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloferacales_archaeon_dl31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloferacales_archaeon_dl31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum seropedicae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_seropedicae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_seropedicae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ketogulonicigenium vulgare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ketogulonicigenium_vulgare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ketogulonicigenium_vulgare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus dysgalactiae equisimilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_dysgalactiae_equisimilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_dysgalactiae_equisimilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachyspira pilosicoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachyspira_pilosicoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachyspira_pilosicoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerochaeta coccoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerochaeta_coccoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerochaeta_coccoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Massilia consociata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_massilia_consociata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_massilia_consociata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hippea maritima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hippea_maritima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hippea_maritima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum barnesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_barnesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_barnesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haliscomenobacter hydrossis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haliscomenobacter_hydrossis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haliscomenobacter_hydrossis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum kuznetsovii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_kuznetsovii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_kuznetsovii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Runella slithyformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_runella_slithyformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_runella_slithyformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc kimchii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_kimchii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_kimchii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium stellenboschense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_stellenboschense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_stellenboschense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter xylosoxidans A8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_xylosoxidans_a8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_xylosoxidans_a8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc gasicomitatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_gasicomitatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_gasicomitatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter saltans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_saltans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_saltans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rothia dentocariosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rothia_dentocariosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rothia_dentocariosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0386 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0386_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0386_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parasutterella excrementihominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parasutterella_excrementihominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parasutterella_excrementihominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paraprevotella clara nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paraprevotella_clara_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paraprevotella_clara_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paraprevotella xylaniphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paraprevotella_xylaniphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paraprevotella_xylaniphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Succinatimonas hippei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_succinatimonas_hippei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_succinatimonas_hippei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides clarus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_clarus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_clarus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides fluxus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_fluxus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_fluxus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus urinalis 228597 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_urinalis_228597_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_urinalis_228597_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus macacae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_macacae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_macacae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus ictaluri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_ictaluri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_ictaluri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium acnes HL037PA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_acnes_hl037pa2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_acnes_hl037pa2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurococcus mucosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurococcus_mucosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurococcus_mucosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillochloris trichoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillochloris_trichoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillochloris_trichoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium ciceri biovar nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_ciceri_biovar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_ciceri_biovar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bdellovibrio bacteriovorus W nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bdellovibrio_bacteriovorus_w_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bdellovibrio_bacteriovorus_w_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marichromatium purpuratum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marichromatium_purpuratum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marichromatium_purpuratum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiocystis violascens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiocystis_violascens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiocystis_violascens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioflavicoccus mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioflavicoccus_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioflavicoccus_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiorhodococcus drewsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiorhodococcus_drewsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiorhodococcus_drewsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiorhodospira sibirica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiorhodospira_sibirica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiorhodospira_sibirica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parachlamydia acanthamoebae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parachlamydia_acanthamoebae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parachlamydia_acanthamoebae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citreicella sp. 357 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citreicella_sp_357_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citreicella_sp_357_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium propionicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_propionicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_propionicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella denticola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_denticola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_denticola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frateuria aurantia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frateuria_aurantia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frateuria_aurantia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum gibsoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_gibsoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_gibsoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas elongata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_elongata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_elongata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus hirae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_hirae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_hirae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Calditerrivibrio nitroreducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_calditerrivibrio_nitroreducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_calditerrivibrio_nitroreducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiocapsa marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiocapsa_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiocapsa_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurococcus fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurococcus_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurococcus_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoproteus tenax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoproteus_tenax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoproteus_tenax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus meridiei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_meridiei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_meridiei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus orientis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_orientis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_orientis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus youngiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_youngiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_youngiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis 2 F0392 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_2_f0392_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_2_f0392_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fervidobacterium pennivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fervidobacterium_pennivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fervidobacterium_pennivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium sp. CCBAU05631 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_sp_ccbau05631_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_sp_ccbau05631_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Opitutaceae bacterium TAV5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_opitutaceae_bacterium_tav5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_opitutaceae_bacterium_tav5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobacterium geofontis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobacterium_geofontis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobacterium_geofontis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia sp. PBA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_sp_pba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_sp_pba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halalkalicoccus jeotgali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halalkalicoccus_jeotgali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halalkalicoccus_jeotgali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nesterenkonia sp. F nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nesterenkonia_sp_f_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nesterenkonia_sp_f_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus methanolicus MGA3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_methanolicus_mga3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_methanolicus_mga3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio caribbeanicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_caribbeanicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_caribbeanicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcaceae bacterium CM5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcaceae_bacterium_cm5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcaceae_bacterium_cm5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stomatobaculum longum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stomatobaculum_longum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stomatobaculum_longum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium parvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_parvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_parvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halosimplex carlsbadense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halosimplex_carlsbadense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halosimplex_carlsbadense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haladaptatus paucihalophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haladaptatus_paucihalophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haladaptatus_paucihalophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halopiger xanaduensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halopiger_xanaduensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halopiger_xanaduensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halostagnicola larsenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halostagnicola_larsenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halostagnicola_larsenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halovivax ruber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halovivax_ruber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halovivax_ruber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrinema pellirubrum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrinema_pellirubrum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrinema_pellirubrum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronobacterium gregoryi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronobacterium_gregoryi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronobacterium_gregoryi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus parafarraginis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_parafarraginis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_parafarraginis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma mirum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_mirum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_mirum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micavibrio aeruginosavorus ARL13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micavibrio_aeruginosavorus_arl13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micavibrio_aeruginosavorus_arl13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylomonas methanica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylomonas_methanica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylomonas_methanica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Scardovia wiggsiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_scardovia_wiggsiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_scardovia_wiggsiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caloramator australicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caloramator_australicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caloramator_australicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moraxella catarrhalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moraxella_catarrhalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moraxella_catarrhalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacterium xylanolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacterium_xylanolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacterium_xylanolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium variabile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_variabile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_variabile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma haemofelis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_haemofelis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_haemofelis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium HIMB5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_himb5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_himb5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia solanacearum PSI07 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_solanacearum_psi07_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_solanacearum_psi07_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga canimorsus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_canimorsus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_canimorsus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium sp. H133 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_sp_h133_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_sp_h133_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemmatimonadetes bacterium KBS708 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemmatimonadetes_bacterium_kbs708_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemmatimonadetes_bacterium_kbs708_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter arilaitensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_arilaitensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_arilaitensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaeroglobus geminatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaeroglobus_geminatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaeroglobus_geminatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium sp. F0437 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_sp_f0437_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_sp_f0437_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium F0431 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_f0431_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_f0431_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. F0407 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_f0407_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_f0407_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus sp. AL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_sp_al1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_sp_al1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pediococcus acidilactici DSM20284 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pediococcus_acidilactici_dsm20284_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pediococcus_acidilactici_dsm20284_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella marshii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_marshii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_marshii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus duerdenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_duerdenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_duerdenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. SirexAAE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_sirexaae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_sirexaae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteriovorax marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteriovorax_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteriovorax_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus parainfluenzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_parainfluenzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_parainfluenzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus intermedius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_intermedius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_intermedius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus constellatus pharyngis C1050 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_constellatus_pharyngis_c1050_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_streptococcus_constellatus_pharyngis_c1050_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus anginosus C1051 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_anginosus_c1051_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_anginosus_c1051_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus anginosus C238 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_anginosus_c238_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_anginosus_c238_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium nuruki nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_nuruki_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_nuruki_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas hortorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_hortorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_hortorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderiales bacterium JOSHI001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderiales_bacterium_joshi001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderiales_bacterium_joshi001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microvirga lotononidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microvirga_lotononidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microvirga_lotononidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum frisingense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_frisingense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_frisingense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. 67H29BP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_67h29bp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_67h29bp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parascardovia denticolens DSM10105 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parascardovia_denticolens_dsm10105_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parascardovia_denticolens_dsm10105_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium yurii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_yurii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_yurii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis ATCC6249 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_atcc6249_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_atcc6249_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. 73H25AP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_73h25ap_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_73h25ap_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillatoriales cyanobacterium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillatoriales_cyanobacterium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillatoriales_cyanobacterium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium ultunense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_ultunense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_ultunense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gillisia limnaea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gillisia_limnaea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gillisia_limnaea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weeksella virosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weeksella_virosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weeksella_virosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Belliella baltica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_belliella_baltica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_belliella_baltica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schizosaccharomyces cryophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schizosaccharomyces_cryophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schizosaccharomyces_cryophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella disiens FB03509AN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_disiens_fb03509an_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_disiens_fb03509an_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium vaginae PB189T14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_vaginae_pb189t14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_vaginae_pb189t14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aerococcus urinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aerococcus_urinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aerococcus_urinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella atypica ACS049VSch6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_atypica_acs049vsch6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_atypica_acs049vsch6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacillus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacillus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacillus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chloroflexus sp. Y3961 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chloroflexus_sp_y3961_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chloroflexus_sp_y3961_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulophaga lytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulophaga_lytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulophaga_lytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ornithobacterium rhinotracheale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ornithobacterium_rhinotracheale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ornithobacterium_rhinotracheale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermaerobacter subterraneus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermaerobacter_subterraneus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermaerobacter_subterraneus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobacterium paludis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobacterium_paludis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobacterium_paludis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum carboxydivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_carboxydivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_carboxydivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurobacterium thermolithotrophum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurobacterium_thermolithotrophum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurobacterium_thermolithotrophum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema succinifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_succinifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_succinifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinithermus hydrothermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinithermus_hydrothermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinithermus_hydrothermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cytophaga fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cytophaga_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cytophaga_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiothrix nivea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiothrix_nivea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiothrix_nivea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio scophthalmi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_scophthalmi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_scophthalmi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter calcoaceticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_calcoaceticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_calcoaceticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfitobacterium dichloroeliminans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfitobacterium_dichloroeliminans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfitobacterium_dichloroeliminans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfitobacterium metallireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfitobacterium_metallireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfitobacterium_metallireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus parauberis NCFD2020 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_parauberis_ncfd2020_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_parauberis_ncfd2020_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus porcinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_porcinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_porcinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus criceti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_criceti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_criceti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella buccae ATCC33574 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_buccae_atcc33574_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_buccae_atcc33574_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga ochracea F0287 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_ochracea_f0287_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_ochracea_f0287_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oralis ATCC33269 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oralis_atcc33269_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oralis_atcc33269_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. JDM601 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_jdm601_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_jdm601_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus rhinitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_rhinitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_rhinitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium IMCC3088 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_imcc3088_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_imcc3088_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methyloferula stellata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methyloferula_stellata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methyloferula_stellata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus sp. NK3A76 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_sp_nk3a76_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_sp_nk3a76_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium NK3B98 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_nk3b98_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_nk3b98_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelotrichaceae bacterium NK3D112 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelotrichaceae_bacterium_nk3d112_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelotrichaceae_bacterium_nk3d112_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema bryantii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_bryantii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_bryantii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium NK4A136 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_nk4a136_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_nk4a136_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium NK4A144 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_nk4a144_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_nk4a144_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium NK4A179 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_nk4a179_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_nk4a179_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobacterium lacus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobacterium_lacus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobacterium_lacus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobacter postgatei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobacter_postgatei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobacter_postgatei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas asaccharolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_asaccharolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_asaccharolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus prevotii ACS065VCol13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_prevotii_acs065vcol13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_prevotii_acs065vcol13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus sp. F0436 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_sp_f0436_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_sp_f0436_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella sp. F0412 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_sp_f0412_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_sp_f0412_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. F0430 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_f0430_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_f0430_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyclobacterium marinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyclobacterium_marinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyclobacterium_marinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flexibacter litoralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flexibacter_litoralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flexibacter_litoralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobacca acetoxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobacca_acetoxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobacca_acetoxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldithrix abyssi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldithrix_abyssi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldithrix_abyssi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Barnesiella viscericola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_barnesiella_viscericola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_barnesiella_viscericola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma leachii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_leachii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_leachii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rikenella microfusus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rikenella_microfusus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rikenella_microfusus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria ivanovii PAM55 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_ivanovii_pam55_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_ivanovii_pam55_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora cyanea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_cyanea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_cyanea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora xinjiangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_xinjiangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_xinjiangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia rhizoxinica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_rhizoxinica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_rhizoxinica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobaculum massiliae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobaculum_massiliae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobaculum_massiliae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobaculum schaalii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobaculum_schaalii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobaculum_schaalii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces europaeus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_europaeus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_europaeus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces turicensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_turicensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_turicensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia broomeae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_broomeae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_broomeae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia felis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_felis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_felis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alloiococcus otitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alloiococcus_otitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alloiococcus_otitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bergeyella zoohelcum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bergeyella_zoohelcum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bergeyella_zoohelcum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dolosigranulum pigrum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dolosigranulum_pigrum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dolosigranulum_pigrum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium infirmum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_infirmum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_infirmum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Facklamia hominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_facklamia_hominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_facklamia_hominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Facklamia ignava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_facklamia_ignava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_facklamia_ignava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Facklamia languida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_facklamia_languida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_facklamia_languida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helcococcus kunzii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helcococcus_kunzii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helcococcus_kunzii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Massilia timonae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_massilia_timonae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_massilia_timonae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella ratti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_ratti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_ratti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella micans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_micans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_micans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus urinalis FB127CNA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_urinalis_fb127cna2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_urinalis_fb127cna2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Turicella otitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_turicella_otitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_turicella_otitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jonquetella anthropi DSM22815 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jonquetella_anthropi_dsm22815_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jonquetella_anthropi_dsm22815_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fukomys damarensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fukomys_damarensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fukomys_damarensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Singulisphaera acidiphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_singulisphaera_acidiphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_singulisphaera_acidiphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Muricauda ruestringensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_muricauda_ruestringensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_muricauda_ruestringensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerophaga thermohalophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerophaga_thermohalophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerophaga_thermohalophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus polymyxa SC2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_polymyxa_sc2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_polymyxa_sc2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hylemonella gracilis ATCC19624 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hylemonella_gracilis_atcc19624_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hylemonella_gracilis_atcc19624_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnoanaerobaculum saburreum DSM3986 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnoanaerobaculum_saburreum_dsm3986_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnoanaerobaculum_saburreum_dsm3986_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kingella kingae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kingella_kingae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kingella_kingae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lautropia mirabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lautropia_mirabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lautropia_mirabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoramibacter alactolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoramibacter_alactolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoramibacter_alactolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus parasanguinis ATCC903 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_parasanguinis_atcc903_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_parasanguinis_atcc903_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oralis ATCC49296 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oralis_atcc49296_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oralis_atcc49296_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces cardiffensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_cardiffensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_cardiffensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0310 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0310_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0310_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia wadei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_wadei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_wadei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0400 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0400_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0400_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sp. F0234 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sp_f0234_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sp_f0234_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Centipeda periodontii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_centipeda_periodontii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_centipeda_periodontii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dialister micraerophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dialister_micraerophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dialister_micraerophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus italicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_italicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_italicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces neuii BVS029A5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_neuii_bvs029a5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_neuii_bvs029a5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium sulci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_sulci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_sulci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella multiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_multiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_multiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus peroris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_peroris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_peroris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sanguinis SK49 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sanguinis_sk49_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sanguinis_sk49_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sanguinis SK355 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sanguinis_sk355_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sanguinis_sk355_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sanguinis SK1057 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sanguinis_sk1057_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sanguinis_sk1057_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella salivae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_salivae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_salivae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus australis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_australis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_australis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus cristatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_cristatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_cristatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus infantis ATCC700779 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_infantis_atcc700779_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_infantis_atcc700779_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta africana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_africana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_africana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus acidophilus 30SC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_acidophilus_30sc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_acidophilus_30sc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerobaculum mobile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerobaculum_mobile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerobaculum_mobile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Plautia stali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_plautia_stali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_plautia_stali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moranella endobia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moranella_endobia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moranella_endobia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium limosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_limosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_limosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Holophaga foetida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_holophaga_foetida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_holophaga_foetida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gardnerella vaginalis 101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gardnerella_vaginalis_101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gardnerella_vaginalis_101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus downei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_downei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_downei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. F0418 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_f0418_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_f0418_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. F0425 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_f0425_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_f0425_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus vestibularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_vestibularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_vestibularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus pettenkoferi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_pettenkoferi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_pettenkoferi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nonlabens ulvanivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nonlabens_ulvanivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nonlabens_ulvanivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema brennaborense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_brennaborense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_brennaborense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pylori SouthAfrica7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pylori_southafrica7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pylori_southafrica7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema saccharophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_saccharophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_saccharophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc fallax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_fallax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_fallax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eremococcus coleocola ACS139VCol8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eremococcus_coleocola_acs139vcol8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eremococcus_coleocola_acs139vcol8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus harei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_harei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_harei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus oris PB013T23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_oris_pb013t23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_oris_pb013t23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. HGF2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_hgf2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_hgf2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes sp. HGB5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_sp_hgb5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_sp_hgb5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella dentalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_dentalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_dentalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinokineospora sp. EG49 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinokineospora_sp_eg49_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinokineospora_sp_eg49_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Syntrophorhabdus aromaticivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_syntrophorhabdus_aromaticivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_syntrophorhabdus_aromaticivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alphaproteobacterium SAR116 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alphaproteobacterium_sar116_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alphaproteobacterium_sar116_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pseudoporcinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pseudoporcinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pseudoporcinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dialister microaerophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dialister_microaerophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dialister_microaerophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ewingella americana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ewingella_americana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ewingella_americana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leclercia adecarboxylata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leclercia_adecarboxylata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leclercia_adecarboxylata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudovibrio sp. FOBEG1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudovibrio_sp_fobeg1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudovibrio_sp_fobeg1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella cibaria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_cibaria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_cibaria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. CF149 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_cf149_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_cf149_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter arseniciresistens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_arseniciresistens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_arseniciresistens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus coryniformis KCTC3167 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_coryniformis_kctc3167_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_coryniformis_kctc3167_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus sp. OT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_sp_ot_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_sp_ot_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sediminibacterium sp. OR53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sediminibacterium_sp_or53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sediminibacterium_sp_or53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas vesicatoria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_vesicatoria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_vesicatoria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Adhaeribacter aquaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_adhaeribacter_aquaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_adhaeribacter_aquaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldilinea aerophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldilinea_aerophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldilinea_aerophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga cynodegmi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_cynodegmi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_cynodegmi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus pimensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_pimensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_pimensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Echinicola vietnamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_echinicola_vietnamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_echinicola_vietnamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Joostella marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_joostella_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_joostella_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus chliarophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_chliarophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_chliarophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Orenia marismortui nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_orenia_marismortui_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_orenia_marismortui_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Owenweeksia hongkongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_owenweeksia_hongkongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_owenweeksia_hongkongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Promicromonospora kroppenstedtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_promicromonospora_kroppenstedtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_promicromonospora_kroppenstedtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Terriglobus roseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_terriglobus_roseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_terriglobus_roseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermanaerovibrio velox nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermanaerovibrio_velox_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermanaerovibrio_velox_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerolinea thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerolinea_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerolinea_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloplanus natans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloplanus_natans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloplanus_natans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halonatronum saccharophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halonatronum_saccharophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halonatronum_saccharophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkaliflexus imshenetskii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkaliflexus_imshenetskii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkaliflexus_imshenetskii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oralis Uo5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oralis_uo5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oralis_uo5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechocystis sp. PCC7509 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechocystis_sp_pcc7509_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechocystis_sp_pcc7509_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc gelidum KCTC3527 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_gelidum_kctc3527_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_gelidum_kctc3527_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas ruminantium lactilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_ruminantium_lactilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_ruminantium_lactilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella sp. R4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_sp_r4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_sp_r4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora glauca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_glauca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_glauca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum BKT015925 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_bkt015925_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_bkt015925_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solitalea canadensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solitalea_canadensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solitalea_canadensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurimonas gotlandica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurimonas_gotlandica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurimonas_gotlandica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Emticicia oligotrophica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_emticicia_oligotrophica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_emticicia_oligotrophica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flectobacillus major nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flectobacillus_major_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flectobacillus_major_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myroides odoratus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myroides_odoratus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myroides_odoratus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Patulibacter minatonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_patulibacter_minatonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_patulibacter_minatonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Niabella soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_niabella_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_niabella_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas brassicacearum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_brassicacearum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_brassicacearum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax dieselolei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_dieselolei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_dieselolei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter phenanthrenivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_phenanthrenivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_phenanthrenivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfolobus islandicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfolobus_islandicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfolobus_islandicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fructobacillus fructosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fructobacillus_fructosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fructobacillus_fructosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium saccharoperbutylacetonicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_saccharoperbutylacetonicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_saccharoperbutylacetonicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halococcus morrhuae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halococcus_morrhuae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halococcus_morrhuae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacterium woodii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacterium_woodii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacterium_woodii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium rhodesiae JS60 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_rhodesiae_js60_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_rhodesiae_js60_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia sp. M24T3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_sp_m24t3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_sp_m24t3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea ananatis AJ13355 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_ananatis_aj13355_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_ananatis_aj13355_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermocrinis ruber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermocrinis_ruber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermocrinis_ruber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planococcus donghaensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planococcus_donghaensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planococcus_donghaensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosarcina sp. BuS5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosarcina_sp_bus5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosarcina_sp_bus5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidianus hospitalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidianus_hospitalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidianus_hospitalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminobacter sp. J41 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminobacter_sp_j41_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminobacter_sp_j41_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium loti R88b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_loti_r88b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_loti_r88b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium arboris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_arboris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_arboris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus pantotrophus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_pantotrophus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_pantotrophus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoxanthomonas suwonensis J43 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoxanthomonas_suwonensis_j43_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoxanthomonas_suwonensis_j43_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. J33 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_j33_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_j33_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. J37 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_j37_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_j37_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulosimicrobium cellulans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulosimicrobium_cellulans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulosimicrobium_cellulans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chelativorans sp. J32 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chelativorans_sp_j32_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chelativorans_sp_j32_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. J14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_j14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_j14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus sp. J39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_sp_j39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_sp_j39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Luteimonas sp. J29 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_luteimonas_sp_j29_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_luteimonas_sp_j29_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioides sp. J54 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioides_sp_j54_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioides_sp_j54_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldanaerobius polysaccharolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldanaerobius_polysaccharolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldanaerobius_polysaccharolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizopus delemar nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizopus_delemar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizopus_delemar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leguminosarum 248 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leguminosarum_248_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leguminosarum_248_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus farciminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_farciminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_farciminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus parauberis KCTC11537 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_parauberis_kctc11537_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_parauberis_kctc11537_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter felis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_felis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_felis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mogibacterium sp. CM50 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mogibacterium_sp_cm50_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mogibacterium_sp_cm50_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium genosp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_genosp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_genosp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. ICM47 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_icm47_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_icm47_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium sp. BS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_sp_bs2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_sp_bs2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. FOBRC6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_fobrc6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_fobrc6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. FOBRC9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_fobrc9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_fobrc9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shuttleworthia sp. MSX8B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shuttleworthia_sp_msx8b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shuttleworthia_sp_msx8b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. CM6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_cm6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_cm6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella sp. AS16 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_sp_as16_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_sp_as16_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnoanaerobaculum sp. MSX33 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnoanaerobaculum_sp_msx33_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnoanaerobaculum_sp_msx33_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Taylorella equigenitalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_taylorella_equigenitalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_taylorella_equigenitalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus peraridilitoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_peraridilitoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_peraridilitoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium 9400853 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_9400853_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_9400853_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium 9401234 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_9401234_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_9401234_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium 9403326 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_9403326_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_9403326_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus sp. 9402080 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_sp_9402080_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_sp_9402080_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroidetes bacterium SCGC AAA027N21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroidetes_bacterium_scgc_aaa027n21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroidetes_bacterium_scgc_aaa027n21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter pasteurianus 3P3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_pasteurianus_3p3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_pasteurianus_3p3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. X2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_x2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_x2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus coagulans 26 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_coagulans_26_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_coagulans_26_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus fructivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_fructivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_fructivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermobrachium celere nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermobrachium_celere_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermobrachium_celere_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. WSM2230 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_wsm2230_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_wsm2230_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hippea jasoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hippea_jasoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hippea_jasoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hippea alviniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hippea_alviniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hippea_alviniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hippea sp. KM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hippea_sp_km1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hippea_sp_km1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter butzleri ED1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_butzleri_ed1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_butzleri_ed1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter sp. L nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_sp_l_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_sp_l_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0384 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0384_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0384_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus oris F0423 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_oris_f0423_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_oris_f0423_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella sp. F0422 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_sp_f0422_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_sp_f0422_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parvimonas sp. F0440 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parvimonas_sp_f0440_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parvimonas_sp_f0440_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetragenococcus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetragenococcus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetragenococcus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio brasiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_brasiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_brasiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio sinaloensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_sinaloensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_sinaloensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium ulcerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_ulcerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_ulcerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ignavibacterium album nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ignavibacterium_album_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ignavibacterium_album_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Imtechella halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_imtechella_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_imtechella_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salpingoeca rosetta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salpingoeca_rosetta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salpingoeca_rosetta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Symbiobacter mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_symbiobacter_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_symbiobacter_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia dilworthii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_dilworthii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_dilworthii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Avibacterium paragallinarum 72 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_avibacterium_paragallinarum_72_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_avibacterium_paragallinarum_72_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces venezuelae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_venezuelae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_venezuelae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cupriavidus taiwanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cupriavidus_taiwanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cupriavidus_taiwanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium testaceum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_testaceum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_testaceum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteriaceae bacterium HQM9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteriaceae_bacterium_hqm9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteriaceae_bacterium_hqm9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Morus notabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_morus_notabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_morus_notabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NCTC 7422 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_nctc_7422_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_nctc_7422_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter lwoffii NCTC 5866 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_lwoffii_nctc_5866_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_lwoffii_nctc_5866_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter ursingii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_ursingii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_ursingii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus rugosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_rugosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_rugosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ornithinibacillus scapharcae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ornithinibacillus_scapharcae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ornithinibacillus_scapharcae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruegeria conchae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruegeria_conchae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruegeria_conchae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter fetus venerealis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_fetus_venerealis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_fetus_venerealis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lacinutrix sp. 5H374 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lacinutrix_sp_5h374_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lacinutrix_sp_5h374_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola sp. 4H37YE5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_sp_4h37ye5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_sp_4h37ye5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dokdonia sp. 4H375 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dokdonia_sp_4h375_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dokdonia_sp_4h375_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubrivivax gelatinosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubrivivax_gelatinosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubrivivax_gelatinosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium nitrogenifigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_nitrogenifigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_nitrogenifigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saprospira grandis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saprospira_grandis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saprospira_grandis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus pseudintermedius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_pseudintermedius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_pseudintermedius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Heterobasidion irregulare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_heterobasidion_irregulare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_heterobasidion_irregulare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vulcanisaeta moutnovskia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vulcanisaeta_moutnovskia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vulcanisaeta_moutnovskia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruegeria halocynthiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruegeria_halocynthiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruegeria_halocynthiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gillisia sp. CAL575 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gillisia_sp_cal575_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gillisia_sp_cal575_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus agnetis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_agnetis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_agnetis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Odyssella thessalonicensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_odyssella_thessalonicensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_odyssella_thessalonicensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldalkalibacillus thermarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldalkalibacillus_thermarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldalkalibacillus_thermarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubrivivax benzoatilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubrivivax_benzoatilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubrivivax_benzoatilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lebetimonas sp. JS170 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lebetimonas_sp_js170_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lebetimonas_sp_js170_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium grahamii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_grahamii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_grahamii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polymorphum gilvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polymorphum_gilvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polymorphum_gilvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Riemerella anatipestifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_riemerella_anatipestifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_riemerella_anatipestifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharopolyspora spinosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharopolyspora_spinosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharopolyspora_spinosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Youngiibacter fragilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_youngiibacter_fragilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_youngiibacter_fragilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis R61 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_r61_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_r61_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces griseoaurantiacus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_griseoaurantiacus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_griseoaurantiacus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus methanolicus PB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_methanolicus_pb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_methanolicus_pb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desmospora sp. 8437 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desmospora_sp_8437_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desmospora_sp_8437_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus indolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_indolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_indolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella nigrescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_nigrescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_nigrescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella pallens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_pallens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_pallens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas sp. KLE1280 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_sp_kle1280_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_sp_kle1280_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus infantis X nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_infantis_x_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_infantis_x_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides nordii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_nordii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_nordii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas veronii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_veronii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_veronii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leucothrix mucor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leucothrix_mucor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leucothrix_mucor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. TD01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_td01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_td01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium colicanis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_colicanis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_colicanis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium innocuum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_innocuum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_innocuum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eggerthia catenaformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eggerthia_catenaformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eggerthia_catenaformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parabacteroides johnsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parabacteroides_johnsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parabacteroides_johnsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. F0473 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_f0473_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_f0473_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. F0442 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_f0442_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_f0442_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia gladioli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_gladioli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_gladioli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leisingera daeponensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leisingera_daeponensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leisingera_daeponensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leisingera caerulea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leisingera_caerulea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leisingera_caerulea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudophaeobacter arcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudophaeobacter_arcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudophaeobacter_arcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leisingera aquimarina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leisingera_aquimarina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leisingera_aquimarina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoproteus uzoniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoproteus_uzoniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoproteus_uzoniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methyloversatilis universalis FAM5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methyloversatilis_universalis_fam5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methyloversatilis_universalis_fam5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera sp. UPII135E nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_sp_upii135e_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_sp_upii135e_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus anginosus SK52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_anginosus_sk52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_anginosus_sk52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis 2 SK95 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_2_sk95_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_2_sk95_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cryobacterium roopkundense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cryobacterium_roopkundense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cryobacterium_roopkundense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium leiognathi mandapamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_leiognathi_mandapamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_leiognathi_mandapamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mendocina NK01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mendocina_nk01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mendocina_nk01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. 1501 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_1501_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_1501_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leisingera sp. ANG1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leisingera_sp_ang1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leisingera_sp_ang1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella stercorea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_stercorea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_stercorea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter sp. IMCC9063 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_sp_imcc9063_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_sp_imcc9063_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter bizzozeronii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_bizzozeronii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_bizzozeronii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solibacillus silvestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solibacillus_silvestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solibacillus_silvestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces cattleya nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_cattleya_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_cattleya_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter insuavis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_insuavis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_insuavis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesoflavibacter zeaxanth. S86 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesoflavibacter_zeaxanth_s86_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesoflavibacter_zeaxanth_s86_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas macleodii Black nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_macleodii_black_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_macleodii_black_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Collimonas fungivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_collimonas_fungivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_collimonas_fungivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola Ua nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_ua_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_ua_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gallibacterium anatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gallibacterium_anatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gallibacterium_anatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola Ak nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_ak_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_ak_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida CSV86 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_csv86_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_csv86_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oralis SK255 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oralis_sk255_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oralis_sk255_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus infantis SK1076 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_infantis_sk1076_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_infantis_sk1076_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ogataea parapolymorpha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ogataea_parapolymorpha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ogataea_parapolymorpha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Trabulsiella guamensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_trabulsiella_guamensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_trabulsiella_guamensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tatumella ptyseos nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tatumella_ptyseos_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tatumella_ptyseos_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leminorella grimontii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leminorella_grimontii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leminorella_grimontii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kluyvera ascorbata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kluyvera_ascorbata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kluyvera_ascorbata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buttiauxella agrestis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buttiauxella_agrestis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buttiauxella_agrestis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metallosphaera cuprina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metallosphaera_cuprina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metallosphaera_cuprina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma gallisepticum S6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_gallisepticum_s6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_gallisepticum_s6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillibacter ruminantium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillibacter_ruminantium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillibacter_ruminantium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus elgii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_elgii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_elgii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. S17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_s17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_s17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pusillimonas sp. T77 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pusillimonas_sp_t77_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pusillimonas_sp_t77_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK1080 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk1080_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk1080_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myroides injenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myroides_injenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myroides_injenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Taylorella asinigenitalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_taylorella_asinigenitalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_taylorella_asinigenitalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetonema longum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetonema_longum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetonema_longum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Buchnera aphidicola G002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_buchnera_aphidicola_g002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_buchnera_aphidicola_g002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophaga aminisulfidivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophaga_aminisulfidivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophaga_aminisulfidivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nannospalax galili nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nannospalax_galili_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nannospalax_galili_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endozoicomonas montiporae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endozoicomonas_montiporae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endozoicomonas_montiporae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporosarcina newyorkensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporosarcina_newyorkensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporosarcina_newyorkensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia alkanivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_alkanivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_alkanivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria monocytogenes Scott nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_monocytogenes_scott_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_monocytogenes_scott_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter aerogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_aerogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_aerogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neorhizobium galegae orientalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neorhizobium_galegae_orientalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neorhizobium_galegae_orientalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neorhizobium galegae officinalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neorhizobium_galegae_officinalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neorhizobium_galegae_officinalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus haemolyticus M19501 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_haemolyticus_m19501_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_haemolyticus_m19501_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus haemolyticus M21621 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_haemolyticus_m21621_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_haemolyticus_m21621_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus haemolyticus M21639 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_haemolyticus_m21639_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_haemolyticus_m21639_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthromitus sp. SFBmouseJapan nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthromitus_sp_sfbmousejapan_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthromitus_sp_sfbmousejapan_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. P838 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_p838_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_p838_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kocuria rhizophila P74 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kocuria_rhizophila_p74_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kocuria_rhizophila_p74_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. KC8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_kc8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_kc8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caloramator sp. ALD01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caloramator_sp_ald01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caloramator_sp_ald01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia solanacearum Po82 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_solanacearum_po82_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_solanacearum_po82_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microlunatus phosphovorus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microlunatus_phosphovorus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microlunatus_phosphovorus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromicrobium massiliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromicrobium_massiliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromicrobium_massiliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus timonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_timonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_timonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium senegalense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_senegalense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_senegalense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium senegalense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_senegalense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_senegalense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kurthia sp. Dielmo nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kurthia_sp_dielmo_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kurthia_sp_dielmo_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kurthia massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kurthia_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kurthia_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kurthia sp. JC8E nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kurthia_sp_jc8e_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kurthia_sp_jc8e_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinisphaera shabanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinisphaera_shabanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinisphaera_shabanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorhabdus tiamatea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorhabdus_tiamatea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorhabdus_tiamatea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloplasma contractile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloplasma_contractile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloplasma_contractile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus kefiranofaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_kefiranofaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_kefiranofaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leguminosarum CB782 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leguminosarum_cb782_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leguminosarum_cb782_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Senegalimassilia anaerobia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_senegalimassilia_anaerobia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_senegalimassilia_anaerobia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus massiliosenegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_massiliosenegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_massiliosenegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. HW567 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_hw567_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_hw567_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium branchiophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_branchiophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_branchiophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma anatis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_anatis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_anatis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus lugdunensis N920143 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_lugdunensis_n920143_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_lugdunensis_n920143_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus constellatus pharyngis SK1060 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_constellatus_pharyngis_sk1060_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_streptococcus_constellatus_pharyngis_sk1060_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK569 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk569_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk569_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus infantis SK970 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_infantis_sk970_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_infantis_sk970_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas diminuta 4704 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_diminuta_4704_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_diminuta_4704_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sp. F0382 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sp_f0382_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sp_f0382_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium durum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_durum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_durum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcus anaerobius VPI4330 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcus_anaerobius_vpi4330_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcus_anaerobius_vpi4330_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. F0040 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_f0040_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_f0040_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalobacter sp. FTH1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalobacter_sp_fth1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalobacter_sp_fth1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus sputorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_sputorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_sputorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Idiomarina sp. A28L nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_idiomarina_sp_a28l_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_idiomarina_sp_a28l_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium japonicum USDA6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_japonicum_usda6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_japonicum_usda6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma columbinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_columbinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_columbinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azorhizobium doebereinerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azorhizobium_doebereinerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azorhizobium_doebereinerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium elkanii WSM1741 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_elkanii_wsm1741_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_elkanii_wsm1741_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium elkanii WSM2783 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_elkanii_wsm2783_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_elkanii_wsm2783_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium japonicum USDA124 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_japonicum_usda124_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_japonicum_usda124_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. WSM2793 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_wsm2793_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_wsm2793_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. WSM3983 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_wsm3983_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_wsm3983_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia mimosarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_mimosarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_mimosarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens Q287 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_q287_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_q287_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium loti CJ3sym nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_loti_cj3sym_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_loti_cj3sym_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium loti USDA3471 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_loti_usda3471_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_loti_usda3471_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. WSM3224 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_wsm3224_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_wsm3224_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. WSM3626 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_wsm3626_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_wsm3626_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. ARR65 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_arr65_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_arr65_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium gallicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_gallicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_gallicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium giardinii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_giardinii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_giardinii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leguminosarum GB30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leguminosarum_gb30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leguminosarum_gb30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sullae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sullae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sullae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium leucaenae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_leucaenae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_leucaenae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ensifer sp. WSM1721 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ensifer_sp_wsm1721_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ensifer_sp_wsm1721_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthromitus sp. SFBratYit nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthromitus_sp_sfbratyit_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthromitus_sp_sfbratyit_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium colombiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_colombiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_colombiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wickerhamomyces ciferrii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wickerhamomyces_ciferrii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wickerhamomyces_ciferrii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium columnare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_columnare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_columnare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanocella conradii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanocella_conradii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanocella_conradii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. SY8519 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_sy8519_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_sy8519_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus laterosporus LMG15441 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_laterosporus_lmg15441_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_laterosporus_lmg15441_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens HK44 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_hk44_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_hk44_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. IBUN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_ibun_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_ibun_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacterium stanieri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacterium_stanieri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacterium_stanieri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacteriaceae bacterium S85 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacteriaceae_bacterium_s85_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacteriaceae_bacterium_s85_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbulbifer agarilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbulbifer_agarilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbulbifer_agarilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida S16 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_s16_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_s16_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus sp. 4557 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_sp_4557_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_sp_4557_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serinicoccus profundi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serinicoccus_profundi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serinicoccus_profundi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinimicrobium mangrovi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinimicrobium_mangrovi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinimicrobium_mangrovi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oenococcus kitaharae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oenococcus_kitaharae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oenococcus_kitaharae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citricoccus sp. CH26A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citricoccus_sp_ch26a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citricoccus_sp_ch26a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoxanthomonas spadix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoxanthomonas_spadix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoxanthomonas_spadix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter cloacae EcWSU1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_cloacae_ecwsu1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_cloacae_ecwsu1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachyspira intermedia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachyspira_intermedia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachyspira_intermedia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter lwoffii WJ10621 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_lwoffii_wj10621_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_lwoffii_wj10621_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bizionia argentinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bizionia_argentinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bizionia_argentinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus salivarius 57I nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_salivarius_57i_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_salivarius_57i_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gayadomonas joobiniege nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gayadomonas_joobiniege_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gayadomonas_joobiniege_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter lipolyticus BF04CF4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_lipolyticus_bf04cf4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_lipolyticus_bf04cf4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminicenantes bacterium AAA252A02 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminicenantes_bacterium_aaa252a02_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminicenantes_bacterium_aaa252a02_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zymoseptoria tritici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zymoseptoria_tritici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zymoseptoria_tritici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporichthya polymorpha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporichthya_polymorpha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporichthya_polymorpha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccidioides sp. lutzii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccidioides_sp_lutzii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccidioides_sp_lutzii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma iowae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_iowae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_iowae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus acidocaldarius Tc41 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_acidocaldarius_tc41_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_acidocaldarius_tc41_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anditalea andensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anditalea_andensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anditalea_andensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING endosymbiont of Tevnia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endosymbiont_of_tevnia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endosymbiont_of_tevnia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Allobaculum stercoricanis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_allobaculum_stercoricanis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_allobaculum_stercoricanis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinopolyspora mortivallis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinopolyspora_mortivallis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinopolyspora_mortivallis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium acnes SK182BJCVI nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_acnes_sk182bjcvi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_acnes_sk182bjcvi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus mojavensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_mojavensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_mojavensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verticillium alfalfae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verticillium_alfalfae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verticillium_alfalfae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfobacillus acidophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfobacillus_acidophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfobacillus_acidophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio tubiashii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_tubiashii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_tubiashii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neisseria weaveri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neisseria_weaveri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neisseria_weaveri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus polymyxa M1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_polymyxa_m1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_polymyxa_m1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacteraceae bacterium AT5844 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacteraceae_bacterium_at5844_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacteraceae_bacterium_at5844_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoplasmatales archaeon nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoplasmatales_archaeon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoplasmatales_archaeon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus pseudopneumoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_pseudopneumoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_pseudopneumoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces purpureus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_purpureus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_purpureus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. TB67 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_tb67_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_tb67_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldisphaera lagunensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldisphaera_lagunensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldisphaera_lagunensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Grimontia indica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_grimontia_indica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_grimontia_indica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia sp. BMG51109 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_sp_bmg51109_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_sp_bmg51109_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Teredinibacter turnerae T7902 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_teredinibacter_turnerae_t7902_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_teredinibacter_turnerae_t7902_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ensifer sp. BR816 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ensifer_sp_br816_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ensifer_sp_br816_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera elsdenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_elsdenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_elsdenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachybacterium paraconglomeratum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachybacterium_paraconglomeratum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachybacterium_paraconglomeratum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis methanolica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_methanolica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_methanolica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis nigrescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_nigrescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_nigrescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Succinispira mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_succinispira_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_succinispira_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus infantarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_infantarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_infantarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus ruminis ATCC27782 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_ruminis_atcc27782_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_ruminis_atcc27782_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glomeribacter gigasporarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glomeribacter_gigasporarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glomeribacter_gigasporarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halonotius sp. J07HN4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halonotius_sp_j07hn4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halonotius_sp_j07hn4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. NSP222 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_nsp222_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_nsp222_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING haloarchaeon 3A1DGR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloarchaeon_3a1dgr_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloarchaeon_3a1dgr_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetrapisispora blattae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetrapisispora_blattae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetrapisispora_blattae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus buchneri CD034 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_buchneri_cd034_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_buchneri_cd034_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia grimmiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_grimmiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_grimmiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Basilea psittacipulmonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_basilea_psittacipulmonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_basilea_psittacipulmonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cronobacter condimenti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cronobacter_condimenti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cronobacter_condimenti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus curvatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_curvatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_curvatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachybacterium squillarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachybacterium_squillarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachybacterium_squillarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. MADAR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_madar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_madar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia amarae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_amarae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_amarae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. Cpu nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_cpu_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_cpu_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea rwandensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_rwandensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_rwandensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dietzia alimentaria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dietzia_alimentaria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dietzia_alimentaria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides faecis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_faecis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_faecis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter globiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_globiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_globiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia effusa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_effusa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_effusa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium thermoresistibile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_thermoresistibile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_thermoresistibile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus sp. HGB0015 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_sp_hgb0015_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_sp_hgb0015_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenisporosarcina sp. HGH0030 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenisporosarcina_sp_hgh0030_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenisporosarcina_sp_hgh0030_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium mongolense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_mongolense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_mongolense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces chartreusis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_chartreusis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_chartreusis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter sp. S77 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_sp_s77_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_sp_s77_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas elodea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_elodea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_elodea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquiluna sp. IMCC13023 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquiluna_sp_imcc13023_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquiluna_sp_imcc13023_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lonsdalea quercina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lonsdalea_quercina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lonsdalea_quercina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacterium halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacterium_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacterium_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium tumefaciens CCNWGS0286 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_tumefaciens_ccnwgs0286_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_tumefaciens_ccnwgs0286_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium amorphae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_amorphae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_amorphae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola nitratireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_nitratireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_nitratireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium frigoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_frigoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_frigoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium antarcticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_antarcticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_antarcticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus peoriae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_peoriae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_peoriae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium pentaromativorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_pentaromativorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_pentaromativorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Commensalibacter intestini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_commensalibacter_intestini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_commensalibacter_intestini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gluconobacter morbifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gluconobacter_morbifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gluconobacter_morbifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fangia hongkongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fangia_hongkongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fangia_hongkongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aggregatibacter actinomycetemcomitans RhAA1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aggregatibacter_actinomycetemcomitans_rhaa1_node_name(
    node_name: &str,
) -> bool {
    url_utilities::is_valid_string_aggregatibacter_actinomycetemcomitans_rhaa1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia sputi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_sputi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_sputi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mobilicoccus pelagius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mobilicoccus_pelagius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mobilicoccus_pelagius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis benzoatilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_benzoatilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_benzoatilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis balhimycina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_balhimycina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_balhimycina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinopolyspora halophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinopolyspora_halophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinopolyspora_halophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rudanella lutea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rudanella_lutea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rudanella_lutea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermicanus aegyptius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermicanus_aegyptius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermicanus_aegyptius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloglycomyces albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloglycomyces_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloglycomyces_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salisaeta longa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salisaeta_longa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salisaeta_longa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geminicoccus roseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geminicoccus_roseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geminicoccus_roseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodovibrio salinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodovibrio_salinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodovibrio_salinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermacetogenium phaeum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermacetogenium_phaeum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermacetogenium_phaeum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas phyllosphaerae 52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_phyllosphaerae_52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_phyllosphaerae_52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas phyllosphaerae FA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_phyllosphaerae_fa2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_phyllosphaerae_fa2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas melonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_melonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_melonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas campestris musacearum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_campestris_musacearum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_campestris_musacearum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium indicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_indicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_indicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella australis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_australis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_australis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella bovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_bovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_bovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella schoenbuchensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_schoenbuchensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_schoenbuchensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella vinsonii berkhoffii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_vinsonii_berkhoffii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_vinsonii_berkhoffii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoanaerobacterium saccharolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoanaerobacterium_saccharolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoanaerobacterium_saccharolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella alsatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_alsatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_alsatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella doshiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_doshiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_doshiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella rattimassiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_rattimassiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_rattimassiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella melophagi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_melophagi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_melophagi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella tamiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_tamiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_tamiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella taylorii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_taylorii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_taylorii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella vinsonii arupensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_vinsonii_arupensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_vinsonii_arupensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella washoensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_washoensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_washoensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fluoribacter dumoffii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fluoribacter_dumoffii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fluoribacter_dumoffii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella sp. DB56 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_sp_db56_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_sp_db56_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanolobus psychrophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanolobus_psychrophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanolobus_psychrophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. SK140 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_sk140_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_sk140_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. SK643 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_sk643_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_sk643_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mitis SK579 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mitis_sk579_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mitis_sk579_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oralis SK1074 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oralis_sk1074_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oralis_sk1074_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus paraphrohaemolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_paraphrohaemolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_paraphrohaemolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium necrophorum funduliforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_necrophorum_funduliforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_necrophorum_funduliforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pasteurella bettyae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pasteurella_bettyae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pasteurella_bettyae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnoanaerobaculum saburreum F0468 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnoanaerobaculum_saburreum_f0468_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnoanaerobaculum_saburreum_f0468_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. F0472 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_f0472_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_f0472_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum massiliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_massiliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_massiliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus timonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_timonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_timonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Timonella senegalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_timonella_senegalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_timonella_senegalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. GXF4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_gxf4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_gxf4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. PAO19 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_pao19_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_pao19_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HIMB083 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_himb083_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_himb083_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium lindaniclasticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_lindaniclasticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_lindaniclasticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. YI23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_yi23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_yi23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Limnohabitans sp. Rim28 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_limnohabitans_sp_rim28_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_limnohabitans_sp_rim28_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Limnohabitans sp. Rim47 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_limnohabitans_sp_rim47_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_limnohabitans_sp_rim47_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. MAN2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_man2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_man2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus sp. N5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_sp_n5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_sp_n5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylopila sp. M107 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylopila_sp_m107_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylopila_sp_m107_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. 10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. 77 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_77_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_77_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophilaceae bacterium 11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophilaceae_bacterium_11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophilaceae_bacterium_11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrobaculum sp. 1860 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrobaculum_sp_1860_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrobaculum_sp_1860_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus faecium NRRLB2354 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_faecium_nrrlb2354_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_faecium_nrrlb2354_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. ICM39 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_icm39_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_icm39_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. MSTE9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_mste9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_mste9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia australis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_australis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_australis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenirhodobacter enshiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenirhodobacter_enshiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenirhodobacter_enshiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium enshiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_enshiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_enshiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia rhizosphera nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_rhizosphera_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_rhizosphera_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Penicillium rubens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_penicillium_rubens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_penicillium_rubens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri SDMLAC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_sdmlac_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_sdmlac_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tistrella mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tistrella_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tistrella_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia asteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_asteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_asteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus sp. CCBUS3UF1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_sp_ccbus3uf1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_sp_ccbus3uf1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium sp. BV3Ac4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_sp_bv3ac4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_sp_bv3ac4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionimicrobium sp. BV2F7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionimicrobium_sp_bv2f7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionimicrobium_sp_bv2f7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus sp. BV3C26 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_sp_bv3c26_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_sp_bv3c26_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coriobacteriaceae bacterium BV3Ac1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coriobacteriaceae_bacterium_bv3ac1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coriobacteriaceae_bacterium_bv3ac1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera sp. BV3C161 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_sp_bv3c161_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_sp_bv3c161_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus pomorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_pomorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_pomorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Budvicia aquatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_budvicia_aquatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_budvicia_aquatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sputi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sputi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sputi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium antarcticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_antarcticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_antarcticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ignatzschineria larvae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ignatzschineria_larvae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ignatzschineria_larvae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia polyisoprenivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_polyisoprenivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_polyisoprenivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. PAMC21119 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_pamc21119_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_pamc21119_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas echinoides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_echinoides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_echinoides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. PAMC26605 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_pamc26605_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_pamc26605_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. PAMC26617 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_pamc26617_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_pamc26617_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas psychrotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_psychrotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_psychrotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophilus sp. 5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophilus_sp_5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophilus_sp_5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronorubrum tibetense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronorubrum_tibetense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronorubrum_tibetense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter farmeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_farmeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_farmeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora azurea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_azurea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_azurea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium baderi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_baderi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_baderi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus parasanguinis FW213 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_parasanguinis_fw213_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_parasanguinis_fw213_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens F113 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_f113_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_f113_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus rossiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_rossiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_rossiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia hermannii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_hermannii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_hermannii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia vulneris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_vulneris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_vulneris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 31Y nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_31y_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_31y_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces naeslundii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_naeslundii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_naeslundii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus macedonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_macedonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_macedonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces acidiscabies nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_acidiscabies_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_acidiscabies_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hoeflea sp. 108 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hoeflea_sp_108_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hoeflea_sp_108_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio sp. EJY3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_sp_ejy3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_sp_ejy3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methyloglobulus morosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methyloglobulus_morosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methyloglobulus_morosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus alvei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_alvei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_alvei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas citrea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_citrea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_citrea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas haloplanktis ATCC14393 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_haloplanktis_atcc14393_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_haloplanktis_atcc14393_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas rubra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_rubra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_rubra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas spongiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_spongiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_spongiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus bataviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_bataviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_bataviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma canis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_canis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_canis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Simiduia agarivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_simiduia_agarivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_simiduia_agarivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium fredii HH103 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_fredii_hh103_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_fredii_hh103_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas extremaustralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_extremaustralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_extremaustralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus sp. PH9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_sp_ph9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_sp_ph9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus grossensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_grossensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_grossensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. ph3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_ph3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_ph3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kallipyga massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kallipyga_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kallipyga_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enorma massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enorma_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enorma_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. GFAJ1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_gfaj1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_gfaj1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stenotrophomonas maltophilia PML168 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stenotrophomonas_maltophilia_pml168_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stenotrophomonas_maltophilia_pml168_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma hyorhinis SK76 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_hyorhinis_sk76_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_hyorhinis_sk76_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis sp. LC363 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_sp_lc363_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_sp_lc363_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacterium sp. MS4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacterium_sp_ms4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacterium_sp_ms4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylopila sp. 73B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylopila_sp_73b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylopila_sp_73b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. 141 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_141_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_141_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acaricomes phytoseiuli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acaricomes_phytoseiuli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acaricomes_phytoseiuli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter nitrogenifigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_nitrogenifigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_nitrogenifigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter bouvetii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_bouvetii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_bouvetii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobacillus capsulatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacillus_capsulatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacillus_capsulatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobaculum urinale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobaculum_urinale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobaculum_urinale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinokineospora enzanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinokineospora_enzanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinokineospora_enzanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomadura atramentaria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomadura_atramentaria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomadura_atramentaria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces dentalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_dentalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_dentalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces georgiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_georgiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_georgiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces israelii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_israelii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_israelii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces neuii DSM8576 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_neuii_dsm8576_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_neuii_dsm8576_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces suimastitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_suimastitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_suimastitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces vaccimaxillae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_vaccimaxillae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_vaccimaxillae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomycetospora chiangmaiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomycetospora_chiangmaiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomycetospora_chiangmaiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes globisporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_globisporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_globisporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinopolymorpha alba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinopolymorpha_alba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinopolymorpha_alba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aequorivita capsosiphonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aequorivita_capsosiphonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aequorivita_capsosiphonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aestuariibacter salexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aestuariibacter_salexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aestuariibacter_salexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aestuariimicrobium kwangyangense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aestuariimicrobium_kwangyangense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aestuariimicrobium_kwangyangense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afifella pfennigii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afifella_pfennigii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afifella_pfennigii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrococcus lahaulensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrococcus_lahaulensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrococcus_lahaulensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agromyces italicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agromyces_italicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agromyces_italicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agromyces subbeticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agromyces_subbeticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agromyces_subbeticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algicola sagamiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algicola_sagamiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algicola_sagamiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algoriphagus mannitolivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algoriphagus_mannitolivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algoriphagus_mannitolivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algoriphagus marincola DSM16067 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algoriphagus_marincola_dsm16067_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algoriphagus_marincola_dsm16067_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algoriphagus vanfongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algoriphagus_vanfongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algoriphagus_vanfongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aliagarivorans taiwanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aliagarivorans_taiwanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aliagarivorans_taiwanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus contaminans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_contaminans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_contaminans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus herbarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_herbarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_herbarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus pohliae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_pohliae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_pohliae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkanindiges illinoisensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkanindiges_illinoisensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkanindiges_illinoisensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Allofustis seminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_allofustis_seminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_allofustis_seminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alloscardovia omnicolens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alloscardovia_omnicolens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alloscardovia_omnicolens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alysiella crassa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alysiella_crassa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alysiella_crassa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amorphus coralli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amorphus_coralli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amorphus_coralli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaeroarcus burkinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaeroarcus_burkinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaeroarcus_burkinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerobiospirillum succiniciproducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerobiospirillum_succiniciproducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerobiospirillum_succiniciproducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerovorax odorimutans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerovorax_odorimutans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerovorax_odorimutans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Andreprevotia chitinilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_andreprevotia_chitinilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_andreprevotia_chitinilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquaspirillum serpens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquaspirillum_serpens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquaspirillum_serpens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina muelleri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_muelleri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_muelleri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenibacter certesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenibacter_certesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenibacter_certesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenibacter latericius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenibacter_latericius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenibacter_latericius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenimonas composti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenimonas_composti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenimonas_composti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenimonas oryziterrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenimonas_oryziterrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenimonas_oryziterrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arsenicicoccus bolidensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arsenicicoccus_bolidensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arsenicicoccus_bolidensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter castelli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_castelli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_castelli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sanguinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sanguinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sanguinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis benevestitus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_benevestitus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_benevestitus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopococcus tabaci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopococcus_tabaci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopococcus_tabaci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aureimonas ureilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aureimonas_ureilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aureimonas_ureilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azospirillum halopraeferens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azospirillum_halopraeferens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azospirillum_halopraeferens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Azovibrio restrictus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_azovibrio_restrictus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_azovibrio_restrictus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus aidingensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_aidingensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_aidingensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus chagannorensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_chagannorensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_chagannorensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus fordii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_fordii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_fordii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus gelatini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_gelatini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_gelatini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides barnesiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_barnesiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_barnesiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides graminisolvens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_graminisolvens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_graminisolvens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides massiliensis B84634 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_massiliensis_b84634_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_massiliensis_b84634_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides pyogenes DSM20611 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_pyogenes_dsm20611_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_pyogenes_dsm20611_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides salyersiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_salyersiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_salyersiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Balneola vulgaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_balneola_vulgaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_balneola_vulgaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bavariicoccus seileri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bavariicoccus_seileri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bavariicoccus_seileri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Belnapia moabensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_belnapia_moabensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_belnapia_moabensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blautia wexlerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blautia_wexlerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blautia_wexlerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachymonas chironomi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachymonas_chironomi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachymonas_chironomi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus laterosporus DSM25 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_laterosporus_dsm25_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_laterosporus_dsm25_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas aveniformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_aveniformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_aveniformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevundimonas bacteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevundimonas_bacteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevundimonas_bacteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia nodosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_nodosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_nodosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyricimonas synergistica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyricimonas_synergistica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyricimonas_synergistica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter cuniculorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_cuniculorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_cuniculorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemmobacter nectariphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemmobacter_nectariphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemmobacter_nectariphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catelliglobosispora koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catelliglobosispora_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catelliglobosispora_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium caeni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_caeni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_caeni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium daeguense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_daeguense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_daeguense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium gregarium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_gregarium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_gregarium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium palustre nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_palustre_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_palustre_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiisalibacter paucivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiisalibacter_paucivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiisalibacter_paucivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium aminophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_aminophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_aminophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium litorale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_litorale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_litorale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium saccharogumia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_saccharogumia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_saccharogumia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sporosphaeroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sporosphaeroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sporosphaeroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium stercorarium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_stercorarium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_stercorarium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium tyrobutyricum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_tyrobutyricum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_tyrobutyricum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium viride nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_viride_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_viride_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cohnella laeviribosi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cohnella_laeviribosi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cohnella_laeviribosi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Conchiformibius kuhniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_conchiformibius_kuhniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_conchiformibius_kuhniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Conchiformibius steedae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_conchiformibius_steedae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_conchiformibius_steedae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium callunae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_callunae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_callunae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium capitovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_capitovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_capitovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium caspium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_caspium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_caspium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium ciconiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_ciconiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_ciconiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium freiburgense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_freiburgense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_freiburgense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium lubricantis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_lubricantis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_lubricantis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium massiliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_massiliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_massiliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium mastitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_mastitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_mastitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium pilosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_pilosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_pilosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium propinquum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_propinquum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_propinquum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium ulceribovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_ulceribovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_ulceribovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gryllotalpicola ginsengisoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gryllotalpicola_ginsengisoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gryllotalpicola_ginsengisoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cytophaga aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cytophaga_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cytophaga_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dasania marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dasania_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dasania_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus apachensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_apachensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_apachensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus aquatilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_aquatilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_aquatilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus frigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_frigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_frigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus marmoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_marmoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_marmoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus misasensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_misasensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_misasensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Demetria terragena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_demetria_terragena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_demetria_terragena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobacter curvatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobacter_curvatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobacter_curvatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobulbus japonicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobulbus_japonicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobulbus_japonicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfococcus multivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfococcus_multivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfococcus_multivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfocurvus vexinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfocurvus_vexinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfocurvus_vexinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfonatronovibrio hydrogenovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfonatronovibrio_hydrogenovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfonatronovibrio_hydrogenovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum alcoholivorax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_alcoholivorax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_alcoholivorax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum alkaliphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_alkaliphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_alkaliphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum hydrothermale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_hydrothermale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_hydrothermale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum thermocisternum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_thermocisternum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_thermocisternum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio acrylicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_acrylicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_acrylicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio alcoholivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_alcoholivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_alcoholivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio alkalitolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_alkalitolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_alkalitolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio aminophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_aminophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_aminophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio bastinii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_bastinii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_bastinii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio desulfuricans DSM642 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_desulfuricans_dsm642_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_desulfuricans_dsm642_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio frigidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_frigidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_frigidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio gigas nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_gigas_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_gigas_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio hydrothermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_hydrothermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_hydrothermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio longus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_longus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_longus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio oxyclinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_oxyclinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_oxyclinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovirgula thermocuniculi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovirgula_thermocuniculi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovirgula_thermocuniculi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurispora thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurispora_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurispora_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Donghicola xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_donghicola_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_donghicola_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dyadobacter alkalitolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dyadobacter_alkalitolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dyadobacter_alkalitolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Echinicola pacifica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_echinicola_pacifica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_echinicola_pacifica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Elioraea tepidiphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_elioraea_tepidiphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_elioraea_tepidiphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus cecorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_cecorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_cecorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus columbae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_columbae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_columbae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterorhabdus mucosicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterorhabdus_mucosicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterorhabdus_mucosicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Epilithonimonas tenax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_epilithonimonas_tenax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_epilithonimonas_tenax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eremococcus coleocola DSM15696 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eremococcus_coleocola_dsm15696_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eremococcus_coleocola_dsm15696_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Erysipelothrix tonsillarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_erysipelothrix_tonsillarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_erysipelothrix_tonsillarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eudoraea adriatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eudoraea_adriatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eudoraea_adriatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ferrimicrobium acidiphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ferrimicrobium_acidiphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ferrimicrobium_acidiphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ferrimonas futtsuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ferrimonas_futtsuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ferrimonas_futtsuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium daejeonense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_daejeonense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_daejeonense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium filum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_filum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_filum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium frigidarium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_frigidarium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_frigidarium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium rivuli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_rivuli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_rivuli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sasangense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sasangense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sasangense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium subsaxonicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_subsaxonicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_subsaxonicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium suncheonense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_suncheonense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_suncheonense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flexithrix dorotheae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flexithrix_dorotheae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flexithrix_dorotheae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gelidibacter mesophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gelidibacter_mesophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gelidibacter_mesophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella cuniculi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_cuniculi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_cuniculi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geopsychrobacter electrodiphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geopsychrobacter_electrodiphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geopsychrobacter_electrodiphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geothrix fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geothrix_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geothrix_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gilvimarinus chinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gilvimarinus_chinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gilvimarinus_chinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola punicea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_punicea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_punicea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciibacter superstes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciibacter_superstes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciibacter_superstes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glycomyces arizonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glycomyces_arizonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glycomyces_arizonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia hirsuta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_hirsuta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_hirsuta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia shandongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_shandongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_shandongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gracilibacillus lacisalsi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gracilibacillus_lacisalsi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gracilibacillus_lacisalsi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gracilimonas tropica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gracilimonas_tropica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gracilimonas_tropica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gramella echinicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gramella_echinicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gramella_echinicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulicoccus phenolivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulicoccus_phenolivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulicoccus_phenolivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gulosibacter molinativorax nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gulosibacter_molinativorax_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gulosibacter_molinativorax_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hahella ganghwensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hahella_ganghwensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hahella_ganghwensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halalkalibacillus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halalkalibacillus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halalkalibacillus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haliea salexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haliea_salexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haliea_salexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacillus kuroshimensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacillus_kuroshimensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacillus_kuroshimensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas anticariensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_anticariensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_anticariensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas halocynthiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_halocynthiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_halocynthiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas lutea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_lutea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_lutea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorubrum ezzemoulense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorubrum_ezzemoulense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorubrum_ezzemoulense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hamadaea tsunoensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hamadaea_tsunoensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hamadaea_tsunoensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helcococcus sueciensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helcococcus_sueciensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helcococcus_sueciensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hellea balneolensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hellea_balneolensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hellea_balneolensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Henriciella marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_henriciella_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_henriciella_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Humibacter albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_humibacter_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_humibacter_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hymenobacter norwichensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hymenobacter_norwichensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hymenobacter_norwichensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jeotgalicoccus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jeotgalicoccus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jeotgalicoccus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jeotgalicoccus psychrophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jeotgalicoccus_psychrophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jeotgalicoccus_psychrophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jonesia quinghaiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jonesia_quinghaiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jonesia_quinghaiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kaistia granuli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kaistia_granuli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kaistia_granuli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kangiella aquimarina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kangiella_aquimarina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kangiella_aquimarina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kiloniella laminariae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kiloniella_laminariae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kiloniella_laminariae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kordiimonas gwangyangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kordiimonas_gwangyangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kordiimonas_gwangyangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kribbella catacumbae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kribbella_catacumbae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kribbella_catacumbae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kushneria aurantia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kushneria_aurantia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kushneria_aurantia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lacticigenium naphtae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lacticigenium_naphtae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lacticigenium_naphtae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus ceti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_ceti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_ceti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus harbinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_harbinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_harbinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus malefermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_malefermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_malefermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus psittaci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_psittaci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_psittaci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella lansingensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_lansingensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_lansingensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella moravica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_moravica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_moravica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella shakespearei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_shakespearei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_shakespearei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia shahii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_shahii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_shahii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia trevisanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_trevisanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_trevisanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leucobacter chironomi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leucobacter_chironomi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leucobacter_chironomi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lewinella cohaerens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lewinella_cohaerens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lewinella_cohaerens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lewinella persica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lewinella_persica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lewinella_persica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Loktanella hongkongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_loktanella_hongkongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_loktanella_hongkongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Longispora albida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_longispora_albida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_longispora_albida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter concretionis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_concretionis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_concretionis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinimicrobium agarilyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinimicrobium_agarilyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinimicrobium_agarilyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter daepoensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_daepoensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_daepoensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacterium litorale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacterium_litorale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacterium_litorale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinomonas ushuaiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinomonas_ushuaiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinomonas_ushuaiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinospirillum insulare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinospirillum_insulare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinospirillum_insulare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinospirillum minutulum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinospirillum_minutulum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinospirillum_minutulum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Martelella mediterranea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_martelella_mediterranea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_martelella_mediterranea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megamonas hypermegale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megamonas_hypermegale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megamonas_hypermegale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megamonas rupellensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megamonas_rupellensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megamonas_rupellensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meganema perideroedes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meganema_perideroedes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meganema_perideroedes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus cerbereus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_cerbereus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_cerbereus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus taiwanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_taiwanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_taiwanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Meiothermus timidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_meiothermus_timidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_meiothermus_timidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesoflavibacter zeaxanth. DSM18436 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesoflavibacter_zeaxanth_dsm18436_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesoflavibacter_zeaxanth_dsm18436_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesonia mobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesonia_mobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesonia_mobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Metascardovia criceti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_metascardovia_criceti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_metascardovia_criceti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophilus methylotrophus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophilus_methylotrophus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophilus_methylotrophus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium gubbeenense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_gubbeenense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_gubbeenense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium indicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_indicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_indicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium luticocti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_luticocti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_luticocti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moraxella boevrei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moraxella_boevrei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moraxella_boevrei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moraxella caprae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moraxella_caprae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moraxella_caprae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium hassiacum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_hassiacum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_hassiacum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Neptunomonas japonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_neptunomonas_japonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_neptunomonas_japonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nesterenkonia alba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nesterenkonia_alba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nesterenkonia_alba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nevskia ramosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nevskia_ramosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nevskia_ramosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nevskia soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nevskia_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nevskia_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Niabella aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_niabella_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_niabella_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioides halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioides_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioides_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nonomuraea coxensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nonomuraea_coxensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nonomuraea_coxensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium acidiphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_acidiphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_acidiphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicaulis alexandrii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicaulis_alexandrii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicaulis_alexandrii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola nanhaiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_nanhaiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_nanhaiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oligella ureolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oligella_ureolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oligella_ureolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olivibacter sitiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olivibacter_sitiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olivibacter_sitiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ornithinimicrobium pekingense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ornithinimicrobium_pekingense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ornithinimicrobium_pekingense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus alginolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_alginolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_alginolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus daejeonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_daejeonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_daejeonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus fonticola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_fonticola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_fonticola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus ginsengihumi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_ginsengihumi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_ginsengihumi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sanguinis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sanguinis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sanguinis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus terrigena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_terrigena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_terrigena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pannonibacter phragmitetus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pannonibacter_phragmitetus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pannonibacter_phragmitetus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parabacteroides gordonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parabacteroides_gordonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parabacteroides_gordonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paraoerskovia marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paraoerskovia_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paraoerskovia_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Patulibacter americanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_patulibacter_americanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_patulibacter_americanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelosinus fermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelosinus_fermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelosinus_fermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Perlucidibaca piscinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_perlucidibaca_piscinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_perlucidibaca_piscinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pleomorphomonas koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pleomorphomonas_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pleomorphomonas_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pleomorphomonas oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pleomorphomonas_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pleomorphomonas_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyrobacter cryptus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyrobacter_cryptus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyrobacter_cryptus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas bennonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_bennonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_bennonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas levii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_levii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_levii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas somerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_somerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_somerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella albensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_albensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_albensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella corporis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_corporis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_corporis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella falsenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_falsenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_falsenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella loescheii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_loescheii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_loescheii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella maculosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_maculosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_maculosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oris DSM18711 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oris_dsm18711_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oris_dsm18711_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella paludivivens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_paludivivens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_paludivivens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella shahii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_shahii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_shahii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella timonensis 4401737 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_timonensis_4401737_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_timonensis_4401737_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella veroralis DSM19559 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_veroralis_dsm19559_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_veroralis_dsm19559_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium acidifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_acidifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_acidifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium jensenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_jensenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_jensenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium thoenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_thoenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_thoenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteiniphilum acetatigenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteiniphilum_acetatigenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteiniphilum_acetatigenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteocatella sphenisci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteocatella_sphenisci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteocatella_sphenisci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoclavibacter soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoclavibacter_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoclavibacter_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas resinovorans DSM21078 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_resinovorans_dsm21078_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_resinovorans_dsm21078_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudonocardia acaciae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudonocardia_acaciae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudonocardia_acaciae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudonocardia asaccharolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudonocardia_asaccharolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudonocardia_asaccharolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter lutiphocae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_lutiphocae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_lutiphocae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter phenylpyruvicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_phenylpyruvicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_phenylpyruvicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychroflexus tropicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychroflexus_tropicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychroflexus_tropicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychroserpens burtonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychroserpens_burtonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychroserpens_burtonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rathayibacter toxicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rathayibacter_toxicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rathayibacter_toxicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rheinheimera baltica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rheinheimera_baltica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rheinheimera_baltica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rheinheimera perlucida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rheinheimera_perlucida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rheinheimera_perlucida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodonellum psychrophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodonellum_psychrophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodonellum_psychrophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Riemerella columbina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_riemerella_columbina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_riemerella_columbina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Robiginitomaculum antarcticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_robiginitomaculum_antarcticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_robiginitomaculum_antarcticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseomonas aerilata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseomonas_aerilata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseomonas_aerilata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruania albidiflava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruania_albidiflava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruania_albidiflava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubritalea marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubritalea_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubritalea_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rubritepida flocculans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rubritepida_flocculans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rubritepida_flocculans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rudaea cellulosilytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rudaea_cellulosilytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rudaea_cellulosilytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus gauvreauii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_gauvreauii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_gauvreauii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharibacillus kuerlensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharibacillus_kuerlensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharibacillus_kuerlensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharibacter floricola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharibacter_floricola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharibacter_floricola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharospirillum impatiens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharospirillum_impatiens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharospirillum_impatiens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinarimonas rosea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinarimonas_rosea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinarimonas_rosea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinicoccus albus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinicoccus_albus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinicoccus_albus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinimicrobium terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinimicrobium_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinimicrobium_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinimonas chungwhensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinimonas_chungwhensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinimonas_chungwhensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salipiger mucosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salipiger_mucosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salipiger_mucosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salsuginibacillus kocurii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salsuginibacillus_kocurii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salsuginibacillus_kocurii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sandarakinorhabdus limnophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sandarakinorhabdus_limnophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sandarakinorhabdus_limnophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schlesneria paludicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schlesneria_paludicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schlesneria_paludicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sediminimonas qiaohouensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sediminimonas_qiaohouensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sediminimonas_qiaohouensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Segetibacter koreensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_segetibacter_koreensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_segetibacter_koreensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas bovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_bovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_bovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serinicoccus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serinicoccus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serinicoccus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shimazuella kribbensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shimazuella_kribbensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shimazuella_kribbensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Silanimonas lenta nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_silanimonas_lenta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_silanimonas_lenta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Simplicispira psychrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_simplicispira_psychrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_simplicispira_psychrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solimonas variicoloris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solimonas_variicoloris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solimonas_variicoloris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solimonas flava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solimonas_flava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solimonas_flava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Smaragdicoccus niigatensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_smaragdicoccus_niigatensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_smaragdicoccus_niigatensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solimonas soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solimonas_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solimonas_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solobacterium moorei DSM22971 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solobacterium_moorei_dsm22971_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solobacterium_moorei_dsm22971_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas astaxanthinifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_astaxanthinifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_astaxanthinifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sanxanigenens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sanxanigenens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sanxanigenens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis baekryungensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_baekryungensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_baekryungensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta bajacaliforniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_bajacaliforniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_bajacaliforniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirosoma luteum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirosoma_luteum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirosoma_luteum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirosoma panaciterrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirosoma_panaciterrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirosoma_panaciterrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirosoma spitsbergense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirosoma_spitsbergense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirosoma_spitsbergense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spongiibacter tropicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spongiibacter_tropicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spongiibacter_tropicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporolactobacillus vineae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporolactobacillus_vineae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporolactobacillus_vineae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporomusa ovata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporomusa_ovata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporomusa_ovata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporosarcina ureae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporosarcina_ureae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporosarcina_ureae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stenoxybacter acetivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stenoxybacter_acetivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stenoxybacter_acetivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus caballi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_caballi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_caballi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus castoreus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_castoreus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_castoreus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus devriesei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_devriesei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_devriesei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus didelphis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_didelphis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_didelphis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus entericus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_entericus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_entericus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus ferus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_ferus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_ferus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus henryi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_henryi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_henryi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus marimammalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_marimammalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_marimammalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus merionis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_merionis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_merionis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus minor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_minor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_minor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus orisratti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_orisratti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_orisratti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus ovis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_ovis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_ovis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Faecalicoccus pleomorphus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_faecalicoccus_pleomorphus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_faecalicoccus_pleomorphus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus plurextorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_plurextorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_plurextorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus porci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_porci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_porci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus thoraltensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_thoraltensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_thoraltensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces flavidovirens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_flavidovirens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_flavidovirens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces scabrisporus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_scabrisporus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_scabrisporus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sulphureus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sulphureus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sulphureus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces vitaminophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_vitaminophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_vitaminophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurihydrogenibium subterraneum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurihydrogenibium_subterraneum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurihydrogenibium_subterraneum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum arcachonense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_arcachonense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_arcachonense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tepidiphilus margaritifer nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tepidiphilus_margaritifer_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tepidiphilus_margaritifer_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Terasakiella pusilla nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_terasakiella_pusilla_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_terasakiella_pusilla_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetragenococcus muriaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetragenococcus_muriaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetragenococcus_muriaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassobacter arenae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassobacter_arenae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassobacter_arenae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassospira xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassospira_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassospira_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thauera linaloolentis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thauera_linaloolentis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thauera_linaloolentis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermithiobacillus tepidarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermithiobacillus_tepidarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermithiobacillus_tepidarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfatator atlanticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfatator_atlanticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfatator_atlanticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobacterium hveragerdense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobacterium_hveragerdense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobacterium_hveragerdense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfobacterium thermophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfobacterium_thermophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfobacterium_thermophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermodesulfovibrio thiophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermodesulfovibrio_thiophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermodesulfovibrio_thiophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermomonas fusca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermomonas_fusca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermomonas_fusca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus antranikianii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_antranikianii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_antranikianii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus igniterrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_igniterrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_igniterrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus islandicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_islandicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_islandicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiobacillus denitrificans DSM12475 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiobacillus_denitrificans_dsm12475_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiobacillus_denitrificans_dsm12475_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiobacillus thioparus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiobacillus_thioparus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiobacillus_thioparus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiothrix disciformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiothrix_disciformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiothrix_disciformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiothrix flexilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiothrix_flexilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiothrix_flexilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiothrix lacustris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiothrix_lacustris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiothrix_lacustris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tuberibacillus calidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tuberibacillus_calidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tuberibacillus_calidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Uliginosibacterium gangwonense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_uliginosibacterium_gangwonense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_uliginosibacterium_gangwonense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Varibaculum cambriense DSM15806 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_varibaculum_cambriense_dsm15806_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_varibaculum_cambriense_dsm15806_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella magna nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_magna_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_magna_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vitreoscilla stercoraria nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vitreoscilla_stercoraria_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vitreoscilla_stercoraria_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wenxinia marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wenxinia_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wenxinia_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wohlfahrtiimonas chitiniclastica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wohlfahrtiimonas_chitiniclastica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wohlfahrtiimonas_chitiniclastica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Woodsholea maritima nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_woodsholea_maritima_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_woodsholea_maritima_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xenophilus azovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xenophilus_azovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xenophilus_azovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yaniella halotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yaniella_halotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yaniella_halotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zavarzinella formosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zavarzinella_formosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zavarzinella_formosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zymophilus raffinosivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zymophilus_raffinosivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zymophilus_raffinosivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira arctica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_arctica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_arctica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira pelophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_pelophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_pelophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira sp. Kp2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_sp_kp2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_sp_kp2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri DSM10701 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_dsm10701_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_dsm10701_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nafulsella turpanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nafulsella_turpanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nafulsella_turpanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema sp. JC4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_sp_jc4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_sp_jc4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas protegens CHA0 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_protegens_cha0_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_protegens_cha0_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Morganella morganii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_morganella_morganii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_morganella_morganii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema maltophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_maltophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_maltophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema medium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_medium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_medium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema socranskii paredis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_socranskii_paredis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_socranskii_paredis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olsenella profusa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olsenella_profusa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olsenella_profusa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema socranskii VPIDR56BR1116 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_socranskii_vpidr56br1116_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_socranskii_vpidr56br1116_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium pyruviciproducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_pyruviciproducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_pyruviciproducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deferrisoma camini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deferrisoma_camini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deferrisoma_camini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amycolatopsis orientalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amycolatopsis_orientalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amycolatopsis_orientalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bosea sp. 117 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bosea_sp_117_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bosea_sp_117_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. DOA9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_doa9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_doa9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella confusa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_confusa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_confusa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia cyriacigeorgica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_cyriacigeorgica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_cyriacigeorgica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola lipolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_lipolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_lipolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sp. F0381 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sp_f0381_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sp_f0381_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. F0429 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_f0429_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_f0429_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas catoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_catoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_catoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella atypica KON nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_atypica_kon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_atypica_kon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium acidurici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_acidurici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_acidurici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacterium sp. JKG1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacterium_sp_jkg1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacterium_sp_jkg1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING filamentous cyanobacterium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_filamentous_cyanobacterium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_filamentous_cyanobacterium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola mesophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_mesophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_mesophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma melliferum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_melliferum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_melliferum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma hyorhinis GDL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_hyorhinis_gdl1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_hyorhinis_gdl1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alishewanella jeotgali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alishewanella_jeotgali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alishewanella_jeotgali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glaciecola psychrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glaciecola_psychrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glaciecola_psychrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thaumarchaeota sp. SCGC AB629I23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thaumarchaeota_sp_scgc_ab629i23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thaumarchaeota_sp_scgc_ab629i23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrospina sp. AB629B18 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrospina_sp_ab629b18_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrospina_sp_ab629b18_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas fragariae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_fragariae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_fragariae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dehalobacter sp. CF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dehalobacter_sp_cf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dehalobacter_sp_cf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosomonas cryotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosomonas_cryotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosomonas_cryotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus vireti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_vireti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_vireti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. 83 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_83_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_83_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacterium sp. 88A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacterium_sp_88a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacterium_sp_88a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthobacter sp. 126 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthobacter_sp_126_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthobacter_sp_126_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 35W nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_35w_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_35w_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. 37MA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_37ma_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_37ma_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halococcus hamelinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halococcus_hamelinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halococcus_hamelinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. CCGE510 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_ccge510_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_ccge510_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylotenera mobilis 13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylotenera_mobilis_13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylotenera_mobilis_13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus vini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_vini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_vini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia brasiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_brasiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_brasiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces hygroscopicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_hygroscopicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_hygroscopicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. L1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_l1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_l1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces somaliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_somaliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_somaliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellvibrio sp. BR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellvibrio_sp_br_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellvibrio_sp_br_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella koehlerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_koehlerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_koehlerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylocystis parvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylocystis_parvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylocystis_parvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fragi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fragi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fragi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio cyclitrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_cyclitrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_cyclitrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus pentosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_pentosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_pentosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinispora pacifica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinispora_pacifica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinispora_pacifica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis sp. CNT312 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_sp_cnt312_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_sp_cnt312_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. CNH099 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_cnh099_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_cnh099_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharomonospora sp. CNQ490 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharomonospora_sp_cnq490_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharomonospora_sp_cnq490_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Formosa sp. AK20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_formosa_sp_ak20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_formosa_sp_ak20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endozoicomonas numazuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endozoicomonas_numazuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endozoicomonas_numazuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus curieae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_curieae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_curieae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus dispar nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_dispar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_dispar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus saccharolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_saccharolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_saccharolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus durans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_durans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_durans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus avium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_avium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_avium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus sulfureus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_sulfureus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_sulfureus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus intermedius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_intermedius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_intermedius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia burhodogranariea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_burhodogranariea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_burhodogranariea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Providencia rettgeri Dmel1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_providencia_rettgeri_dmel1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_providencia_rettgeri_dmel1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phycisphaera mikurensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phycisphaera_mikurensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phycisphaera_mikurensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wigglesworthia glossinidia sp. Gmo nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wigglesworthia_glossinidia_sp_gmo_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wigglesworthia_glossinidia_sp_gmo_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia gallinacea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_gallinacea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_gallinacea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corallococcus coralloides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corallococcus_coralloides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corallococcus_coralloides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium sp. AP12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_sp_ap12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_sp_ap12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium sp. AP49 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_sp_ap49_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_sp_ap49_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. CF080 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_cf080_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_cf080_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. CF122 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_cf122_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_cf122_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. CF136 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_cf136_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_cf136_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum sp. CF444 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_sp_cf444_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_sp_cf444_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. GM21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_gm21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_gm21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum sp. YR522 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_sp_yr522_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_sp_yr522_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phyllobacterium sp. YR531 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phyllobacterium_sp_yr531_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phyllobacterium_sp_yr531_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. CIP102129 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_cip102129_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_cip102129_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. CIP56.2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_cip562_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_cip562_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsia helvetica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsia_helvetica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsia_helvetica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HIMB058 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_himb058_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_himb058_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus varians nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_varians_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_varians_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastococcus saxobsidens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastococcus_saxobsidens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastococcus_saxobsidens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium asteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_asteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_asteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas pseudoalcaligenes KF707 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_pseudoalcaligenes_kf707_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_pseudoalcaligenes_kf707_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 9MFCol31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_9mfcol31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_9mfcol31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leifsonia sp. 109 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leifsonia_sp_109_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leifsonia_sp_109_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodospirillum photometricum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodospirillum_photometricum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodospirillum_photometricum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesoaciditoga lauensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesoaciditoga_lauensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesoaciditoga_lauensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium phlei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_phlei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_phlei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcticibacter svalbardensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcticibacter_svalbardensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcticibacter_svalbardensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum multivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_multivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_multivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaeospirillum molischianum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaeospirillum_molischianum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaeospirillum_molischianum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonospora lupini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonospora_lupini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonospora_lupini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tsukamurella sp. 1534 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tsukamurella_sp_1534_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tsukamurella_sp_1534_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rahnella aquatilis HX2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rahnella_aquatilis_hx2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rahnella_aquatilis_hx2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermococcus zilligii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermococcus_zilligii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermococcus_zilligii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 161MFSha21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_161mfsha21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_161mfsha21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 162MFSha11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_162mfsha11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_162mfsha11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. 292MF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_292mf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_292mf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium paraoxydans 77MFTsu32 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_paraoxydans_77mftsu32_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_paraoxydans_77mftsu32_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mandelii 36MFCvi11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mandelii_36mfcvi11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mandelii_36mfcvi11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoclostridium difficile CD160 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoclostridium_difficile_cd160_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoclostridium_difficile_cd160_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc pseudomesenteroides nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_pseudomesenteroides_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_pseudomesenteroides_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus agalactiae LMG14747 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_agalactiae_lmg14747_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_agalactiae_lmg14747_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. LaPpAH108 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_lappah108_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_lappah108_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. MspMPM5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_mspmpm5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_mspmpm5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. HmicA12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_hmica12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_hmica12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter piechaudii HLE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_piechaudii_hle_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_piechaudii_hle_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium albertimagni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_albertimagni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_albertimagni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylacidiphilum fumariolicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylacidiphilum_fumariolicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylacidiphilum_fumariolicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tumebacillus flagellatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tumebacillus_flagellatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tumebacillus_flagellatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. LaPpAH95 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_lappah95_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_lappah95_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. Amel2xE9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_amel2xe9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_amel2xe9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. ATexABD23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_atexabd23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_atexabd23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. BoleA5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_bolea5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_bolea5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. PsTaAH124 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_pstaah124_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_pstaah124_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. FxanaC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_fxanac1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_fxanac1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Variovorax paradoxus 110B nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_variovorax_paradoxus_110b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_variovorax_paradoxus_110b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. 155 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_155_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_155_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. 135MFCol51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_135mfcol51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_135mfcol51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALJT nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_aljt_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_aljt_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALD1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_ald1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_ald1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALMg11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_almg11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_almg11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALE31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_ale31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_ale31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomonas sp. FBCd nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomonas_sp_fbcd_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomonas_sp_fbcd_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. 10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfurobacterium sp. TC51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfurobacterium_sp_tc51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfurobacterium_sp_tc51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Persephonella sp. IF05L8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_persephonella_sp_if05l8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_persephonella_sp_if05l8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Persephonella sp. KM09Lau8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_persephonella_sp_km09lau8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_persephonella_sp_km09lau8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus malodoratus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_malodoratus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_malodoratus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus raffinosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_raffinosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_raffinosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus villorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_villorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_villorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus asini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_asini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_asini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus pallens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_pallens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_pallens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus haemoperoxidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_haemoperoxidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_haemoperoxidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus moraviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_moraviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_moraviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus phoeniculicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_phoeniculicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_phoeniculicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus caccae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_caccae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_caccae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus gilvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_gilvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_gilvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALJ7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alj7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alj7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALJ11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alj11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alj11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALJ16 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alj16_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alj16_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus equorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_equorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_equorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella sp. FB8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_sp_fb8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_sp_fb8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia sp. BMG111209 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_sp_bmg111209_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_sp_bmg111209_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ureibacillus thermosphaericus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ureibacillus_thermosphaericus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ureibacillus_thermosphaericus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces auratus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_auratus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_auratus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus bicirculans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_bicirculans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_bicirculans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maricaulis sp. JL2009 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maricaulis_sp_jl2009_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maricaulis_sp_jl2009_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. ACC21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_acc21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_acc21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium nodatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_nodatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_nodatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptospirillum ferrooxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptospirillum_ferrooxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptospirillum_ferrooxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phytoplasma peanut witchesbroom nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phytoplasma_peanut_witchesbroom_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phytoplasma_peanut_witchesbroom_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella noatunensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_noatunensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_noatunensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. HYS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_hys_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_hys_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodanobacter spathiphylli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodanobacter_spathiphylli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodanobacter_spathiphylli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodanobacter fulvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodanobacter_fulvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodanobacter_fulvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodanobacter thiooxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodanobacter_thiooxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodanobacter_thiooxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfuricella denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfuricella_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfuricella_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. 12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fervidicoccus fontis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fervidicoccus_fontis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fervidicoccus_fontis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter cetorum MIT995656 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_cetorum_mit995656_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_cetorum_mit995656_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Richelia intracellularis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_richelia_intracellularis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_richelia_intracellularis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylotenera sp. 73s nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylotenera_sp_73s_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylotenera_sp_73s_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurovum sp. AR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurovum_sp_ar_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurovum_sp_ar_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pectobacterium sp. SCC3193 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pectobacterium_sp_scc3193_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pectobacterium_sp_scc3193_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fibrella aestuarina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fibrella_aestuarina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fibrella_aestuarina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter sp. R4368 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_sp_r4368_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_sp_r4368_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas xinjiangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_xinjiangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_xinjiangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfocapsa sulfexigens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfocapsa_sulfexigens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfocapsa_sulfexigens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus vitulinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_vitulinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_vitulinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Draconibacterium orientale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_draconibacterium_orientale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_draconibacterium_orientale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthobacteraceae bacterium 501b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthobacteraceae_bacterium_501b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthobacteraceae_bacterium_501b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium BDW918 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_bdw918_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_bdw918_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiomicrospira kuenenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiomicrospira_kuenenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiomicrospira_kuenenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinilabilia salmonicolor nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinilabilia_salmonicolor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinilabilia_salmonicolor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia bryophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_bryophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_bryophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. 123MFChir2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_123mfchir2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_123mfchir2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia sp. CNY236 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_sp_cny236_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_sp_cny236_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. CNT372 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_cnt372_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_cnt372_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. CNY243 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_cny243_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_cny243_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium avidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_avidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_avidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Calothrix sp. PCC6303 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_calothrix_sp_pcc6303_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_calothrix_sp_pcc6303_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium acidipropionici nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_acidipropionici_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_acidipropionici_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. 142MFCol31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_142mfcol31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_142mfcol31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. 351MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_351mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_351mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. 303MFCol52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_303mfcol52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_303mfcol52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia sp. 348MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_sp_348mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_sp_348mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. 360MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_360mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_360mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Terracoccus sp. 273MFTsu31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_terracoccus_sp_273mftsu31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_terracoccus_sp_273mftsu31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurimonas sp. AST10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurimonas_sp_ast10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurimonas_sp_ast10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter cinaedi PAGU611 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_cinaedi_pagu611_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_cinaedi_pagu611_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chamaesiphon minutus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chamaesiphon_minutus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chamaesiphon_minutus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobacterium sp. PCC7702 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobacterium_sp_pcc7702_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobacterium_sp_pcc7702_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Crinalium epipsammum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_crinalium_epipsammum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_crinalium_epipsammum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fischerella sp. PCC9431 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fischerella_sp_pcc9431_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fischerella_sp_pcc9431_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fischerella sp. PCC9605 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fischerella_sp_pcc9605_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fischerella_sp_pcc9605_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geitlerinema sp. PCC7407 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geitlerinema_sp_pcc7407_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geitlerinema_sp_pcc7407_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gloeocapsa sp. PCC7428 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gloeocapsa_sp_pcc7428_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gloeocapsa_sp_pcc7428_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microcoleus sp. PCC7113 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microcoleus_sp_pcc7113_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microcoleus_sp_pcc7113_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillatoria sp. PCC10802 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillatoria_sp_pcc10802_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillatoria_sp_pcc10802_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirulina subsalsa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirulina_subsalsa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirulina_subsalsa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. PCC7502 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_pcc7502_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_pcc7502_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. PCC6406 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_pcc6406_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_pcc6406_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colletotrichum sublineola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colletotrichum_sublineola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colletotrichum_sublineola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus psychrosaccharolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_psychrosaccharolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_psychrosaccharolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fischerella sp. PCC9339 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fischerella_sp_pcc9339_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fischerella_sp_pcc9339_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Liberibacter asiaticus gxpsy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_liberibacter_asiaticus_gxpsy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_liberibacter_asiaticus_gxpsy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis sp. MC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_sp_mc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_sp_mc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Herbaspirillum sp. GW103 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_herbaspirillum_sp_gw103_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_herbaspirillum_sp_gw103_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aerococcus viridans LL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aerococcus_viridans_ll1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aerococcus_viridans_ll1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium massiliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_massiliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_massiliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax sp. 19m6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_sp_19m6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_sp_19m6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax hongdengensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_hongdengensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_hongdengensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax jadensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_jadensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_jadensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. C448 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_c448_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_c448_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassospira profundimaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassospira_profundimaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassospira_profundimaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. BJGMMB45 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_bjgmmb45_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_bjgmmb45_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus xiamenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_xiamenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_xiamenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. DW54 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_dw54_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_dw54_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenitalea lutea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenitalea_lutea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenitalea_lutea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photodesmus blepharus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photodesmus_blepharus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photodesmus_blepharus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus lentus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_lentus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_lentus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharothrix espanaensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharothrix_espanaensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharothrix_espanaensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma sp. G5847 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_sp_g5847_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_sp_g5847_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. M47T1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_m47t1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_m47t1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cladophialophora psammophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cladophialophora_psammophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cladophialophora_psammophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas pseudoalcaligenes CECT5344 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_pseudoalcaligenes_cect5344_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_pseudoalcaligenes_cect5344_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pyrococcus sp. ST04 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pyrococcus_sp_st04_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pyrococcus_sp_st04_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gloeobacter kilaueensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gloeobacter_kilaueensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gloeobacter_kilaueensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermogladius cellulolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermogladius_cellulolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermogladius_cellulolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bdellovibrio exovorus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bdellovibrio_exovorus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bdellovibrio_exovorus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Austwickia chelonae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_austwickia_chelonae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_austwickia_chelonae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kineosphaera limosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kineosphaera_limosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kineosphaera_limosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium fredii USDA257 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_fredii_usda257_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_fredii_usda257_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planococcus antarcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planococcus_antarcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planococcus_antarcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioclava dalianensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioclava_dalianensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioclava_dalianensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fibrisoma limi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fibrisoma_limi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fibrisoma_limi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. Bgi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_bgi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_bgi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio genomosp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_genomosp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_genomosp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodovulum sp. PH10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodovulum_sp_ph10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodovulum_sp_ph10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma auris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_auris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_auris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma alkalescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_alkalescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_alkalescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma bovigenitalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_bovigenitalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_bovigenitalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma arginini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_arginini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_arginini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma ovipneumoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_ovipneumoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_ovipneumoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma yeatsii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_yeatsii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_yeatsii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ureaplasma diversum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ureaplasma_diversum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ureaplasma_diversum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio rumoiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_rumoiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_rumoiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodovulum sulfidophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodovulum_sulfidophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodovulum_sulfidophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Indibacter alkaliphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_indibacter_alkaliphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_indibacter_alkaliphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychroflexus gondwanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychroflexus_gondwanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychroflexus_gondwanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. ACAM123 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_acam123_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_acam123_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterovibrio norvegicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterovibrio_norvegicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterovibrio_norvegicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterovibrio calviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterovibrio_calviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterovibrio_calviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio kanaloae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_kanaloae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_kanaloae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter venetianus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_venetianus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_venetianus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Melioribacter roseus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_melioribacter_roseus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_melioribacter_roseus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chondromyces apiculatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chondromyces_apiculatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chondromyces_apiculatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. lig30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_lig30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_lig30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium xenophagum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_xenophagum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_xenophagum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudaminobacter salicylatoxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudaminobacter_salicylatoxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudaminobacter_salicylatoxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parascardovia denticolens IPLA20019 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parascardovia_denticolens_ipla20019_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parascardovia_denticolens_ipla20019_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tetrasphaera elongata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tetrasphaera_elongata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tetrasphaera_elongata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endolissoclinum faulkneri L2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endolissoclinum_faulkneri_l2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endolissoclinum_faulkneri_l2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium yannicii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_yannicii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_yannicii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus warneri SG1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_warneri_sg1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_warneri_sg1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium vaccae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_vaccae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_vaccae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium termitidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_termitidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_termitidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alishewanella agri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alishewanella_agri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alishewanella_agri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Virgibacillus halodenitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_virgibacillus_halodenitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_virgibacillus_halodenitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus endophyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_endophyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_endophyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus oceanisediminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_oceanisediminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_oceanisediminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Snodgrassella alvi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_snodgrassella_alvi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_snodgrassella_alvi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gilliamella apicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gilliamella_apicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gilliamella_apicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. Maddingley nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_maddingley_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_maddingley_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. OSYSE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_osyse_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_osyse_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus macauensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_macauensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_macauensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri CCUG 29243 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_ccug_29243_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_ccug_29243_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halococcus sp. 197A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halococcus_sp_197a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halococcus_sp_197a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mangrovimonas yunxiaonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mangrovimonas_yunxiaonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mangrovimonas_yunxiaonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. M2012083 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_m2012083_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_m2012083_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salmonella bongori N26808 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salmonella_bongori_n26808_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salmonella_bongori_n26808_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia birgiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_birgiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_birgiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Granulicella tundricola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_granulicella_tundricola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_granulicella_tundricola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cycloclasticus zancles nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cycloclasticus_zancles_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cycloclasticus_zancles_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeropyrum camini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeropyrum_camini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeropyrum_camini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janthinobacterium sp. HH01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janthinobacterium_sp_hh01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janthinobacterium_sp_hh01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus mutans GS5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_mutans_gs5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_mutans_gs5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium terpenotabidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_terpenotabidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_terpenotabidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerovibrio sp. RM50 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerovibrio_sp_rm50_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerovibrio_sp_rm50_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminobacter sp. RM87 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminobacter_sp_rm87_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminobacter_sp_rm87_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus brevis X23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_brevis_x23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_brevis_x23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella birtlesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_birtlesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_birtlesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteriovorax sp. Seq25V nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteriovorax_sp_seq25v_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteriovorax_sp_seq25v_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteriovorax sp. BAL6X nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteriovorax_sp_bal6x_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteriovorax_sp_bal6x_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus faecalis ATCC29212 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_faecalis_atcc29212_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_faecalis_atcc29212_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moritella dasanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moritella_dasanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moritella_dasanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. F52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_f52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_f52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halopiger salifodinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halopiger_salifodinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halopiger_salifodinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moritella marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moritella_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moritella_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus ingluviei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_ingluviei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_ingluviei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium timonense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_timonense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_timonense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oralis HGA0225 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oralis_hga0225_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oralis_hga0225_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sutterella wadsworthensis HGA0223 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sutterella_wadsworthensis_hga0223_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sutterella_wadsworthensis_hga0223_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. HPA0247 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_hpa0247_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_hpa0247_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. KPL1859 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_kpl1859_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_kpl1859_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. KPL1860 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_kpl1860_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_kpl1860_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dermabacter sp. HFH0086 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dermabacter_sp_hfh0086_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dermabacter_sp_hfh0086_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. HPH0090 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_hph0090_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_hph0090_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium sp. F0494 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_sp_f0494_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_sp_f0494_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium sp. F0372 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_sp_f0372_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_sp_f0372_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyricicoccus pullicaecorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyricicoccus_pullicaecorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyricicoccus_pullicaecorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes onderdonkii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_onderdonkii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_onderdonkii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. KPL1989 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_kpl1989_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_kpl1989_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. KPL2004 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_kpl2004_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_kpl2004_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Reyranella massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_reyranella_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_reyranella_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella rattaustraliani nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_rattaustraliani_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_rattaustraliani_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas translucens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_translucens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_translucens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio breoganii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_breoganii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_breoganii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis alba nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_alba_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_alba_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. CNR698 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_cnr698_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_cnr698_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia aobensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_aobensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_aobensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia brevicatena nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_brevicatena_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_brevicatena_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia carnea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_carnea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_carnea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia exalbida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_exalbida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_exalbida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia higoensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_higoensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_higoensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia jiangxiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_jiangxiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_jiangxiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia otitidiscaviarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_otitidiscaviarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_otitidiscaviarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia niigatensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_niigatensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_niigatensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia takedensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_takedensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_takedensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia pneumoniae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_pneumoniae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_pneumoniae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia testacea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_testacea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_testacea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia concava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_concava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_concava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia veterana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_veterana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_veterana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia transvalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_transvalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_transvalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. Lz4W nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_lz4w_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_lz4w_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium sp. C100 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_sp_c100_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_sp_c100_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. L53140 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_l53140_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_l53140_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanibaculum indicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanibaculum_indicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanibaculum_indicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. UW4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_uw4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_uw4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas luteola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_luteola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_luteola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinomonas sp. D104 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinomonas_sp_d104_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinomonas_sp_d104_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Celeribacter baekdonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_celeribacter_baekdonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_celeribacter_baekdonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Commensalibacter sp. MX01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_commensalibacter_sp_mx01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_commensalibacter_sp_mx01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kinetoplastibacterium crithidii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kinetoplastibacterium_crithidii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kinetoplastibacterium_crithidii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kinetoplastibacterium desouzaii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kinetoplastibacterium_desouzaii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kinetoplastibacterium_desouzaii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kinetoplastibacterium oncopeltii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kinetoplastibacterium_oncopeltii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kinetoplastibacterium_oncopeltii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kinetoplastibacterium galatii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kinetoplastibacterium_galatii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kinetoplastibacterium_galatii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kinetoplastibacterium blastocrithidii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kinetoplastibacterium_blastocrithidii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kinetoplastibacterium_blastocrithidii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellvibrio mixtus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellvibrio_mixtus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellvibrio_mixtus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium mageritense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_mageritense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_mageritense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tepidanaerobacter acetatoxydans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tepidanaerobacter_acetatoxydans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tepidanaerobacter_acetatoxydans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. AA0539 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_aa0539_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_aa0539_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janibacter hoylei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janibacter_hoylei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janibacter_hoylei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemmata sp. IIL30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemmata_sp_iil30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemmata_sp_iil30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halogranum salarium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halogranum_salarium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halogranum_salarium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas psychrophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_psychrophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_psychrophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoxanthomonas sp. GW2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoxanthomonas_sp_gw2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoxanthomonas_sp_gw2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chelatococcus sp. GW1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chelatococcus_sp_gw1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chelatococcus_sp_gw1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida NBRC14164 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_nbrc14164_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_nbrc14164_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium mesoamericanum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_mesoamericanum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_mesoamericanum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes marseilloanorexicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_marseilloanorexicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_marseilloanorexicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus massilioanorexius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_massilioanorexius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_massilioanorexius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastococcus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastococcus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastococcus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium anorexicamassiliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_anorexicamassiliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_anorexicamassiliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Holdemania massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_holdemania_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_holdemania_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stoquefichus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stoquefichus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stoquefichus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri NF13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_nf13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_nf13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacteriaceae bacterium B14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacteriaceae_bacterium_b14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacteriaceae_bacterium_b14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces davawensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_davawensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_davawensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis 865192 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_865192_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_865192_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis 22083 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_22083_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_22083_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis YS72 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_ys72_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_ys72_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces collinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_collinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_collinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas alcaligenes NBRC14159 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_alcaligenes_nbrc14159_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_alcaligenes_nbrc14159_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas parafulva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_parafulva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_parafulva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Liberibacter crescens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_liberibacter_crescens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_liberibacter_crescens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus raffinolactis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_raffinolactis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_raffinolactis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas ruthenica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_ruthenica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_ruthenica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium hwasookii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_hwasookii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_hwasookii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. M240 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_m240_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_m240_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Edwardsiella hoshinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_edwardsiella_hoshinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_edwardsiella_hoshinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Elizabethkingia meningoseptica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_elizabethkingia_meningoseptica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_elizabethkingia_meningoseptica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter xylosoxidans NBRC15126 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_xylosoxidans_nbrc15126_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_xylosoxidans_nbrc15126_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter beijerinckii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_beijerinckii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_beijerinckii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter brisouii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_brisouii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_brisouii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter guillouiae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_guillouiae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_guillouiae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter gyllenbergii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_gyllenbergii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_gyllenbergii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. ANC4105 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_anc4105_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_anc4105_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. ANC3862 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_anc3862_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_anc3862_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NIPH2100 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_niph2100_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_niph2100_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NIPH899 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_niph899_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_niph899_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NIPH758 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_niph758_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_niph758_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. NIPH809 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_niph809_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_niph809_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. ANC3789 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_anc3789_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_anc3789_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter bohemicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_bohemicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_bohemicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cupriavidus sp. BIS7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cupriavidus_sp_bis7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cupriavidus_sp_bis7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseomonas sp. B5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseomonas_sp_b5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseomonas_sp_b5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia acidipaludis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_acidipaludis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_acidipaludis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia bannensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_bannensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_bannensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia ferrariae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_ferrariae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_ferrariae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Citrobacter sedlakii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_citrobacter_sedlakii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_citrobacter_sedlakii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium indologenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_indologenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_indologenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Empedobacter brevis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_empedobacter_brevis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_empedobacter_brevis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus alcalophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_alcalophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_alcalophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri KOS6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_kos6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_kos6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Comamonas aquatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_comamonas_aquatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_comamonas_aquatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novosphingobium tardaugens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novosphingobium_tardaugens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novosphingobium_tardaugens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium herbicidovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_herbicidovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_herbicidovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas parapaucimobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_parapaucimobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_parapaucimobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio proteolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_proteolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_proteolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio halioticoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_halioticoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_halioticoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio alginolyticus NBRC15630 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_alginolyticus_nbrc15630_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_alginolyticus_nbrc15630_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio azureus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_azureus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_azureus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio ezurae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_ezurae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_ezurae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga hypogea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_hypogea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_hypogea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas cassavae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_cassavae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_cassavae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. S4C9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_s4c9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_s4c9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcanobacterium sp. S3PF19 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcanobacterium_sp_s3pf19_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcanobacterium_sp_s3pf19_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcus sp. MV1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcus_sp_mv1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcus_sp_mv1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanobacterium sp. Maddingley nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanobacterium_sp_maddingley_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanobacterium_sp_maddingley_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium IMCC14465 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_imcc14465_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_imcc14465_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus chromogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_chromogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_chromogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium rubi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_rubi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_rubi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia aichiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_aichiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_aichiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus odysseyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_odysseyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_odysseyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas fluorescens NCIMB11764 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_fluorescens_ncimb11764_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_fluorescens_ncimb11764_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus florum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_florum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_florum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Altibacter lentus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_altibacter_lentus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_altibacter_lentus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Comamonas granuli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_comamonas_granuli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_comamonas_granuli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces mobaraensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_mobaraensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_mobaraensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia malaquae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_malaquae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_malaquae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia paraffinivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_paraffinivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_paraffinivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia sihwensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_sihwensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_sihwensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia soli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_soli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_soli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacteriaceae bacterium LSJC7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacteriaceae_bacterium_lsjc7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacteriaceae_bacterium_lsjc7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium maris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_maris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_maris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium vitaeruminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_vitaeruminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_vitaeruminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mangrovibacter sp. MFB070 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mangrovibacter_sp_mfb070_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mangrovibacter_sp_mfb070_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gluconobacter oxydans H24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gluconobacter_oxydans_h24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gluconobacter_oxydans_h24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. A4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_a4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_a4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya sp. DW 0440 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_sp_dw_0440_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_sp_dw_0440_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillibacter sp. KLE1728 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillibacter_sp_kle1728_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillibacter_sp_kle1728_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. KLE1755 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_kle1755_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_kle1755_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas nitroreducens TX1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_nitroreducens_tx1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_nitroreducens_tx1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinobaculum sp. F0552 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobaculum_sp_f0552_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobaculum_sp_f0552_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Capnocytophaga sp. F0517 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_capnocytophaga_sp_f0517_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_capnocytophaga_sp_f0517_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia sp. F0557 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_sp_f0557_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_sp_f0557_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas sp. W7784 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_sp_w7784_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_sp_w7784_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. F0091 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_f0091_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_f0091_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLH7689 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslh7689_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslh7689_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLR7277 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslr7277_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslr7277_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Viridibacillus arenosi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_viridibacillus_arenosi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_viridibacillus_arenosi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloarcula japonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloarcula_japonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloarcula_japonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobiforma nitratireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobiforma_nitratireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobiforma_nitratireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halococcus thailandensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halococcus_thailandensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halococcus_thailandensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halorubrum saccharovorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halorubrum_saccharovorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halorubrum_saccharovorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halosarcina pallida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halosarcina_pallida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halosarcina_pallida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloterrigena salina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloterrigena_salina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloterrigena_salina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natrinema pallidum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natrinema_pallidum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natrinema_pallidum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronococcus amylolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronococcus_amylolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronococcus_amylolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronolimnobius innermongolicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronolimnobius_innermongolicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronolimnobius_innermongolicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronorubrum bangense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronorubrum_bangense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronorubrum_bangense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hymenobacter swuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hymenobacter_swuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hymenobacter_swuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. KIOST1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_kiost1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_kiost1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING actinobacterium LLX17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacterium_llx17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacterium_llx17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium L41A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_l41a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_l41a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia phenoliruptrix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_phenoliruptrix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_phenoliruptrix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium sp. ACCC05744 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_sp_accc05744_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_sp_accc05744_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium WG36 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_wg36_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_wg36_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. WG21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_wg21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_wg21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. BPAA nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_bpaa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_bpaa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus garvieae I113 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_garvieae_i113_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_garvieae_i113_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkalibacterium sp. AK22 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkalibacterium_sp_ak22_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkalibacterium_sp_ak22_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc gelidum JB7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_gelidum_jb7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_gelidum_jb7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leuconostoc carnosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leuconostoc_carnosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leuconostoc_carnosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microthrix parvicella nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microthrix_parvicella_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microthrix_parvicella_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium casei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_casei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_casei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus massiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_massiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_massiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia avium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_avium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_avium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosopumilus sp. AR2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosopumilus_sp_ar2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosopumilus_sp_ar2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Moraxella macacae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_moraxella_macacae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_moraxella_macacae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salimicrobium sp. MJ3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salimicrobium_sp_mj3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salimicrobium_sp_mj3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium tetanomorphum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_tetanomorphum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_tetanomorphum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella anisa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_anisa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_anisa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloterrigena limicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloterrigena_limicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloterrigena_limicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Natronorubrum sulfidifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_natronorubrum_sulfidifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_natronorubrum_sulfidifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. DFCI1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_dfci1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_dfci1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenisporosarcina sp. TG14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenisporosarcina_sp_tg14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenisporosarcina_sp_tg14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratireductor aquibiodomus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratireductor_aquibiodomus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratireductor_aquibiodomus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitratireductor indicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitratireductor_indicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitratireductor_indicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermotoga sp. Mc24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermotoga_sp_mc24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermotoga_sp_mc24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus shenzhenensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_shenzhenensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_shenzhenensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactococcus garvieae DCC43 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactococcus_garvieae_dcc43_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactococcus_garvieae_dcc43_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pusillimonas noertemannii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pusillimonas_noertemannii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pusillimonas_noertemannii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceaniovalibus guishaninsula nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceaniovalibus_guishaninsula_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceaniovalibus_guishaninsula_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cardinium endosymbiont cEper1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cardinium_endosymbiont_ceper1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cardinium_endosymbiont_ceper1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfuromonas sp. TF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfuromonas_sp_tf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfuromonas_sp_tf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. GD7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_gd7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_gd7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera sp. NP3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_sp_np3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_sp_np3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nesterenkonia sp. NP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nesterenkonia_sp_np1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nesterenkonia_sp_np1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nosocomiicoccus sp. NP2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nosocomiicoccus_sp_np2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nosocomiicoccus_sp_np2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coriobacteriaceae bacterium GD5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coriobacteriaceae_bacterium_gd5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coriobacteriaceae_bacterium_gd5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfobacula sp. TS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfobacula_sp_ts_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfobacula_sp_ts_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20213 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20213_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20213_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20218 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20218_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20218_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20209 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20209_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20209_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20208 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20208_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20208_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20214 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20214_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20214_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium VE20221 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_ve20221_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_ve20221_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus sciuri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_sciuri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_sciuri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacterium sp. AK27 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacterium_sp_ak27_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacterium_sp_ak27_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium sp. JM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_sp_jm1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_sp_jm1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Epilithonimonas sp. FH1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_epilithonimonas_sp_fh1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_epilithonimonas_sp_fh1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dyella ginsengisoli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dyella_ginsengisoli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dyella_ginsengisoli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catellicoccus marimammalium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catellicoccus_marimammalium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catellicoccus_marimammalium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus sp. E463 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_sp_e463_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_sp_e463_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium JLT2015 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_jlt2015_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_jlt2015_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus caldoxylosilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_caldoxylosilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_caldoxylosilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium maltaromaticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_maltaromaticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_maltaromaticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bhargavaea cecembensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bhargavaea_cecembensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bhargavaea_cecembensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia sp. AU1208 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_sp_au1208_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_sp_au1208_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinicoccus carnicancri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinicoccus_carnicancri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinicoccus_carnicancri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides massiliensis dnLKV3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_massiliensis_dnlkv3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_massiliensis_dnlkv3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium sp. 142 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_sp_142_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_sp_142_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium M181 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_m181_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_m181_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium COE1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_coe1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_coe1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterorhabdus caecimuris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterorhabdus_caecimuris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterorhabdus_caecimuris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Firmicutes bacterium M102 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_firmicutes_bacterium_m102_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_firmicutes_bacterium_m102_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillibacter sp. 13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillibacter_sp_13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillibacter_sp_13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dorea sp. 52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dorea_sp_52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dorea_sp_52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 32 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_32_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_32_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium 101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus murinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_murinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_murinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium plexicaudatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_plexicaudatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_plexicaudatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parabacteroides sp. ASF519 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parabacteroides_sp_asf519_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parabacteroides_sp_asf519_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella disiens JCM6334 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_disiens_jcm6334_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_disiens_jcm6334_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides pyogenes JCM10003 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_pyogenes_jcm10003_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_pyogenes_jcm10003_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella enoeca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_enoeca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_enoeca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerotruncus sp. G3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerotruncus_sp_g3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerotruncus_sp_g3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halyomorpha halys nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halyomorpha_halys_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halyomorpha_halys_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella pleuritidis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_pleuritidis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_pleuritidis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella oulorum JCM14966 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_oulorum_jcm14966_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_oulorum_jcm14966_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter okinawensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_okinawensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_okinawensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella histicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_histicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_histicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides stercorirosoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_stercorirosoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_stercorirosoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella fusca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_fusca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_fusca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella scopos nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_scopos_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_scopos_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella haliotis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_haliotis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_haliotis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella marina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_marina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_marina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methanomethylophilus alvus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methanomethylophilus_alvus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methanomethylophilus_alvus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis baichengensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_baichengensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_baichengensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Wolbachia sp. Dsi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_wolbachia_sp_dsi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_wolbachia_sp_dsi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylobacillus glycogenes nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylobacillus_glycogenes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylobacillus_glycogenes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus akibai nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_akibai_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_akibai_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus pini nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_pini_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_pini_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fulvivirga imtechensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fulvivirga_imtechensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fulvivirga_imtechensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis ganjiahuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_ganjiahuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_ganjiahuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenispirillum salinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenispirillum_salinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenispirillum_salinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus kimchii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_kimchii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_kimchii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leucobacter salsicius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leucobacter_salsicius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leucobacter_salsicius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas jeotgali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_jeotgali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_jeotgali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia psittaci 10139811 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_psittaci_10139811_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_psittaci_10139811_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloquadratum walsbyi J07HQW2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloquadratum_walsbyi_j07hqw2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloquadratum_walsbyi_j07hqw2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio nigripulchritudo nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_nigripulchritudo_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_nigripulchritudo_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dokdonia sp. PRO95 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dokdonia_sp_pro95_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dokdonia_sp_pro95_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mariniradius saccharolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mariniradius_saccharolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mariniradius_saccharolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus ruber nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_ruber_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_ruber_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas putida MTCC5279 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_putida_mtcc5279_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_putida_mtcc5279_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cystobacter fuscus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cystobacter_fuscus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cystobacter_fuscus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter concisus ATCC51562 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_concisus_atcc51562_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_concisus_atcc51562_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. G2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_g2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_g2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter showae CSUNSWCD nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_showae_csunswcd_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_showae_csunswcd_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter fetus testudinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_fetus_testudinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_fetus_testudinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter sp. 1485E nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_sp_1485e_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_sp_1485e_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Magnetospirillum sp. SO1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_magnetospirillum_sp_so1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_magnetospirillum_sp_so1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium oligotrophicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_oligotrophicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_oligotrophicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas resinovorans NBRC106553 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_resinovorans_nbrc106553_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_resinovorans_nbrc106553_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis prasina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_prasina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_prasina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis kunsanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_kunsanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_kunsanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis valliformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_valliformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_valliformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. 2MFCol31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_2mfcol31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_2mfcol31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardiopsis xinjiangensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardiopsis_xinjiangensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardiopsis_xinjiangensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobacillus sp. BAB2008 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobacillus_sp_bab2008_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobacillus_sp_bab2008_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus lehensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_lehensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_lehensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma cynos nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_cynos_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_cynos_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinoplanes friuliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinoplanes_friuliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinoplanes_friuliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arsenophonus endosymbiont nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arsenophonus_endosymbiont_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arsenophonus_endosymbiont_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella holmesii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_holmesii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_holmesii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Advenella mimigardefordensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_advenella_mimigardefordensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_advenella_mimigardefordensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Parvularcula oceani nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_parvularcula_oceani_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_parvularcula_oceani_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium leiognathi lrivu41 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_leiognathi_lrivu41_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_leiognathi_lrivu41_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastomonas sp. AAP53 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastomonas_sp_aap53_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastomonas_sp_aap53_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sandarakinorhabdus sp. AAP62 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sandarakinorhabdus_sp_aap62_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sandarakinorhabdus_sp_aap62_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyrobacter sp. AAP82 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyrobacter_sp_aap82_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyrobacter_sp_aap82_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfuricurvum sp. RIFRC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfuricurvum_sp_rifrc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfuricurvum_sp_rifrc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thiorhodococcus sp. AK35 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thiorhodococcus_sp_ak35_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thiorhodococcus_sp_ak35_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia marcescens FGI94 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_marcescens_fgi94_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_marcescens_fgi94_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gillisia sp. HelI29 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gillisia_sp_heli29_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gillisia_sp_heli29_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maribacter sp. HelI7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maribacter_sp_heli7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maribacter_sp_heli7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaribacter sp. Hel185 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaribacter_sp_hel185_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaribacter_sp_hel185_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaribacter sp. HelI88 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaribacter_sp_heli88_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaribacter_sp_heli88_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Muricauda sp. MAR201075 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_muricauda_sp_mar201075_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_muricauda_sp_mar201075_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salegentibacter sp. HelI6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salegentibacter_sp_heli6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salegentibacter_sp_heli6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sorangium cellulosum So01572 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sorangium_cellulosum_so01572_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sorangium_cellulosum_so01572_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio nitratireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_nitratireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_nitratireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium ramulus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_ramulus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_ramulus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprothermobacter platensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprothermobacter_platensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprothermobacter_platensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiribacter salinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiribacter_salinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiribacter_salinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus faecalis 13SDW01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_faecalis_13sdw01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_faecalis_13sdw01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Liberibacter americanus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_liberibacter_americanus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_liberibacter_americanus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halarchaeum acidiphilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halarchaeum_acidiphilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halarchaeum_acidiphilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium pasteurianum DSM525 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_pasteurianum_dsm525_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_pasteurianum_dsm525_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phascolarctobacterium sp. CAG207 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phascolarctobacterium_sp_cag207_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phascolarctobacterium_sp_cag207_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phascolarctobacterium sp. CAG266 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phascolarctobacterium_sp_cag266_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phascolarctobacterium_sp_cag266_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bibersteinia trehalosi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bibersteinia_trehalosi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bibersteinia_trehalosi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium asiaticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_asiaticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_asiaticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haliea rubra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haliea_rubra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haliea_rubra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. URMO17WK12I8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_urmo17wk12i8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_urmo17wk12i8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldimonas manganoxidans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldimonas_manganoxidans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldimonas_manganoxidans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Colwellia piezophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_colwellia_piezophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_colwellia_piezophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfospira joergensenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfospira_joergensenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfospira_joergensenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Succinimonas amylolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_succinimonas_amylolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_succinimonas_amylolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HTCC9022 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_htcc9022_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_htcc9022_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeria weihenstephanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeria_weihenstephanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeria_weihenstephanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium sp. WN1359 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_sp_wn1359_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_sp_wn1359_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALE6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_ale6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_ale6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALE19 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_ale19_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_ale19_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. AKL19 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_akl19_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_akl19_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosospira briensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosospira_briensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosospira_briensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus zeaxanthinifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_zeaxanthinifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_zeaxanthinifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus parabrevis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_parabrevis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_parabrevis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomicrobium zavarzinii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomicrobium_zavarzinii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomicrobium_zavarzinii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sediminibacterium sp. C3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sediminibacterium_sp_c3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sediminibacterium_sp_c3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacteriaceae bacterium KBS83 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacteriaceae_bacterium_kbs83_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacteriaceae_bacterium_kbs83_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacteriaceae bacterium KBS89 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacteriaceae_bacterium_kbs89_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacteriaceae_bacterium_kbs89_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacteriaceae bacterium KBS96 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacteriaceae_bacterium_kbs96_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacteriaceae_bacterium_kbs96_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus flavithermus TNO09006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_flavithermus_tno09006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_flavithermus_tno09006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. IMH nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_imh_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_imh_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. G5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_g5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_g5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sabinae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sabinae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sabinae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas diversa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_diversa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_diversa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas luteoviolacea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_luteoviolacea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_luteoviolacea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides cellulosilyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_cellulosilyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_cellulosilyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus sp. AW25M09 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_sp_aw25m09_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_sp_aw25m09_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax sp. MRS7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_sp_mrs7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_sp_mrs7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella oakridgensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_oakridgensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_oakridgensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. ALR1721 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_alr1721_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_alr1721_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. KJJ nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_kjj_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_kjj_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter sp. R2019 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_sp_r2019_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_sp_r2019_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Megasphaera sp. NM10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_megasphaera_sp_nm10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_megasphaera_sp_nm10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus rhodnii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_rhodnii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_rhodnii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planomicrobium glaciei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planomicrobium_glaciei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planomicrobium_glaciei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. GD11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_gd11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_gd11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hepatobacter penaei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hepatobacter_penaei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hepatobacter_penaei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sonorensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sonorensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sonorensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma taiwanense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_taiwanense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_taiwanense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma diminutum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_diminutum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_diminutum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma chrysopicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_chrysopicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_chrysopicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma syrphidicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_syrphidicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_syrphidicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma culicicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_culicicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_culicicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma sabaudiense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_sabaudiense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_sabaudiense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiroplasma apis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiroplasma_apis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiroplasma_apis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidovorax sp. JHL9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidovorax_sp_jhl9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidovorax_sp_jhl9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter gangotriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_gangotriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_gangotriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myxococcus stipitatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myxococcus_stipitatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myxococcus_stipitatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus triatomae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_triatomae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_triatomae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma granularum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_granularum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_granularum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium russii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_russii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_russii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychromonas ossibalaenae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychromonas_ossibalaenae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychromonas_ossibalaenae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zimmermannella faecalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zimmermannella_faecalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zimmermannella_faecalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Amphritea japonica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_amphritea_japonica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_amphritea_japonica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma axanthum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_axanthum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_axanthum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Avibacterium paragallinarum 221 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_avibacterium_paragallinarum_221_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_avibacterium_paragallinarum_221_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cesiribacter andamanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cesiribacter_andamanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cesiribacter_andamanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanimonas smirnovii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanimonas_smirnovii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanimonas_smirnovii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbulbifer variabilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbulbifer_variabilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbulbifer_variabilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio thiocyanoxidans ARh2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_thiocyanoxidans_arh2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_thiocyanoxidans_arh2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Novispirillum itersonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_novispirillum_itersonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_novispirillum_itersonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio jasicida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_jasicida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_jasicida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. KORDI100 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_kordi100_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_kordi100_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillaceae bacterium G5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillaceae_bacterium_g5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillaceae_bacterium_g5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. AE2015 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_ae2015_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_ae2015_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. VCD2006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_vcd2006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_vcd2006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. AE3009 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_ae3009_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_ae3009_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. XPD2006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_xpd2006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_xpd2006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. FC2001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_fc2001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_fc2001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. AE3006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_ae3006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_ae3006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. AGR2160 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_agr2160_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_agr2160_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. WCD3002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_wcd3002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_wcd3002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. VCB2006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_vcb2006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_vcb2006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. LC3010 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_lc3010_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_lc3010_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. WCD2001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_wcd2001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_wcd2001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. XBB1001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_xbb1001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_xbb1001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. NC3005 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_nc3005_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_nc3005_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. MC2013 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_mc2013_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_mc2013_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudobutyrivibrio ruminis CF1b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudobutyrivibrio_ruminis_cf1b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudobutyrivibrio_ruminis_cf1b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium paraputrificum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_paraputrificum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_paraputrificum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium cadaveris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_cadaveris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_cadaveris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudobutyrivibrio ruminis AD2017 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudobutyrivibrio_ruminis_ad2017_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudobutyrivibrio_ruminis_ad2017_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio fibrisolvens ND3005 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_fibrisolvens_nd3005_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_fibrisolvens_nd3005_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dorea longicatena AGR2136 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dorea_longicatena_agr2136_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dorea_longicatena_agr2136_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas ruminantium ATCC12561 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_ruminantium_atcc12561_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_ruminantium_atcc12561_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. T16B2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_t16b2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_t16b2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. CY54118 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_cy54118_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_cy54118_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. 25B141 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_25b141_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_25b141_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. BHBN044 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_bhbn044_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_bhbn044_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas sp. 22II122F38 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_sp_22ii122f38_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_sp_22ii122f38_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas adhaerens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_adhaerens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_adhaerens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas johnsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_johnsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_johnsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas jannaschiana nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_jannaschiana_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_jannaschiana_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas oceanitis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_oceanitis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_oceanitis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hyphomonas polymorpha nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hyphomonas_polymorpha_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hyphomonas_polymorpha_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Agrobacterium tumefaciens Cherry nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_agrobacterium_tumefaciens_cherry_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_agrobacterium_tumefaciens_cherry_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas poae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_poae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_poae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis sp. AC460 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_sp_ac460_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_sp_ac460_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis sp. AC402 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_sp_ac402_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_sp_ac402_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asticcacaulis sp. AC466 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asticcacaulis_sp_ac466_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asticcacaulis_sp_ac466_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus tigurinus AZ3a nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_tigurinus_az3a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_tigurinus_az3a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus tigurinus 1366 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_tigurinus_1366_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_tigurinus_1366_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium Mf 105b01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_mf_105b01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_mf_105b01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospira multipara ATCC19207 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospira_multipara_atcc19207_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospira_multipara_atcc19207_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Frankia sp. Iso899 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_frankia_sp_iso899_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_frankia_sp_iso899_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tolumonas sp. BRL61 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tolumonas_sp_brl61_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tolumonas_sp_brl61_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardioides sp. Iso805N nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardioides_sp_iso805n_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardioides_sp_iso805n_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Conexibacter woesei Iso977N nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_conexibacter_woesei_iso977n_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_conexibacter_woesei_iso977n_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylohalobius crimeensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylohalobius_crimeensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylohalobius_crimeensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. A9 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_a9_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_a9_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces urogenitalis S6C4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_urogenitalis_s6c4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_urogenitalis_s6c4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. S6Spd3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_s6spd3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_s6spd3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerococcus lactolyticus S7113 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerococcus_lactolyticus_s7113_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerococcus_lactolyticus_s7113_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium S714 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_s714_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_s714_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. S718 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_s718_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_s718_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium casei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_casei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_casei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus sphaericus OT4b31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_sphaericus_ot4b31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_sphaericus_ot4b31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pandoraea sp. SD62 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pandoraea_sp_sd62_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pandoraea_sp_sd62_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophaga lonarensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophaga_lonarensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophaga_lonarensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Raoultella ornithinolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_raoultella_ornithinolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_raoultella_ornithinolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium acidaminophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_acidaminophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_acidaminophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphaerotilus natans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphaerotilus_natans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphaerotilus_natans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zhouia amylolytica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zhouia_amylolytica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zhouia_amylolytica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. L2C084A000 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_l2c084a000_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_l2c084a000_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. LNJC398B00 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_lnjc398b00_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_lnjc398b00_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium freneyi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_freneyi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_freneyi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella bivia DNF00188 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_bivia_dnf00188_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_bivia_dnf00188_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. S7 MS 2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_s7_ms_2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_s7_ms_2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. CNT318 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_cnt318_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_cnt318_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. TAA040 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_taa040_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_taa040_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseovarius mucosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseovarius_mucosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseovarius_mucosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus wulumuqiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_wulumuqiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_wulumuqiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrosospira sp. APG3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrosospira_sp_apg3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrosospira_sp_apg3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter santoriniensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_santoriniensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_santoriniensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyclobacteriaceae bacterium AK24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyclobacteriaceae_bacterium_ak24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyclobacteriaceae_bacterium_ak24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brachyspira hampsonii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brachyspira_hampsonii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brachyspira_hampsonii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. TAA204 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_taa204_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_taa204_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium josui nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_josui_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_josui_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dietzia sp. UCDTHP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dietzia_sp_ucdthp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dietzia_sp_ucdthp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma putrefaciens Mput9231 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_putrefaciens_mput9231_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_putrefaciens_mput9231_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter crescentus OR37 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_crescentus_or37_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_crescentus_or37_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sordellii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sordellii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sordellii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacterium granulosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacterium_granulosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacterium_granulosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halopiger sp. IIH2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halopiger_sp_iih2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halopiger_sp_iih2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halopiger sp. IIH3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halopiger_sp_iih3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halopiger_sp_iih3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halanaerobium saccharolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halanaerobium_saccharolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halanaerobium_saccharolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus equicursoris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_equicursoris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_equicursoris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium intestinale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_intestinale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_intestinale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas denitrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_denitrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_denitrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus boroniphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_boroniphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_boroniphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseibacterium elongatum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseibacterium_elongatum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseibacterium_elongatum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus stearothermophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_stearothermophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_stearothermophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina sp. SW150 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_sp_sw150_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_sp_sw150_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina megaterium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_megaterium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_megaterium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Komagataeibacter xylinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_komagataeibacter_xylinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_komagataeibacter_xylinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus dentisani 7746 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_dentisani_7746_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_dentisani_7746_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium metallidurans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_metallidurans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_metallidurans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. STM4661 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_stm4661_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_stm4661_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus flavithermus AK1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_flavithermus_ak1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_flavithermus_ak1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Intestinimonas butyriciproducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_intestinimonas_butyriciproducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_intestinimonas_butyriciproducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myxococcus sp. nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myxococcus_sp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myxococcus_sp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus dentisani 7747 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_dentisani_7747_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_dentisani_7747_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia sp. OHSUIC4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_sp_ohsuic4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_sp_ohsuic4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. OHSUIII nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_ohsuiii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_ohsuiii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassolituus oleivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassolituus_oleivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassolituus_oleivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gracilibacillus boraciitolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gracilibacillus_boraciitolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gracilibacillus_boraciitolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter sp. JCM18900 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_sp_jcm18900_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_sp_jcm18900_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. URHA0056 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_urha0056_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_urha0056_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. URHA0036 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_urha0036_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_urha0036_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marmoricola sp. URHB0036 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marmoricola_sp_urhb0036_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marmoricola_sp_urhb0036_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. URHD0025 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_urhd0025_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_urhd0025_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas sp. ALT199 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_sp_alt199_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_sp_alt199_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. URHA0002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_urha0002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_urha0002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. TAA486 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_taa486_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_taa486_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfotomaculum guttoideum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfotomaculum_guttoideum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfotomaculum_guttoideum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium kansasii 732 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_kansasii_732_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_kansasii_732_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium oranimense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_oranimense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_oranimense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterococcus mundtii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterococcus_mundtii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterococcus_mundtii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter dokdonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_dokdonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_dokdonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter donghicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_donghicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_donghicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas knackmussii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_knackmussii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_knackmussii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. 01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus namurensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_namurensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_namurensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia miyamotoi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_miyamotoi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_miyamotoi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus oligofermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_oligofermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_oligofermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chthonomonas calidirosea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chthonomonas_calidirosea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chthonomonas_calidirosea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces fulvissimus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_fulvissimus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_fulvissimus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinisphaera hydrothermalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinisphaera_hydrothermalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinisphaera_hydrothermalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiaceae bacterium L21THD2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiaceae_bacterium_l21thd2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiaceae_bacterium_l21thd2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas sp. KRMCY2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_sp_krmcy2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_sp_krmcy2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. ASBs410 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_asbs410_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_asbs410_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio magneticus IFRC170 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_magneticus_ifrc170_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_magneticus_ifrc170_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminiphilus circumscriptus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminiphilus_circumscriptus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminiphilus_circumscriptus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aminobacterium mobile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aminobacterium_mobile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aminobacterium_mobile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter nicotinovorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_nicotinovorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_nicotinovorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium japonicum 22 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_japonicum_22_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_japonicum_22_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium japonicum in8p8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_japonicum_in8p8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_japonicum_in8p8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caldicoprobacter oshimai nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caldicoprobacter_oshimai_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caldicoprobacter_oshimai_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dechloromonas agitata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dechloromonas_agitata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dechloromonas_agitata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulforegula conservatrix nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulforegula_conservatrix_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulforegula_conservatrix_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geovibrio sp. L21AceBES nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geovibrio_sp_l21acebes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geovibrio_sp_l21acebes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. KROCY2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_krocy2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_krocy2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola sp. HL35 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_sp_hl35_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_sp_hl35_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algoriphagus marincola HL49 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algoriphagus_marincola_hl49_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algoriphagus_marincola_hl49_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporosarcina sp. EUR3222 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporosarcina_sp_eur3222_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporosarcina_sp_eur3222_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kineosporia aurantiaca nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kineosporia_aurantiaca_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kineosporia_aurantiaca_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces thermolilacinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_thermolilacinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_thermolilacinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING candidate division TM6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candidate_division_tm6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candidate_division_tm6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. R1NS10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_r1ns10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_r1ns10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus firmus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_firmus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_firmus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas agarivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_agarivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_agarivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio sp. L21SyrAB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_sp_l21syrab_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_sp_l21syrab_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta sp. L21RPulD2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_sp_l21rpuld2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_sp_l21rpuld2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gluconobacter frateurii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gluconobacter_frateurii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gluconobacter_frateurii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gracilibacillus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gracilibacillus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gracilibacillus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. Br18 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_br18_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_br18_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. H14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_h14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_h14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ilumatobacter coccineus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ilumatobacter_coccineus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ilumatobacter_coccineus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermocrinis sp. GBS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermocrinis_sp_gbs_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermocrinis_sp_gbs_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia coriaceae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_coriaceae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_coriaceae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia anserina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_anserina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_anserina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia parkeri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_parkeri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_parkeri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermonema rossianum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermonema_rossianum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermonema_rossianum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chitinivibrio alkaliphilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chitinivibrio_alkaliphilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chitinivibrio_alkaliphilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aureispira sp. CCBQB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aureispira_sp_ccbqb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aureispira_sp_ccbqb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. HSISM1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_hsism1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_hsism1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blattabacterium sp. Nci nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blattabacterium_sp_nci_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blattabacterium_sp_nci_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas corrugata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_corrugata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_corrugata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mannheimia haemolytica M42548 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mannheimia_haemolytica_m42548_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mannheimia_haemolytica_m42548_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaeospirillum fulvum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaeospirillum_fulvum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaeospirillum_fulvum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseivivax sp. 22IIs10s nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseivivax_sp_22iis10s_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseivivax_sp_22iis10s_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina sp. 22IIS11z7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_sp_22iis11z7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_sp_22iis11z7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioclava sp. 13D2W2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioclava_sp_13d2w2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioclava_sp_13d2w2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycoplasma girerdii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycoplasma_girerdii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycoplasma_girerdii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter lipolyticus SM19 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_lipolyticus_sm19_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_lipolyticus_sm19_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cetobacterium somerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cetobacterium_somerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cetobacterium_somerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. NBIMCP2C3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_nbimcp2c3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_nbimcp2c3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus suis EA183292 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_suis_ea183292_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_suis_ea183292_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobium sp. F0209 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobium_sp_f0209_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobium_sp_f0209_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia sp. F0581 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_sp_f0581_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_sp_f0581_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomyces sp. F0311 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomyces_sp_f0311_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomyces_sp_f0311_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium F0540 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_f0540_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_f0540_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptotrichia sp. W9775 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptotrichia_sp_w9775_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptotrichia_sp_w9775_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mitsuokella sp. W9106 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mitsuokella_sp_w9106_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mitsuokella_sp_w9106_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. F0263 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_f0263_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_f0263_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcaceae bacterium W5053 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcaceae_bacterium_w5053_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcaceae_bacterium_w5053_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. F0426 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_f0426_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_f0426_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium brachy nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_brachy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_brachy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema lecithinolyticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_lecithinolyticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_lecithinolyticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemella bergeriae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemella_bergeriae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemella_bergeriae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfovibrio piezophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfovibrio_piezophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfovibrio_piezophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus defluvii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_defluvii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_defluvii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas pelagia nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_pelagia_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_pelagia_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobonum tyrrellensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobonum_tyrrellensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobonum_tyrrellensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter fennelliae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_fennelliae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_fennelliae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Catenovulum agarivorans DS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_catenovulum_agarivorans_ds2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_catenovulum_agarivorans_ds2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weissella oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weissella_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weissella_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermoactinomyces daqus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermoactinomyces_daqus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermoactinomyces_daqus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus caliditerrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_caliditerrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_caliditerrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium lactosutens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_lactosutens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_lactosutens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter haemolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_haemolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_haemolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia fonticola AUAP2C nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_fonticola_auap2c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_fonticola_auap2c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas haloplanktis TB64 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_haloplanktis_tb64_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_haloplanktis_tb64_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Salinarchaeum sp. HarchtBsk1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_salinarchaeum_sp_harchtbsk1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_salinarchaeum_sp_harchtbsk1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas stutzeri MF28 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_stutzeri_mf28_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_stutzeri_mf28_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium MA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_ma2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_ma2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kurthia huakuii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kurthia_huakuii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kurthia_huakuii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spiribacter sp. UAHSP71 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spiribacter_sp_uahsp71_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spiribacter_sp_uahsp71_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium sp. YL23 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_sp_yl23_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_sp_yl23_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseomonas gilardii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseomonas_gilardii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseomonas_gilardii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella waksmanii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_waksmanii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_waksmanii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atopobacter phocae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atopobacter_phocae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atopobacter_phocae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium selenitireducens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_selenitireducens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_selenitireducens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas flectens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_flectens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_flectens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium xylanophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_xylanophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_xylanophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microvirga flocculans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microvirga_flocculans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microvirga_flocculans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnimonas nigrificans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnimonas_nigrificans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnimonas_nigrificans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium larrymoorei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_larrymoorei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_larrymoorei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaribacter sp. Hel13349 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaribacter_sp_hel13349_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaribacter_sp_hel13349_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Loktanella cinnabarina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_loktanella_cinnabarina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_loktanella_cinnabarina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Calothrix sp. 3363 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_calothrix_sp_3363_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_calothrix_sp_3363_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Elizabethkingia anophelis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_elizabethkingia_anophelis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_elizabethkingia_anophelis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. UNC438CL73TsuS30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_unc438cl73tsus30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_unc438cl73tsus30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bryobacter aggregatus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bryobacter_aggregatus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bryobacter_aggregatus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Laceyella sacchari nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_laceyella_sacchari_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_laceyella_sacchari_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium saliperosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_saliperosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_saliperosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus flavefaciens 007c nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_flavefaciens_007c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_flavefaciens_007c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium limnosediminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_limnosediminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_limnosediminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium septicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_septicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_septicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter indicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_indicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_indicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium bombi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_bombi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_bombi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. MM124 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_mm124_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_mm124_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. NB77 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_nb77_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_nb77_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. NB68 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_nb68_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_nb68_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharibacter sp. AM169 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharibacter_sp_am169_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharibacter_sp_am169_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Palaeococcus pacificus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_palaeococcus_pacificus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_palaeococcus_pacificus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces rapamycinicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_rapamycinicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_rapamycinicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tatumella sp. NML063099 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tatumella_sp_nml063099_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tatumella_sp_nml063099_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium pavilionensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_pavilionensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_pavilionensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pylori SA213A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pylori_sa213a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pylori_sa213a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium saccharobutylicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_saccharobutylicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_saccharobutylicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus sp. JF8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_sp_jf8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_sp_jf8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium paucimobilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_paucimobilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_paucimobilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium ummariense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_ummariense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_ummariense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. EB01 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_eb01_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_eb01_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paucisalibacillus sp. EB02 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paucisalibacillus_sp_eb02_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paucisalibacillus_sp_eb02_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Formosa agariphila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_formosa_agariphila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_formosa_agariphila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. FF3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_ff3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_ff3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. FF4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_ff4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_ff4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerosalibacter sp. ND1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerosalibacter_sp_nd1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerosalibacter_sp_nd1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroidaceae bacterium MS4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroidaceae_bacterium_ms4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroidaceae_bacterium_ms4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudoalteromonas sp. OCN003 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudoalteromonas_sp_ocn003_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudoalteromonas_sp_ocn003_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leifsonia rubra nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leifsonia_rubra_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leifsonia_rubra_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulophaga baltica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulophaga_baltica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulophaga_baltica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio diazotrophicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_diazotrophicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_diazotrophicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thauera terpenica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thauera_terpenica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thauera_terpenica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium argentoratense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_argentoratense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_argentoratense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kitasatospora cheerisanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kitasatospora_cheerisanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kitasatospora_cheerisanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus megaterium MSP201 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_megaterium_msp201_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_megaterium_msp201_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Janthinobacterium agaricidamnosum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_janthinobacterium_agaricidamnosum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_janthinobacterium_agaricidamnosum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tenacibaculum maritimum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tenacibaculum_maritimum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tenacibaculum_maritimum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. AKYN10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_akyn10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_akyn10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Coprobacter fastidiosus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_coprobacter_fastidiosus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_coprobacter_fastidiosus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces niveus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_niveus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_niveus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Olleya marilimosa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_olleya_marilimosa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_olleya_marilimosa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioclava sp. DT234 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioclava_sp_dt234_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioclava_sp_dt234_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteriovorax sp. BSW11IV nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteriovorax_sp_bsw11iv_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteriovorax_sp_bsw11iv_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ensifer sp. TW10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ensifer_sp_tw10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ensifer_sp_tw10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioclava pacifica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioclava_pacifica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioclava_pacifica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptoniphilus sp. ChDC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptoniphilus_sp_chdc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptoniphilus_sp_chdc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychrobacter aquaticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychrobacter_aquaticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychrobacter_aquaticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cardinium endosymbiont cBtQ1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cardinium_endosymbiont_cbtq1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cardinium_endosymbiont_cbtq1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseovarius sp. MCTG156 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseovarius_sp_mctg156_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseovarius_sp_mctg156_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter sp. AF1028 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_sp_af1028_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_sp_af1028_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter sp. AF1440 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_sp_af1440_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_sp_af1440_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hymenobacter sp. APR13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hymenobacter_sp_apr13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hymenobacter_sp_apr13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus acidoterrestris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_acidoterrestris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_acidoterrestris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae CC1417 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_cc1417_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_cc1417_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae CC1513 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_cc1513_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_cc1513_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas syringae CC1557 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_syringae_cc1557_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_syringae_cc1557_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter canis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_canis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_canis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter macacae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_macacae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_macacae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium antarcticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_antarcticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_antarcticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermofilum sp. 1910b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermofilum_sp_1910b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermofilum_sp_1910b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodobacteraceae bacterium HIMB11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodobacteraceae_bacterium_himb11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodobacteraceae_bacterium_himb11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ralstonia pickettii DTP0602 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ralstonia_pickettii_dtp0602_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ralstonia_pickettii_dtp0602_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter coli 76339 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_coli_76339_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_coli_76339_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus aminophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_aminophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_aminophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. UMWGJ nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_umwgj_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_umwgj_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. UMWWY nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_umwwy_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_umwwy_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium undicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_undicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_undicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium iranicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_iranicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_iranicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Firmicutes bacterium ASF500 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_firmicutes_bacterium_asf500_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_firmicutes_bacterium_asf500_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gemmatimonas sp. AP64 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gemmatimonas_sp_ap64_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gemmatimonas_sp_ap64_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfonauticus sp. A7A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfonauticus_sp_a7a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfonauticus_sp_a7a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING candidate division ZIXI nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_candidate_division_zixi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_candidate_division_zixi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. FUKUSWIS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_fukuswis1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_fukuswis1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mucispirillum schaedleri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mucispirillum_schaedleri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mucispirillum_schaedleri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. URHA0041 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_urha0041_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_urha0041_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geodermatophilaceae bacterium URHB0048 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geodermatophilaceae_bacterium_urhb0048_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geodermatophilaceae_bacterium_urhb0048_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mesorhizobium sp. URHC0008 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mesorhizobium_sp_urhc0008_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mesorhizobium_sp_urhc0008_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas sp. URHE0023 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_sp_urhe0023_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_sp_urhe0023_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bradyrhizobium sp. URHD0069 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bradyrhizobium_sp_urhd0069_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bradyrhizobium_sp_urhd0069_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Blastococcus sp. URHD0036 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_blastococcus_sp_urhd0036_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_blastococcus_sp_urhd0036_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. 23GOM1509m nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_23gom1509m_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_23gom1509m_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. 20GPM1509m nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_20gpm1509m_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_20gpm1509m_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Intrasporangiaceae bacterium URHB0013 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_intrasporangiaceae_bacterium_urhb0013_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_intrasporangiaceae_bacterium_urhb0013_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ahrensia sp. 13GOM1096m nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ahrensia_sp_13gom1096m_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ahrensia_sp_13gom1096m_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tenacibaculum sp. 47AGOM205m nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tenacibaculum_sp_47agom205m_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tenacibaculum_sp_47agom205m_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. URHB0044 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_urhb0044_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_urhb0044_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax sp. 43BGOM46m nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_sp_43bgom46m_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_sp_43bgom46m_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Solirubrobacterales bacterium URHD0059 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_solirubrobacterales_bacterium_urhd0059_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_solirubrobacterales_bacterium_urhd0059_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dongia sp. URHE0060 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dongia_sp_urhe0060_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dongia_sp_urhe0060_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geodermatophilaceae bacterium URHA0031 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geodermatophilaceae_bacterium_urha0031_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geodermatophilaceae_bacterium_urha0031_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodospirillales bacterium URHD0088 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodospirillales_bacterium_urhd0088_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodospirillales_bacterium_urhd0088_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus flavithermus yunnanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_flavithermus_yunnanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_flavithermus_yunnanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flaviramulus ichthyoenteri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flaviramulus_ichthyoenteri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flaviramulus_ichthyoenteri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus darwinianus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_darwinianus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_darwinianus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aliihoeflea sp. 2WW nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aliihoeflea_sp_2ww_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aliihoeflea_sp_2ww_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacterium sp. VCM10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacterium_sp_vcm10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacterium_sp_vcm10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Asaia platycodi SF21 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_asaia_platycodi_sf21_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_asaia_platycodi_sf21_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacteraceae bacterium PMMR1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacteraceae_bacterium_pmmr1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacteraceae_bacterium_pmmr1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alicyclobacillus macrosporangiidus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alicyclobacillus_macrosporangiidus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alicyclobacillus_macrosporangiidus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporosarcina sp. D27 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporosarcina_sp_d27_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporosarcina_sp_d27_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermogemmatispora sp. PM5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermogemmatispora_sp_pm5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermogemmatispora_sp_pm5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus vulcani nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_vulcani_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_vulcani_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermomicrobiales sp. KI4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermomicrobiales_sp_ki4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermomicrobiales_sp_ki4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anoxybacillus tepidamans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anoxybacillus_tepidamans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anoxybacillus_tepidamans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidobacterium sp. PMMR2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidobacterium_sp_pmmr2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidobacterium_sp_pmmr2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus manganicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_manganicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_manganicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenimonas malthae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenimonas_malthae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenimonas_malthae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arenimonas metalli nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arenimonas_metalli_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arenimonas_metalli_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus sinduriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_sinduriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_sinduriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus albus AD2013 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_albus_ad2013_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_albus_ad2013_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus flavefaciens AE3010 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_flavefaciens_ae3010_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_flavefaciens_ae3010_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Adlercreutzia equolifaciens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_adlercreutzia_equolifaciens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_adlercreutzia_equolifaciens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella sp. W121067 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_sp_w121067_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_sp_w121067_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pontibacillus halophilus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pontibacillus_halophilus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pontibacillus_halophilus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pontibacillus marinus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pontibacillus_marinus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pontibacillus_marinus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pontibacillus litoralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pontibacillus_litoralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pontibacillus_litoralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pontibacillus chungwhensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pontibacillus_chungwhensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pontibacillus_chungwhensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pontibacillus yanchengensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pontibacillus_yanchengensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pontibacillus_yanchengensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter defluvii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_defluvii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_defluvii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysobacter daejeonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysobacter_daejeonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysobacter_daejeonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Knoellia flava nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_knoellia_flava_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_knoellia_flava_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Knoellia aerolata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_knoellia_aerolata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_knoellia_aerolata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Knoellia sinensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_knoellia_sinensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_knoellia_sinensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Knoellia subterranea nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_knoellia_subterranea_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_knoellia_subterranea_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. Heron nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_heron_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_heron_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Intrasporangium oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_intrasporangium_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_intrasporangium_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gordonia amicalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gordonia_amicalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gordonia_amicalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schmidhempelia bombi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schmidhempelia_bombi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schmidhempelia_bombi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylophilus sp. OH31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylophilus_sp_oh31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylophilus_sp_oh31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mosselii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mosselii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mosselii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leifsonia xyli cynodontis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leifsonia_xyli_cynodontis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leifsonia_xyli_cynodontis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mendocina EGDAQ5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mendocina_egdaq5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mendocina_egdaq5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium bifermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_bifermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_bifermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. AdeTY nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_adety_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_adety_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudozyma brasiliensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudozyma_brasiliensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudozyma_brasiliensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. HUN102 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_hun102_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_hun102_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium sp. AB3007 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_sp_ab3007_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_sp_ab3007_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leeuwenhoekiella sp. HelI48 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leeuwenhoekiella_sp_heli48_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leeuwenhoekiella_sp_heli48_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leeuwenhoekiella sp. MAR2009132 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leeuwenhoekiella_sp_mar2009132_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leeuwenhoekiella_sp_mar2009132_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sediminibacter sp. HelI10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sediminibacter_sp_heli10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sediminibacter_sp_heli10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcaceae bacterium AE2021 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcaceae_bacterium_ae2021_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcaceae_bacterium_ae2021_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium AC2031 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ac2031_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ac2031_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maribacter forsetii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maribacter_forsetii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maribacter_forsetii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas ruminantium AC2024 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_ruminantium_ac2024_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_ruminantium_ac2024_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas ruminantium AB3002 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_ruminantium_ab3002_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_ruminantium_ab3002_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter nectaris nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_nectaris_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_nectaris_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bordetella hinzii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bordetella_hinzii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bordetella_hinzii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium sp. 7101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_sp_7101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_sp_7101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium sp. A11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_sp_a11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_sp_a11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinomadura madurae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinomadura_madurae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinomadura_madurae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporolactobacillus laevolacticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporolactobacillus_laevolacticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporolactobacillus_laevolacticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas moraviensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_moraviensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_moraviensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas taeanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_taeanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_taeanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. MAEPY2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_maepy2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_maepy2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haloferula sp. BvORR071 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haloferula_sp_bvorr071_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haloferula_sp_bvorr071_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucomicrobium sp. BvORR034 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucomicrobium_sp_bvorr034_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucomicrobium_sp_bvorr034_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter sp. ES1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_sp_es1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_sp_es1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leucobacter sp. PH1c nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leucobacter_sp_ph1c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leucobacter_sp_ph1c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia sp. H1n nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_sp_h1n_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_sp_h1n_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alcanivorax sp. P2S70 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alcanivorax_sp_p2s70_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alcanivorax_sp_p2s70_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. PBN3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_pbn3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_pbn3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING alpha proteobacterium RS24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alpha_proteobacterium_rs24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alpha_proteobacterium_rs24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium undae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_undae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_undae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium marinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_marinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_marinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium oxidotolerans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_oxidotolerans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_oxidotolerans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia valaisiana Tom4006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_valaisiana_tom4006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_valaisiana_tom4006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium sp. MH3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_sp_mh3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_sp_mh3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Holospora obtusa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_holospora_obtusa_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_holospora_obtusa_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Enterobacter cloacae JD6301 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_enterobacter_cloacae_jd6301_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_enterobacter_cloacae_jd6301_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus fabifermentans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_fabifermentans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_fabifermentans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HTCC7214 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_htcc7214_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_htcc7214_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pelagibacter ubique HTCC7217 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pelagibacter_ubique_htcc7217_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pelagibacter_ubique_htcc7217_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium tuscaniense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_tuscaniense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_tuscaniense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oligella urethralis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oligella_urethralis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oligella_urethralis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Veillonella montpellierensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_veillonella_montpellierensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_veillonella_montpellierensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella buccalis DNF00985 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_buccalis_dnf00985_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_buccalis_dnf00985_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Endolissoclinum faulkneri L5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_endolissoclinum_faulkneri_l5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_endolissoclinum_faulkneri_l5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter sp. H3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_sp_h3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_sp_h3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus simplex nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_simplex_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_simplex_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Verrucomicrobium sp. BvORR106 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_verrucomicrobium_sp_bvorr106_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_verrucomicrobium_sp_bvorr106_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus anginosus DORA7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_anginosus_dora7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_anginosus_dora7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Varibaculum cambriense DORA20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_varibaculum_cambriense_dora20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_varibaculum_cambriense_dora20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium glycinophilum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_glycinophilum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_glycinophilum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia suis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_suis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_suis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Staphylococcus simulans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_staphylococcus_simulans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_staphylococcus_simulans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium beibuense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_beibuense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_beibuense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Synechococcus sp. NKBG15041c nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_synechococcus_sp_nkbg15041c_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_synechococcus_sp_nkbg15041c_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Betaproteobacteria bacterium MOLA814 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_betaproteobacteria_bacterium_mola814_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_betaproteobacteria_bacterium_mola814_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sinorhizobium americanum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sinorhizobium_americanum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sinorhizobium_americanum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vagococcus lutrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vagococcus_lutrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vagococcus_lutrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus panacihumi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_panacihumi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_panacihumi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium nucleatum W1481 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_nucleatum_w1481_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_nucleatum_w1481_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. MB2021 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_mb2021_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_mb2021_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. FCS014 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_fcs014_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_fcs014_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. MC2021 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_mc2021_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_mc2021_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. MA2016 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_ma2016_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_ma2016_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. FC2011 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_fc2011_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_fc2011_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudobutyrivibrio sp. LB2011 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudobutyrivibrio_sp_lb2011_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudobutyrivibrio_sp_lb2011_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium AC2028 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ac2028_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ac2028_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium AC3007 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ac3007_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ac3007_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium MA2020 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ma2020_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ma2020_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium MC2017 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_mc2017_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_mc2017_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma equifetale nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_equifetale_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_equifetale_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma hippikon nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_hippikon_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_hippikon_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acholeplasma modicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acholeplasma_modicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acholeplasma_modicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidiphilium angustum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidiphilium_angustum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidiphilium_angustum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acidocella facilis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acidocella_facilis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acidocella_facilis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alkaliphilus transvaalensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alkaliphilus_transvaalensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alkaliphilus_transvaalensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Anaerovibrio lipolyticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_anaerovibrio_lipolyticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_anaerovibrio_lipolyticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus bogoriensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_bogoriensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_bogoriensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bartonella elizabethae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bartonella_elizabethae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bartonella_elizabethae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bilophila wadsworthia ATCC49260 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bilophila_wadsworthia_atcc49260_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bilophila_wadsworthia_atcc49260_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Crocinitomix catalasitica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_crocinitomix_catalasitica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_crocinitomix_catalasitica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium cellulosolvens LD2006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_cellulosolvens_ld2006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_cellulosolvens_ld2006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Eubacterium desmolans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_eubacterium_desmolans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_eubacterium_desmolans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Facklamia sourekii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_facklamia_sourekii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_facklamia_sourekii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Fusobacterium perfoetens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_fusobacterium_perfoetens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_fusobacterium_perfoetens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter pametensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_pametensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_pametensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella fairfieldensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_fairfieldensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_fairfieldensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Legionella sainthelensi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_legionella_sainthelensi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_legionella_sainthelensi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium genavense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_genavense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_genavense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prolixibacter bellariivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prolixibacter_bellariivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prolixibacter_bellariivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium sp. H1ai nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_sp_h1ai_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_sp_h1ai_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium mangenotii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_mangenotii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_mangenotii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacteroides sp. Ga6A2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacteroides_sp_ga6a2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacteroides_sp_ga6a2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema sp. C6A8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_sp_c6a8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_sp_c6a8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oribacterium sp. P6A1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oribacterium_sp_p6a1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oribacterium_sp_p6a1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella sp. P6B1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_sp_p6b1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_sp_p6b1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudobutyrivibrio sp. MD2005 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudobutyrivibrio_sp_md2005_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudobutyrivibrio_sp_md2005_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus sp. FC2018 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_sp_fc2018_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_sp_fc2018_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. ND2010 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_nd2010_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_nd2010_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia sp. DD3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_sp_dd3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_sp_dd3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shinella sp. DD12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shinella_sp_dd12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shinella_sp_dd12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium C6A11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_c6a11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_c6a11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium FE2018 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_fe2018_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_fe2018_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium MD2004 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_md2004_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_md2004_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium NC2004 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_nc2004_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_nc2004_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium ND2006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_nd2006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_nd2006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium P6A3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_p6a3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_p6a3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium P6B14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_p6b14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_p6b14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium V9D3004 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_v9d3004_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_v9d3004_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium YSB2008 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ysb2008_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ysb2008_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Propionibacteriaceae bacterium P6A17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_propionibacteriaceae_bacterium_p6a17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_propionibacteriaceae_bacterium_p6a17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcaceae bacterium AB4001 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcaceae_bacterium_ab4001_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcaceae_bacterium_ab4001_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio proteoclasticus P6B7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_proteoclasticus_p6b7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_proteoclasticus_p6b7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium lundense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_lundense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_lundense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kandleria vitulina nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kandleria_vitulina_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kandleria_vitulina_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospira multipara LB2003 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospira_multipara_lb2003_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospira_multipara_lb2003_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mitsuokella jalaludinii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mitsuokella_jalaludinii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mitsuokella_jalaludinii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prevotella brevis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prevotella_brevis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prevotella_brevis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Proteiniclasticum ruminis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_proteiniclasticum_ruminis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_proteiniclasticum_ruminis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus flavefaciens MA2007 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_flavefaciens_ma2007_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_flavefaciens_ma2007_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sharpea azabuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sharpea_azabuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sharpea_azabuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Succinivibrio dextrinosolvens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_succinivibrio_dextrinosolvens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_succinivibrio_dextrinosolvens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobiales bacterium YIM77505 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobiales_bacterium_yim77505_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobiales_bacterium_yim77505_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium MOLA455 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_mola455_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_mola455_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. JCB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_jcb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_jcb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. JCC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_jcc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_jcc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nocardia nova nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nocardia_nova_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nocardia_nova_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. TKP nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_tkp_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_tkp_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter sp. MCTG268 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_sp_mctg268_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_sp_mctg268_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. TG39a nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_tg39a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_tg39a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola sp. MCTG156 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_sp_mctg156_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_sp_mctg156_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum 202F nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_202f_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_202f_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium baratii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_baratii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_baratii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porticoccus hydrocarbonoclasticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porticoccus_hydrocarbonoclasticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porticoccus_hydrocarbonoclasticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polycyclovorans algicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polycyclovorans_algicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polycyclovorans_algicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Algiphilus aromaticivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_algiphilus_aromaticivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_algiphilus_aromaticivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium paraoxydans DH1b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_paraoxydans_dh1b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_paraoxydans_dh1b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leifsonia aquatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leifsonia_aquatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leifsonia_aquatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myroides odoratimimus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myroides_odoratimimus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myroides_odoratimimus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Borrelia persica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_borrelia_persica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_borrelia_persica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Defluviimonas sp. 20V17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_defluviimonas_sp_20v17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_defluviimonas_sp_20v17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas mandelii PD30 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_mandelii_pd30_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_mandelii_pd30_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptococcus sp. VT 162 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptococcus_sp_vt_162_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptococcus_sp_vt_162_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phaeobacter gallaeciensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phaeobacter_gallaeciensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phaeobacter_gallaeciensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. SJS nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_sjs_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_sjs_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus apodemi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_apodemi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_apodemi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus casei DSM20011 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_casei_dsm20011_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_casei_dsm20011_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus composti nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_composti_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_composti_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus farraginis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_farraginis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_farraginis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus fuchuensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_fuchuensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_fuchuensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus gallinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_gallinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_gallinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus hamsteri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_hamsteri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_hamsteri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus hayakitensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_hayakitensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_hayakitensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus hominis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_hominis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_hominis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus kitasatonis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_kitasatonis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_kitasatonis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus nodensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_nodensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_nodensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus otakiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_otakiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_otakiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus pasteurii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_pasteurii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_pasteurii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sucicola nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sucicola_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sucicola_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus suebicus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_suebicus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_suebicus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus vaginalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_vaginalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_vaginalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus versmoldensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_versmoldensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_versmoldensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus zeae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_zeae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_zeae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Advenella kashmirensis W13003 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_advenella_kashmirensis_w13003_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_advenella_kashmirensis_w13003_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hepatoplasma crinochetorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hepatoplasma_crinochetorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hepatoplasma_crinochetorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus rhodochrous nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_rhodochrous_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_rhodochrous_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Stenotrophomonas maltophilia 5BAI2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_stenotrophomonas_maltophilia_5bai2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_stenotrophomonas_maltophilia_5bai2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Afipia sp. P5210 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_afipia_sp_p5210_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_afipia_sp_p5210_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geobacillus sp. G1w1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geobacillus_sp_g1w1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geobacillus_sp_g1w1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Magnetospirillum gryphiswaldense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_magnetospirillum_gryphiswaldense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_magnetospirillum_gryphiswaldense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium etli mimosae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_etli_mimosae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_etli_mimosae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Komagataeibacter rhaeticus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_komagataeibacter_rhaeticus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_komagataeibacter_rhaeticus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mannheimia varigena USMARC1261 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mannheimia_varigena_usmarc1261_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mannheimia_varigena_usmarc1261_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rikenellaceae bacterium M3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rikenellaceae_bacterium_m3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rikenellaceae_bacterium_m3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mannheimia varigena USMARC1296 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mannheimia_varigena_usmarc1296_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mannheimia_varigena_usmarc1296_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dyadobacter tibetensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dyadobacter_tibetensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dyadobacter_tibetensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia pseudomallei ABCPW111 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_pseudomallei_abcpw111_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_pseudomallei_abcpw111_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium moukalabense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_moukalabense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_moukalabense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus pyridinivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_pyridinivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_pyridinivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Criblamydia sequanensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_criblamydia_sequanensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_criblamydia_sequanensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ochrobactrum rhizosphaerae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ochrobactrum_rhizosphaerae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ochrobactrum_rhizosphaerae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium pullorum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_pullorum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_pullorum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium mongoliense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_mongoliense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_mongoliense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium actinocoloniiforme nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_actinocoloniiforme_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_actinocoloniiforme_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium bohemicum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_bohemicum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_bohemicum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium biavatii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_biavatii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_biavatii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium callitrichos nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_callitrichos_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_callitrichos_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bifidobacterium reuteri nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bifidobacterium_reuteri_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bifidobacterium_reuteri_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Castellaniella defragrans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_castellaniella_defragrans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_castellaniella_defragrans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas nitroreducens HBP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_nitroreducens_hbp1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_nitroreducens_hbp1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. BAY1663 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_bay1663_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_bay1663_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Escherichia albertii KF1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_escherichia_albertii_kf1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_escherichia_albertii_kf1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces scopuliridis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_scopuliridis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_scopuliridis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium aromaticivorans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_aromaticivorans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_aromaticivorans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas cichorii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_cichorii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_cichorii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia fonticola RB25 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_fonticola_rb25_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_fonticola_rb25_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arcobacter cibarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arcobacter_cibarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arcobacter_cibarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Luteimonas huabeiensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_luteimonas_huabeiensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_luteimonas_huabeiensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfitobacter guttiformis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfitobacter_guttiformis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfitobacter_guttiformis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Yersinia enterocolitica LC20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_yersinia_enterocolitica_lc20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_yersinia_enterocolitica_lc20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium novyi B NCTC9691 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_novyi_b_nctc9691_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_novyi_b_nctc9691_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium botulinum CD BKT12695 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_botulinum_cd_bkt12695_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_botulinum_cd_bkt12695_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquimarina macrocephali nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquimarina_macrocephali_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquimarina_macrocephali_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sporolactobacillus terrae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sporolactobacillus_terrae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sporolactobacillus_terrae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Brevibacillus borstelensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_brevibacillus_borstelensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_brevibacillus_borstelensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus flexus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_flexus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_flexus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia sp. Diamant nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_sp_diamant_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_sp_diamant_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlamydia sp. Rubis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlamydia_sp_rubis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlamydia_sp_rubis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xylella fastidiosa PLS229 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xylella_fastidiosa_pls229_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xylella_fastidiosa_pls229_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sciscionella sp. SE31 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sciscionella_sp_se31_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sciscionella_sp_se31_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus yeei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_yeei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_yeei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aeromonas hydrophila YL17 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aeromonas_hydrophila_yl17_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aeromonas_hydrophila_yl17_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Tomitella biformata nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_tomitella_biformata_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_tomitella_biformata_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter sp. CIT045 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_sp_cit045_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_sp_cit045_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halobellus rufus nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halobellus_rufus_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halobellus_rufus_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthrobacter sp. UNC362MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthrobacter_sp_unc362mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthrobacter_sp_unc362mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mycobacterium sp. UNC280MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mycobacterium_sp_unc280mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mycobacterium_sp_unc280mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caulobacter sp. UNC358MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caulobacter_sp_unc358mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caulobacter_sp_unc358mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. KNHs205 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_knhs205_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_knhs205_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. UNCCL10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_unccl10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_unccl10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. UNC451MF nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_unc451mf_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_unc451mf_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Phyllobacterium sp. UNC302MFCol52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_phyllobacterium_sp_unc302mfcol52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_phyllobacterium_sp_unc302mfcol52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus sp. UNC23MFCrub11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_sp_unc23mfcrub11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_sp_unc23mfcrub11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodococcus sp. UNC363MFTsu51 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodococcus_sp_unc363mftsu51_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodococcus_sp_unc363mftsu51_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. UNC305MFCol52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_unc305mfcol52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_unc305mfcol52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus sp. YIM77409 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_sp_yim77409_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_sp_yim77409_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridiales bacterium DRI13 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridiales_bacterium_dri13_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridiales_bacterium_dri13_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium alterfunditum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_alterfunditum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_alterfunditum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium divergens nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_divergens_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_divergens_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium funditum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_funditum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_funditum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium gallinarum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_gallinarum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_gallinarum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium mobile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_mobile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_mobile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Carnobacterium pleistocenium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_carnobacterium_pleistocenium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_carnobacterium_pleistocenium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter rodentium nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_rodentium_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_rodentium_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kitasatospora azatica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kitasatospora_azatica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kitasatospora_azatica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kitasatospora mediocidica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kitasatospora_mediocidica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kitasatospora_mediocidica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseivivax halodurans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseivivax_halodurans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseivivax_halodurans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Roseivivax isoporae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_roseivivax_isoporae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_roseivivax_isoporae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptacidiphilus oryzae nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptacidiphilus_oryzae_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptacidiphilus_oryzae_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces yeochonensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_yeochonensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_yeochonensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thermus tengchongensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thermus_tengchongensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thermus_tengchongensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Kutzneria albida nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_kutzneria_albida_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_kutzneria_albida_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium succinicans nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_succinicans_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_succinicans_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. TS2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_ts2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_ts2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium falsenii nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_falsenii_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_falsenii_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. MRS1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_mrs1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_mrs1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. CrK32 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_crk32_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_crk32_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbacterium sp. CrK20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbacterium_sp_crk20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbacterium_sp_crk20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. RL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_rl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_rl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hafnia alvei nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hafnia_alvei_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hafnia_alvei_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium aquatile nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_aquatile_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_aquatile_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Schleiferia thermophila nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_schleiferia_thermophila_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_schleiferia_thermophila_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Microbulbifer sp. HZ11 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_microbulbifer_sp_hz11_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_microbulbifer_sp_hz11_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas pseudoalcaligenes AD6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_pseudoalcaligenes_ad6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_pseudoalcaligenes_ad6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium chungangense nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_chungangense_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_chungangense_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Accumulibacter sp. BA93 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_accumulibacter_sp_ba93_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_accumulibacter_sp_ba93_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pedobacter borealis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pedobacter_borealis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pedobacter_borealis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cellulomonas sp. HZM nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cellulomonas_sp_hzm_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cellulomonas_sp_hzm_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Photobacterium phosphoreum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_photobacterium_phosphoreum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_photobacterium_phosphoreum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haladaptatus cibarius nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haladaptatus_cibarius_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haladaptatus_cibarius_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halapricum salinum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halapricum_salinum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halapricum_salinum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acetobacter aceti 1023 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acetobacter_aceti_1023_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acetobacter_aceti_1023_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hylemonella gracilis Niagara nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hylemonella_gracilis_niagara_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hylemonella_gracilis_niagara_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. MP1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_mp1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_mp1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Comamonadaceae bacterium H1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_comamonadaceae_bacterium_h1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_comamonadaceae_bacterium_h1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lachnospiraceae bacterium AC2029 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lachnospiraceae_bacterium_ac2029_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lachnospiraceae_bacterium_ac2029_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Nitrososphaera evergladensis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_nitrososphaera_evergladensis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_nitrososphaera_evergladensis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geomicrobium sp. JCM19037 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geomicrobium_sp_jcm19037_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geomicrobium_sp_jcm19037_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Geomicrobium sp. JCM19038 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_geomicrobium_sp_jcm19038_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_geomicrobium_sp_jcm19038_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. JCM19046 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_jcm19046_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_jcm19046_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Weeksella sp. FF8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_weeksella_sp_ff8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_weeksella_sp_ff8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Haemophilus sp. FF7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_haemophilus_sp_ff7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_haemophilus_sp_ff7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. JCE nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_jce_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_jce_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Jeotgalicoccus sp. 13MG44air nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_jeotgalicoccus_sp_13mg44air_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_jeotgalicoccus_sp_13mg44air_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actibacterium atlanticum nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actibacterium_atlanticum_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actibacterium_atlanticum_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicola sp. 22IIS11g nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicola_sp_22iis11g_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicola_sp_22iis11g_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Virgibacillus sp. Vm5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_virgibacillus_sp_vm5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_virgibacillus_sp_vm5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanobacillus sp. S5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanobacillus_sp_s5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanobacillus_sp_s5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Actinosporangium sp. NRRLB3428 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinosporangium_sp_nrrlb3428_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinosporangium_sp_nrrlb3428_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Glycomyces sp. NRRLB16210 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_glycomyces_sp_nrrlb16210_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_glycomyces_sp_nrrlb16210_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Saccharothrix sp. NRRLB16314 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_saccharothrix_sp_nrrlb16314_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_saccharothrix_sp_nrrlb16314_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF2580 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf2580_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf2580_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF2890 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf2890_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf2890_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5008 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5008_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5008_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5053 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5053_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5053_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5065 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5065_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5065_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5123 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5123_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5123_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5126 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5126_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5126_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5135 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5135_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5135_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF525 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf525_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf525_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF5630 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf5630_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf5630_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLF6677 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlf6677_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlf6677_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS118 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls118_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls118_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS149 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls149_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls149_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS1777 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls1777_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls1777_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS237 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls237_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls237_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS337 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls337_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls337_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS340 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls340_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls340_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS37 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls37_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls37_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS474 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls474_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls474_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS646 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls646_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls646_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS87 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls87_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls87_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLS920 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrls920_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrls920_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLWC3626 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlwc3626_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlwc3626_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLWC3742 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlwc3742_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlwc3742_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLWC3773 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlwc3773_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlwc3773_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Micromonospora parva nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_micromonospora_parva_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_micromonospora_parva_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thioalkalivibrio sp. HK1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thioalkalivibrio_sp_hk1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thioalkalivibrio_sp_hk1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lacinutrix sp. PAMC27137 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lacinutrix_sp_pamc27137_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lacinutrix_sp_pamc27137_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Scytonema hofmanni nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_scytonema_hofmanni_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_scytonema_hofmanni_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhodovulum sp. NI22 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhodovulum_sp_ni22_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhodovulum_sp_ni22_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. KNHs209 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_knhs209_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_knhs209_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. RIT328 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_rit328_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_rit328_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. RIT357 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_rit357_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_rit357_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. scB241528O2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_scb241528o2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_scb241528o2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. scB245a520K10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_scb245a520k10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_scb245a520k10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Falsirhodobacter sp. alg1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_falsirhodobacter_sp_alg1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_falsirhodobacter_sp_alg1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. K24 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_k24_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_k24_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lysinibacillus sp. BF4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lysinibacillus_sp_bf4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lysinibacillus_sp_bf4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus phoenicis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_phoenicis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_phoenicis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Streptomyces sp. NRRLB24720 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_streptomyces_sp_nrrlb24720_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_streptomyces_sp_nrrlb24720_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Peptostreptococcaceae bacterium VA2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_peptostreptococcaceae_bacterium_va2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_peptostreptococcaceae_bacterium_va2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. HL48 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_hl48_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_hl48_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Marinobacter sp. HL58 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_marinobacter_sp_hl58_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_marinobacter_sp_hl58_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oceanicaulis sp. HL87 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oceanicaulis_sp_hl87_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oceanicaulis_sp_hl87_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyrobacter sp. HL46 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyrobacter_sp_hl46_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyrobacter_sp_hl46_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Curtobacterium sp. S6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_curtobacterium_sp_s6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_curtobacterium_sp_s6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Spirochaeta sp. JC230 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_spirochaeta_sp_jc230_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_spirochaeta_sp_jc230_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. PSNIH2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_psnih2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_psnih2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pantoea sp. PSNIH1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pantoea_sp_psnih1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pantoea_sp_psnih1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Psychroserpens sp. PAMC27130 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_psychroserpens_sp_pamc27130_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_psychroserpens_sp_pamc27130_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Exiguobacterium sp. AB2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_exiguobacterium_sp_ab2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_exiguobacterium_sp_ab2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Selenomonas sp. AE3005 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_selenomonas_sp_ae3005_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_selenomonas_sp_ae3005_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ferriphaselus sp. R1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ferriphaselus_sp_r1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ferriphaselus_sp_r1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Zetaproteobacteria bacterium TAG1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_zetaproteobacteria_bacterium_tag1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_zetaproteobacteria_bacterium_tag1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. HMP27 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_hmp27_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_hmp27_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Desulfosporosinus sp. HMP52 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_desulfosporosinus_sp_hmp52_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_desulfosporosinus_sp_hmp52_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Leptolyngbya sp. JSC1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_leptolyngbya_sp_jsc1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_leptolyngbya_sp_jsc1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Corynebacterium sp. ATCC6931 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_corynebacterium_sp_atcc6931_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_corynebacterium_sp_atcc6931_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. Ant303 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_ant303_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_ant303_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus sp. RL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_sp_rl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_sp_rl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. EM1308 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_em1308_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_em1308_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. EM1321 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_em1321_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_em1321_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Gammaproteobacteria bacterium MFB021 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_gammaproteobacteria_bacterium_mfb021_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_gammaproteobacteria_bacterium_mfb021_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Cyanobium sp. CACIAM14 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_cyanobium_sp_caciam14_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_cyanobium_sp_caciam14_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeriaceae bacterium FSLA50209 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeriaceae_bacterium_fsla50209_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeriaceae_bacterium_fsla50209_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. MIT0601 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_mit0601_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_mit0601_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. MIT0602 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_mit0602_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_mit0602_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. MIT0701 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_mit0701_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_mit0701_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. MT2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_mt2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_mt2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. CL6 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_cl6_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_cl6_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. CL2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_cl2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_cl2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacillus sp. KW12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacillus_sp_kw12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacillus_sp_kw12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. 20BN nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_20bn_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_20bn_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. LF2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_lf2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_lf2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacterium UASB270 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacterium_uasb270_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacterium_uasb270_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. TCA20 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_tca20_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_tca20_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. YR295 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_yr295_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_yr295_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. YR519 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_yr519_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_yr519_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chryseobacterium sp. CF284 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chryseobacterium_sp_cf284_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chryseobacterium_sp_cf284_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. CF097 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_cf097_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_cf097_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. CF394 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_cf394_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_cf394_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. OK494 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_ok494_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_ok494_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Luteibacter sp. 9143 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_luteibacter_sp_9143_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_luteibacter_sp_9143_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Luteibacter sp. 9135 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_luteibacter_sp_9135_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_luteibacter_sp_9135_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Massilia sp. 9096 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_massilia_sp_9096_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_massilia_sp_9096_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderia sp. 9120 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderia_sp_9120_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderia_sp_9120_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. MSt1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_mst1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_mst1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. MIT0604 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_mit0604_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_mit0604_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Prochlorococcus sp. MIT0801 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_prochlorococcus_sp_mit0801_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_prochlorococcus_sp_mit0801_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alistipes sp. 627 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alistipes_sp_627_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alistipes_sp_627_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Devosia sp. LC5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_devosia_sp_lc5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_devosia_sp_lc5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Methylotenera sp. L2L1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_methylotenera_sp_l2l1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_methylotenera_sp_l2l1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis sp. LC81 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_sp_lc81_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_sp_lc81_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bosea sp. LC85 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bosea_sp_lc85_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bosea_sp_lc85_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Massilia sp. LC238 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_massilia_sp_lc238_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_massilia_sp_lc238_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING actinobacterium acAMD5 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_actinobacterium_acamd5_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_actinobacterium_acamd5_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Polaromonas sp. CG912 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_polaromonas_sp_cg912_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_polaromonas_sp_cg912_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacterium sp. OL1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacterium_sp_ol1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacterium_sp_ol1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bacterium sp. LF3 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bacterium_sp_lf3_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bacterium_sp_lf3_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Halomonas sp. KO116 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_halomonas_sp_ko116_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_halomonas_sp_ko116_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Flavobacterium sp. Fl nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_flavobacterium_sp_fl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_flavobacterium_sp_fl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Butyrivibrio sp. AE3004 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_butyrivibrio_sp_ae3004_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_butyrivibrio_sp_ae3004_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Arthromitus sp. SFBmouseNL nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_arthromitus_sp_sfbmousenl_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_arthromitus_sp_sfbmousenl_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Acinetobacter sp. HR7 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_acinetobacter_sp_hr7_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_acinetobacter_sp_hr7_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. R1200B2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_r1200b2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_r1200b2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Bosea sp. UNC402CLCol nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_bosea_sp_unc402clcol_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_bosea_sp_unc402clcol_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Ruminococcus sp. HUN007 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_ruminococcus_sp_hun007_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_ruminococcus_sp_hun007_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas sp. COT239OH1446 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_sp_cot239oh1446_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_sp_cot239oh1446_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonas sp. COT290OH860 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonas_sp_cot290oh860_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonas_sp_cot290oh860_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella sp. YQH10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_sp_yqh10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_sp_yqh10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Idiomarina sp. MCCC1A10513 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_idiomarina_sp_mccc1a10513_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_idiomarina_sp_mccc1a10513_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Vibrio sp. ER1A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_vibrio_sp_er1a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_vibrio_sp_er1a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Porphyromonadaceae COT184OH4590 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_porphyromonadaceae_cot184oh4590_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_porphyromonadaceae_cot184oh4590_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Oscillibacter sp. ER4 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_oscillibacter_sp_er4_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_oscillibacter_sp_er4_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chlorobium sp. GBChlB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chlorobium_sp_gbchlb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chlorobium_sp_gbchlb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Chloroflexus sp. MSG nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_chloroflexus_sp_msg_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_chloroflexus_sp_msg_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobium sp. ba1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobium_sp_ba1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobium_sp_ba1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Pseudomonas sp. ML96 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_pseudomonas_sp_ml96_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_pseudomonas_sp_ml96_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Serratia sp. Ag1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_serratia_sp_ag1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_serratia_sp_ag1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus sp. 4681 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_sp_4681_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_sp_4681_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Planococcus sp. PAMC21323 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_planococcus_sp_pamc21323_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_planococcus_sp_pamc21323_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Atelocyanobacterium thalassa SIO64986 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_atelocyanobacterium_thalassa_sio64986_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_atelocyanobacterium_thalassa_sio64986_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rickettsiales bacterium Ac37b nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rickettsiales_bacterium_ac37b_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rickettsiales_bacterium_ac37b_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassospira australica nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassospira_australica_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassospira_australica_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Maribius sp. MOLA401 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_maribius_sp_mola401_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_maribius_sp_mola401_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Achromobacter sp. RTa nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_achromobacter_sp_rta_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_achromobacter_sp_rta_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Rhizobium sp. YS1r nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_rhizobium_sp_ys1r_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_rhizobium_sp_ys1r_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Devosia sp. 172E8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_devosia_sp_172e8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_devosia_sp_172e8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Thalassotalea sp. ND16A nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_thalassotalea_sp_nd16a_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_thalassotalea_sp_nd16a_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLP40081 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslp40081_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslp40081_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLR50345 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslr50345_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslr50345_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLR70273 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslr70273_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslr70273_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLR70331 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslr70331_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslr70331_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLH70357 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslh70357_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslh70357_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paenibacillus sp. FSLH70737 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paenibacillus_sp_fslh70737_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paenibacillus_sp_fslh70737_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingopyxis sp. MWB1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingopyxis_sp_mwb1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingopyxis_sp_mwb1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum sp. SCADC nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_sp_scadc_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_sp_scadc_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfuricurvum sp. MLSB nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfuricurvum_sp_mlsb_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfuricurvum_sp_mlsb_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Alteromonas sp. LOR nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_alteromonas_sp_lor_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_alteromonas_sp_lor_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Aquabacterium sp. NJ1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_aquabacterium_sp_nj1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_aquabacterium_sp_nj1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacterium sp. ML3W nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacterium_sp_ml3w_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacterium_sp_ml3w_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Treponema sp. OMZ838 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_treponema_sp_omz838_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_treponema_sp_omz838_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Deinococcus sp. YIM77859 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_deinococcus_sp_yim77859_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_deinococcus_sp_yim77859_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Clostridium sp. KNHs214 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_clostridium_sp_knhs214_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_clostridium_sp_knhs214_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Myxosarcina sp. GI1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_myxosarcina_sp_gi1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_myxosarcina_sp_gi1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mollicutes bacterium HR1 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mollicutes_bacterium_hr1_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mollicutes_bacterium_hr1_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Mollicutes bacterium HR2 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_mollicutes_bacterium_hr2_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_mollicutes_bacterium_hr2_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sp. wkB10 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sp_wkb10_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sp_wkb10_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Lactobacillus sp. wkB8 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_lactobacillus_sp_wkb8_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_lactobacillus_sp_wkb8_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. 3524ZXX nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_3524zxx_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_3524zxx_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Hoeflea sp. BAL378 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_hoeflea_sp_bal378_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_hoeflea_sp_bal378_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Francisella sp. FSC1006 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_francisella_sp_fsc1006_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_francisella_sp_fsc1006_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Helicobacter sp. MIT115569 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_helicobacter_sp_mit115569_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_helicobacter_sp_mit115569_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Campylobacter sp. MIT975078 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_campylobacter_sp_mit975078_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_campylobacter_sp_mit975078_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas taxi nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_taxi_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_taxi_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingomonas sp. 37zxx nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingomonas_sp_37zxx_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingomonas_sp_37zxx_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sphingobacteriaceae bacterium DW12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sphingobacteriaceae_bacterium_dw12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sphingobacteriaceae_bacterium_dw12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Listeriaceae bacterium FSLA50281 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_listeriaceae_bacterium_fsla50281_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_listeriaceae_bacterium_fsla50281_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Xanthomonas sp. Nyagatare nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_xanthomonas_sp_nyagatare_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_xanthomonas_sp_nyagatare_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Caenorhabditis tropicalis nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_caenorhabditis_tropicalis_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_caenorhabditis_tropicalis_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Burkholderiaceae sp. Mortierella nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_burkholderiaceae_sp_mortierella_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_burkholderiaceae_sp_mortierella_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Shewanella sp. ECSMB14101 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_shewanella_sp_ecsmb14101_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_shewanella_sp_ecsmb14101_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Sulfurospirillum sp. MES nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_sulfurospirillum_sp_mes_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_sulfurospirillum_sp_mes_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Paracoccus sp. PAMC22219 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_paracoccus_sp_pamc22219_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_paracoccus_sp_pamc22219_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the STRING Dickeya sp. 2B12 nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_string_dickeya_sp_2b12_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_string_dickeya_sp_2b12_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Relation Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_relation_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_relation_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Wormbase Vocabulary nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_wormbase_vocabulary_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_wormbase_vocabulary_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Neuro Behavior Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_neuro_behavior_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_neuro_behavior_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Provenance Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_provenance_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_provenance_ontology_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Friend of a Friend nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_friend_of_a_friend_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_friend_of_a_friend_node_name(node_name)
}

#[pyfunction]
#[automatically_generated_binding]
#[text_signature = "(node_name)"]
/// Returns whether the given node name respects the Emotion Ontology nodes pattern.
///
/// Parameters
/// ----------
/// node_name: str,
///     Node name to check pattern with.
///
pub fn is_valid_emotion_ontology_node_name(node_name: &str) -> bool {
    url_utilities::is_valid_emotion_ontology_node_name(node_name)
}
