TheUltimateFuzzer {
    spanning_arborescence_kruskal: Spanning_arborescence_kruskal_Params {
        verbose: false,
    },
    spanning_arborescence: Spanning_arborescence_Params {
        verbose: false,
    },
    connected_components: Connected_components_Params {
        verbose: false,
    },
    get_node_label_prediction_tuple_by_node_ids: Get_node_label_prediction_tuple_by_node_ids_Params {
        node_ids: [],
        random_state:    0,
        include_central_node: false,
        offset:    0,
        max_neighbours: None,
    },
    is_singleton_by_node_id: Is_singleton_by_node_id_Params {
        node_id:    0,
    },
    is_singleton_with_self_loops_by_node_id: Is_singleton_with_self_loops_by_node_id_Params {
        node_id:    0,
    },
    has_edge_by_node_ids: Has_edge_by_node_ids_Params {
        src:    0,
        dst:    0,
    },
    has_edge_with_type_by_node_ids: Has_edge_with_type_by_node_ids_Params {
        src:    0,
        dst:    0,
        edge_type: None,
    },
    is_node_trap_by_node_id: Is_node_trap_by_node_id_Params {
        node_id:    0,
    },
    enable: Enable_Params {
        vector_sources: false,
        vector_destinations: false,
        vector_outbounds: false,
        cache_size: None,
    },
    get_edge_quadruple: Get_edge_quadruple_Params {
        edge_id:    0,
    },
    get_edge_triple: Get_edge_triple_Params {
        edge_id:    0,
    },
    get_top_k_central_nodes_ids: Get_top_k_central_nodes_ids_Params {
        k:    0,
    },
    get_top_k_central_node_names: Get_top_k_central_node_names_Params {
        k:    0,
    },
    get_node_type_id_by_node_id: Get_node_type_id_by_node_id_Params {
        node_id: 924416,
    },
    get_edge_type_id_by_edge_id: Get_edge_type_id_by_edge_id_Params {
        edge_id:    0,
    },
    get_node_type_name_by_node_id: Get_node_type_name_by_node_id_Params {
        node_id:    0,
    },
    get_edge_type_name_by_edge_id: Get_edge_type_name_by_edge_id_Params {
        edge_id:    0,
    },
    get_edge_type_name_by_edge_type_id: Get_edge_type_name_by_edge_type_id_Params {
        edge_type_id:    0,
    },
    get_weight_by_edge_id: Get_weight_by_edge_id_Params {
        edge_id:    0,
    },
    get_weight_by_node_ids: Get_weight_by_node_ids_Params {
        src:    0,
        dst:    0,
    },
    get_weight_with_type_by_node_ids: Get_weight_with_type_by_node_ids_Params {
        src:    0,
        dst:    0,
        edge_type: None,
    },
    get_node_name_by_node_id: Get_node_name_by_node_id_Params {
        node_id:    0,
    },
    get_edge_count_by_edge_type_id: Get_edge_count_by_edge_type_id_Params {
        edge_type: None,
    },
    get_node_count_by_node_type_id: Get_node_count_by_node_type_id_Params {
        node_type: None,
    },
    get_destination_node_id_by_edge_id: Get_destination_node_id_by_edge_id_Params {
        edge_id:    0,
    },
    get_node_neighbours_by_node_id: Get_node_neighbours_by_node_id_Params {
        node_id:    0,
    },
    get_edge_id_with_type_by_node_ids: Get_edge_id_with_type_by_node_ids_Params {
        src:    0,
        dst:    0,
        edge_type: None,
    },
    get_edge_type_ids_by_edge_type_names: Get_edge_type_ids_by_edge_type_names_Params {
        edge_types: [],
    },
    get_node_type_ids_by_node_type_names: Get_node_type_ids_by_node_type_names_Params {
        node_types: [],
    },
    get_node_type_name_by_node_type_id: Get_node_type_name_by_node_type_id_Params {
        node_type_id:    0,
    },
    get_node_type_names_by_node_type_ids: Get_node_type_names_by_node_type_ids_Params {
        node_type_ids: [],
    },
    get_node_degree_by_node_id: Get_node_degree_by_node_id_Params {
        node_id:    0,
    },
    filter: Filter_Params {
        node_names: None,
        node_types: None,
        edge_types: None,
        min_weight: None,
        max_weight: None,
        verbose: false,
    },
    degrees_product: Degrees_product_Params {
        one:    0,
        two:    0,
    },
    jaccard_index: Jaccard_index_Params {
        one:    0,
        two:    0,
    },
    adamic_adar_index: Adamic_adar_index_Params {
        one:    0,
        two:    0,
    },
    resource_allocation_index: Resource_allocation_index_Params {
        one:    0,
        two:    0,
    },
    connected_components_number: Connected_components_number_Params {
        verbose: false,
    },
    textual_report: Textual_report_Params {
        verbose: false,
    },
    remove: Remove_Params {
        allow_nodes_set: None,
        deny_nodes_set: None,
        allow_node_types_set: None,
        deny_node_types_set: None,
        allow_edge_set: None,
        deny_edge_set: None,
        allow_edge_types_set: None,
        deny_edge_types_set: None,
        weights: false,
        node_types: false,
        edge_types: false,
        singletons: false,
        selfloops: false,
        verbose: false,
    },
    remove_components: Remove_components_Params {
        node_names: None,
        node_types: None,
        edge_types: None,
        minimum_component_size: None,
        top_k_components: None,
        verbose: false,
    },
    encode_edge: Encode_edge_Params {
        src:    0,
        dst:    0,
    },
    decode_edge: Decode_edge_Params {
        edge:    0,
    },
    get_edge_id_by_node_ids: Get_edge_id_by_node_ids_Params {
        src:    0,
        dst:    0,
    },
    get_bipartite_edges: Get_bipartite_edges_Params {
        removed_existing_edges: None,
        first_nodes_set: None,
        second_nodes_set: None,
        first_node_types_set: None,
        second_node_types_set: None,
    },
    get_bipartite_edge_names: Get_bipartite_edge_names_Params {
        removed_existing_edges: None,
        first_nodes_set: None,
        second_nodes_set: None,
        first_node_types_set: None,
        second_node_types_set: None,
    },
    get_star_edges: Get_star_edges_Params {
        central_node: "\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}U\u{13}",
        removed_existing_edges: Some(
            false,
        ),
        star_points_nodes_set: Some(
            {},
        ),
        star_points_node_types_set: None,
    },
    get_star_edge_names: Get_star_edge_names_Params {
        central_node: "цанH?R",
        removed_existing_edges: None,
        star_points_nodes_set: Some(
            {},
        ),
        star_points_node_types_set: None,
    },
    get_clique_edges: Get_clique_edges_Params {
        directed: None,
        allow_self_loops: None,
        removed_existing_edges: None,
        allow_node_type_set: Some(
            {},
        ),
        allow_node_set: None,
    },
    get_clique_edge_names: Get_clique_edge_names_Params {
        directed: Some(
            true,
        ),
        allow_self_loops: None,
        removed_existing_edges: Some(
            false,
        ),
        allow_node_type_set: Some(
            {},
        ),
        allow_node_set: Some(
            {
                "",
            },
        ),
    },
    get_sources: Get_sources_Params {
        directed: false,
    },
    get_source_names: Get_source_names_Params {
        directed: true,
    },
    get_destinations: Get_destinations_Params {
        directed: false,
    },
    get_destination_names: Get_destination_names_Params {
        directed: false,
    },
    get_edges: Get_edges_Params {
        directed: false,
    },
    get_edge_names: Get_edge_names_Params {
        directed: false,
    },
    get_node_components_vector: Get_node_components_vector_Params {
        verbose: false,
    },
    connected_holdout: Connected_holdout_Params {
        random_state: 10849149217180033665,
        train_size: 601983051171716200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0,
        edge_types: Some(
            [],
        ),
        include_all_edge_types: false,
        verbose: true,
    },
    random_holdout: Random_holdout_Params {
        random_state: 11369044218690690801,
        train_size: 0.000000000000000000007318909316294428,
        include_all_edge_types: false,
        edge_types: Some(
            [],
        ),
        min_number_overlaps: Some(
            14797771869499777938,
        ),
        verbose: false,
    },
    node_label_holdout: Node_label_holdout_Params {
        train_size: -734868502676690700.0,
        use_stratification: false,
        random_state: 14141510965223958855,
    },
    edge_label_holdout: Edge_label_holdout_Params {
        train_size: 80692588107117.94,
        use_stratification: true,
        random_state: 10574922567777159643,
    },
    random_subgraph: Random_subgraph_Params {
        random_state: 14111977698262492530,
        nodes_number: 3172504500,
        verbose: true,
    },
    kfold: Kfold_Params {
        k: 12738816450910475723,
        k_index: 14744965358969566959,
        edge_types: Some(
            [],
        ),
        random_state: 12635408260261350862,
        verbose: true,
    },
    from_vec: FromVecHarnessParams {
        directed: false,
        directed_edge_list: false,
        ignore_duplicated_nodes: false,
        ignore_duplicated_edges: true,
        verbose: false,
        numeric_edge_types_ids: false,
        numeric_node_ids: false,
        numeric_edge_node_ids: false,
        numeric_node_types_ids: false,
        has_node_types: true,
        has_edge_types: false,
        has_weights: true,
        edges: [],
        nodes: Some(
            [
                Ok(
                    (
                        "hv",
                        Some(
                            [
                                "\u{3}",
                            ],
                        ),
                    ),
                ),
            ],
        ),
    },
}