MetaParams {
    random_spanning_arborescence_kruskal: RandomSpanningArborescenceKruskalParams {
        random_state: Some(
            16572178149110528053,
        ),
        undesired_edge_types: None,
        verbose: Some(
            false,
        ),
    },
    spanning_arborescence_kruskal: SpanningArborescenceKruskalParams {
        verbose: None,
    },
    spanning_arborescence: SpanningArborescenceParams {
        verbose: None,
    },
    connected_components: ConnectedComponentsParams {
        verbose: None,
    },
    get_node_label_prediction_tuple_from_node_ids: GetNodeLabelPredictionTupleFromNodeIdsParams {
        node_ids: [],
        random_state: 281474976645120,
        include_central_node: false,
        offset:    0,
        max_neighbours: None,
    },
    get_okapi_bm25_node_feature_propagation: GetOkapiBm25NodeFeaturePropagationParams {
        features: [],
        iterations: None,
        maximal_distance: None,
        k1: None,
        b: None,
        include_central_node: None,
        verbose: None,
    },
    get_okapi_bm25_node_label_propagation: GetOkapiBm25NodeLabelPropagationParams {
        iterations: None,
        maximal_distance: None,
        k1: None,
        b: None,
        verbose: None,
    },
    is_singleton_from_node_id: IsSingletonFromNodeIdParams {
        node_id:    0,
    },
    is_singleton_with_selfloops_from_node_id: IsSingletonWithSelfloopsFromNodeIdParams {
        node_id:    0,
    },
    has_node_type_id: HasNodeTypeIdParams {
        node_type_id: 65280,
    },
    has_edge_type_id: HasEdgeTypeIdParams {
        edge_type_id:    0,
    },
    has_edge_from_node_ids: HasEdgeFromNodeIdsParams {
        src:    0,
        dst:    0,
    },
    has_selfloop_from_node_id: HasSelfloopFromNodeIdParams {
        node_id:    0,
    },
    has_edge_from_node_ids_and_edge_type_id: HasEdgeFromNodeIdsAndEdgeTypeIdParams {
        src:    0,
        dst:    0,
        edge_type: None,
    },
    is_trap_node_from_node_id: IsTrapNodeFromNodeIdParams {
        node_id:    0,
    },
    get_preferential_attachment: GetPreferentialAttachmentParams {
        one:    0,
        two:    0,
        normalize: false,
    },
    get_jaccard_coefficient: GetJaccardCoefficientParams {
        one:    0,
        two:    0,
    },
    get_adamic_adar_index: GetAdamicAdarIndexParams {
        one:    0,
        two:    0,
    },
    get_resource_allocation_index: GetResourceAllocationIndexParams {
        one:    0,
        two:    0,
    },
    enable: EnableParams {
        vector_sources: None,
        vector_destinations: None,
        vector_cumulative_node_degrees: None,
        cache_size: None,
    },
    get_unweighted_number_of_triangles: GetUnweightedNumberOfTrianglesParams {
        normalize: None,
    },
    get_unweighted_number_of_triangles_per_node: GetUnweightedNumberOfTrianglesPerNodeParams {
        normalize: None,
    },
    get_unweighted_eccentricity_from_node_id: GetUnweightedEccentricityFromNodeIdParams {
        node_id:    0,
    },
    get_weighted_eccentricity_from_node_id: GetWeightedEccentricityFromNodeIdParams {
        node_id:    0,
        use_edge_weights_as_probabilities: None,
    },
    get_breath_first_search_from_node_ids: GetBreathFirstSearchFromNodeIdsParams {
        src_node_id:    0,
        maybe_dst_node_id: None,
        maybe_dst_node_ids: None,
        compute_distances: None,
        compute_predecessors: None,
        compute_visited: None,
        maximal_depth: None,
    },
    get_dijkstra_from_node_ids: GetDijkstraFromNodeIdsParams {
        src_node_id:    0,
        maybe_dst_node_id: None,
        maybe_dst_node_ids: None,
        compute_predecessors: None,
        maximal_depth: None,
        use_edge_weights_as_probabilities: None,
    },
    get_unweighted_diameter: GetUnweightedDiameterParams {
        ignore_infinity: None,
        verbose: None,
    },
    get_weighted_diameter: GetWeightedDiameterParams {
        ignore_infinity: None,
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    iter_edge_ids_from_node_ids: IterEdgeIdsFromNodeIdsParams {
        src:    0,
        dst:    0,
    },
    iter_edge_node_ids_and_edge_type_id_from_edge_type_id: IterEdgeNodeIdsAndEdgeTypeIdFromEdgeTypeIdParams {
        edge_type_id: None,
        directed: false,
    },
    iter_node_ids_and_node_type_ids_from_node_type_id: IterNodeIdsAndNodeTypeIdsFromNodeTypeIdParams {
        node_type_id: None,
    },
    iter_node_names_and_node_type_names_from_node_type_id: IterNodeNamesAndNodeTypeNamesFromNodeTypeIdParams {
        node_type_id: None,
    },
    iter_edge_node_names_and_edge_type_name_from_edge_type_id: IterEdgeNodeNamesAndEdgeTypeNameFromEdgeTypeIdParams {
        edge_type_id: None,
        directed: false,
    },
    get_transitive_closure: GetTransitiveClosureParams {
        iterations: None,
        verbose: None,
    },
    get_unweighted_all_shortest_paths: GetUnweightedAllShortestPathsParams {
        iterations: None,
        verbose: None,
    },
    get_weighted_all_shortest_paths: GetWeightedAllShortestPathsParams {
        iterations: None,
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    get_node_ids_from_edge_id: GetNodeIdsFromEdgeIdParams {
        edge_id:    0,
    },
    get_edge_id_from_node_ids: GetEdgeIdFromNodeIdsParams {
        src:    0,
        dst:    0,
    },
    get_node_ids_and_edge_type_id_from_edge_id: GetNodeIdsAndEdgeTypeIdFromEdgeIdParams {
        edge_id:    0,
    },
    get_node_ids_and_edge_type_id_and_edge_weight_from_edge_id: GetNodeIdsAndEdgeTypeIdAndEdgeWeightFromEdgeIdParams {
        edge_id: 3473450690632744960,
    },
    get_top_k_central_node_ids: GetTopKCentralNodeIdsParams {
        k:    0,
    },
    get_unweighted_node_degree_from_node_id: GetUnweightedNodeDegreeFromNodeIdParams {
        node_id:    0,
    },
    get_weighted_node_degree_from_node_id: GetWeightedNodeDegreeFromNodeIdParams {
        node_id:    0,
    },
    get_top_k_central_node_names: GetTopKCentralNodeNamesParams {
        k: 836803840,
    },
    get_node_type_id_from_node_id: GetNodeTypeIdFromNodeIdParams {
        node_id: 2603869731,
    },
    get_edge_type_id_from_edge_id: GetEdgeTypeIdFromEdgeIdParams {
        edge_id: 7928089,
    },
    get_node_type_names_from_node_id: GetNodeTypeNamesFromNodeIdParams {
        node_id:    0,
    },
    get_edge_type_name_from_edge_id: GetEdgeTypeNameFromEdgeIdParams {
        edge_id:    0,
    },
    get_edge_type_name_from_edge_type_id: GetEdgeTypeNameFromEdgeTypeIdParams {
        edge_type_id:    0,
    },
    get_edge_weight_from_edge_id: GetEdgeWeightFromEdgeIdParams {
        edge_id: 1099511627776,
    },
    get_edge_weight_from_node_ids: GetEdgeWeightFromNodeIdsParams {
        src: 788529152,
        dst: 791621423,
    },
    get_edge_weight_from_node_ids_and_edge_type_id: GetEdgeWeightFromNodeIdsAndEdgeTypeIdParams {
        src: 791621423,
        dst: 791621423,
        edge_type: Some(
            12079,
        ),
    },
    get_node_name_from_node_id: GetNodeNameFromNodeIdParams {
        node_id: 791621423,
    },
    get_edge_node_names_from_edge_node_ids: GetEdgeNodeNamesFromEdgeNodeIdsParams {
        edge_node_ids: [
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                808398639,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                2913808175,
            ),
            (
                791621549,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                791621423,
            ),
            (
                791621423,
                   0,
            ),
        ],
    },
    get_edge_count_from_edge_type_id: GetEdgeCountFromEdgeTypeIdParams {
        edge_type_id: None,
    },
    get_node_count_from_node_type_id: GetNodeCountFromNodeTypeIdParams {
        node_type_id: None,
    },
    get_destination_node_id_from_edge_id: GetDestinationNodeIdFromEdgeIdParams {
        edge_id:    0,
    },
    get_neighbour_node_ids_from_node_id: GetNeighbourNodeIdsFromNodeIdParams {
        node_id:    0,
    },
    get_minmax_edge_ids_from_node_ids: GetMinmaxEdgeIdsFromNodeIdsParams {
        src:    0,
        dst:    0,
    },
    get_edge_id_from_node_ids_and_edge_type_id: GetEdgeIdFromNodeIdsAndEdgeTypeIdParams {
        src:    0,
        dst:    0,
        edge_type: None,
    },
    get_edge_type_ids_from_edge_type_names: GetEdgeTypeIdsFromEdgeTypeNamesParams {
        edge_type_names: [],
    },
    get_node_type_ids_from_node_type_names: GetNodeTypeIdsFromNodeTypeNamesParams {
        node_type_names: [],
    },
    get_minmax_edge_ids_from_source_node_id: GetMinmaxEdgeIdsFromSourceNodeIdParams {
        src:    0,
    },
    get_node_type_name_from_node_type_id: GetNodeTypeNameFromNodeTypeIdParams {
        node_type_id:    0,
    },
    filter_from_ids: FilterFromIdsParams {
        node_ids_to_keep: None,
        node_ids_to_filter: None,
        node_type_ids_to_keep: None,
        node_type_ids_to_filter: None,
        node_type_id_to_keep: None,
        node_type_id_to_filter: None,
        edge_ids_to_keep: None,
        edge_ids_to_filter: None,
        edge_node_ids_to_keep: None,
        edge_node_ids_to_filter: None,
        edge_type_ids_to_keep: None,
        edge_type_ids_to_filter: None,
        min_edge_weight: None,
        max_edge_weight: None,
        filter_singleton_nodes: None,
        filter_singleton_nodes_with_selfloop: None,
        filter_selfloops: None,
        filter_parallel_edges: None,
        verbose: None,
    },
    drop_unknown_node_types: DropUnknownNodeTypesParams {
        verbose: None,
    },
    drop_unknown_edge_types: DropUnknownEdgeTypesParams {
        verbose: None,
    },
    drop_singleton_nodes: DropSingletonNodesParams {
        verbose: None,
    },
    drop_singleton_nodes_with_selfloops: DropSingletonNodesWithSelfloopsParams {
        verbose: Some(
            false,
        ),
    },
    drop_selfloops: DropSelfloopsParams {
        verbose: None,
    },
    drop_parallel_edges: DropParallelEdgesParams {
        verbose: None,
    },
    validate_node_id: ValidateNodeIdParams {
        node_id:    0,
    },
    validate_node_ids: ValidateNodeIdsParams {
        node_ids: [],
    },
    validate_edge_id: ValidateEdgeIdParams {
        edge_id:    0,
    },
    validate_edge_ids: ValidateEdgeIdsParams {
        edge_ids: [],
    },
    validate_node_type_id: ValidateNodeTypeIdParams {
        node_type_id: None,
    },
    validate_node_type_ids: ValidateNodeTypeIdsParams {
        node_type_ids: [],
    },
    validate_edge_type_id: ValidateEdgeTypeIdParams {
        edge_type_id: None,
    },
    validate_edge_type_ids: ValidateEdgeTypeIdsParams {
        edge_type_ids: [],
    },
    remove_components: RemoveComponentsParams {
        node_names: None,
        node_types: None,
        edge_types: None,
        minimum_component_size: None,
        top_k_components: None,
        verbose: None,
    },
    par_iter_unweighted_closeness_centrality: ParIterUnweightedClosenessCentralityParams {
        verbose: None,
    },
    par_iter_weighted_closeness_centrality: ParIterWeightedClosenessCentralityParams {
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    get_unweighted_closeness_centrality: GetUnweightedClosenessCentralityParams {
        verbose: None,
    },
    get_weighted_closeness_centrality: GetWeightedClosenessCentralityParams {
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    par_iter_unweighted_harmonic_centrality: ParIterUnweightedHarmonicCentralityParams {
        verbose: None,
    },
    par_iter_weighted_harmonic_centrality: ParIterWeightedHarmonicCentralityParams {
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    get_unweighted_harmonic_centrality: GetUnweightedHarmonicCentralityParams {
        verbose: None,
    },
    get_weighted_harmonic_centrality: GetWeightedHarmonicCentralityParams {
        use_edge_weights_as_probabilities: None,
        verbose: None,
    },
    get_stress_centrality: GetStressCentralityParams {
        normalize: None,
        verbose: None,
    },
    get_betweenness_centrality: GetBetweennessCentralityParams {
        normalize: None,
        verbose: None,
    },
    get_unweighted_eigenvector_centrality: GetUnweightedEigenvectorCentralityParams {
        maximum_iterations_number: None,
        tollerance: None,
    },
    get_weighted_eigenvector_centrality: GetWeightedEigenvectorCentralityParams {
        maximum_iterations_number: None,
        tollerance: None,
    },
    set_name: SetNameParams {
        name: "\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{8}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{6}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{1}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}",
    },
    set_inplace_all_edge_types: SetInplaceAllEdgeTypesParams {
        edge_type: "\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{16}",
    },
    set_all_edge_types: SetAllEdgeTypesParams {
        edge_type: "",
        verbose: None,
    },
    set_inplace_all_node_types: SetInplaceAllNodeTypesParams {
        node_type: "ݨ\u{14}\\+\u{10}y\u{18}",
    },
    set_all_node_types: SetAllNodeTypesParams {
        node_type: "",
    },
    remove_inplace_node_type_ids: RemoveInplaceNodeTypeIdsParams {
        node_type_ids_to_remove: [],
    },
    remove_inplace_edge_type_ids: RemoveInplaceEdgeTypeIdsParams {
        edge_type_ids_to_remove: [
             888,
            11487,
            56538,
            28943,
        ],
    },
    remove_node_type_id: RemoveNodeTypeIdParams {
        node_type_id: 19110,
    },
    remove_edge_type_id: RemoveEdgeTypeIdParams {
        edge_type_id: 8644,
    },
    remove_edge_types: RemoveEdgeTypesParams {
        verbose: Some(
            false,
        ),
    },
    encode_edge: EncodeEdgeParams {
        src: 2057534951,
        dst: 3925733894,
    },
    decode_edge: DecodeEdgeParams {
        edge: 11343238620508670933,
    },
    get_bipartite_edges: GetBipartiteEdgesParams {
        removed_existing_edges: None,
        first_nodes_set: None,
        second_nodes_set: Some(
            {},
        ),
        first_node_types_set: None,
        second_node_types_set: Some(
            {},
        ),
    },
    get_bipartite_edge_names: GetBipartiteEdgeNamesParams {
        removed_existing_edges: None,
        first_nodes_set: Some(
            {},
        ),
        second_nodes_set: Some(
            {},
        ),
        first_node_types_set: Some(
            {},
        ),
        second_node_types_set: Some(
            {
                "\u{c}}I",
                "",
            },
        ),
    },
    get_star_edges: GetStarEdgesParams {
        central_node: "",
        removed_existing_edges: Some(
            false,
        ),
        star_points_nodes_set: None,
        star_points_node_types_set: None,
    },
    get_star_edge_names: GetStarEdgeNamesParams {
        central_node: "",
        removed_existing_edges: Some(
            true,
        ),
        star_points_nodes_set: None,
        star_points_node_types_set: Some(
            {},
        ),
    },
    get_clique_edges: GetCliqueEdgesParams {
        directed: None,
        allow_selfloops: Some(
            true,
        ),
        removed_existing_edges: None,
        allow_node_type_set: None,
        allow_node_set: Some(
            {
                "",
                "%",
            },
        ),
    },
    get_clique_edge_names: GetCliqueEdgeNamesParams {
        directed: None,
        allow_selfloops: Some(
            false,
        ),
        removed_existing_edges: None,
        allow_node_type_set: Some(
            {
                "h",
                "",
                "W",
                "t",
            },
        ),
        allow_node_set: None,
    },
    replace: ReplaceParams {
        node_name_mapping: None,
        node_type_name_mapping: None,
        node_type_names_mapping: None,
        edge_type_name_mapping: None,
        verbose: Some(
            false,
        ),
    },
    replace_unknown_node_types_with_node_type_name: ReplaceUnknownNodeTypesWithNodeTypeNameParams {
        node_type_names: [],
        verbose: None,
    },
    replace_unknown_edge_types_with_edge_type_name: ReplaceUnknownEdgeTypesWithEdgeTypeNameParams {
        edge_type_name: "",
        verbose: None,
    },
    get_node_report_from_node_id: GetNodeReportFromNodeIdParams {
        node_id: 3614560091,
    },
    textual_report: TextualReportParams {
        verbose: None,
    },
    get_connected_components_number: GetConnectedComponentsNumberParams {
        verbose: Some(
            true,
        ),
    },
    get_source_node_ids: GetSourceNodeIdsParams {
        directed: true,
    },
    get_source_names: GetSourceNamesParams {
        directed: false,
    },
    get_destination_node_ids: GetDestinationNodeIdsParams {
        directed: false,
    },
    get_destination_names: GetDestinationNamesParams {
        directed: false,
    },
    get_edge_node_ids: GetEdgeNodeIdsParams {
        directed: true,
    },
    get_edge_node_names: GetEdgeNodeNamesParams {
        directed: true,
    },
    get_node_connected_component_ids: GetNodeConnectedComponentIdsParams {
        verbose: Some(
            false,
        ),
    },
    get_dense_weighted_adjacency_matrix: GetDenseWeightedAdjacencyMatrixParams {
        weight: None,
    },
    iter_source_node_ids: IterSourceNodeIdsParams {
        directed: false,
    },
    par_iter_source_node_ids: ParIterSourceNodeIdsParams {
        directed: true,
    },
    iter_destination_node_ids: IterDestinationNodeIdsParams {
        directed: true,
    },
    par_iter_destination_node_ids: ParIterDestinationNodeIdsParams {
        directed: false,
    },
    iter_edge_ids: IterEdgeIdsParams {
        directed: true,
    },
    iter_edges: IterEdgesParams {
        directed: false,
    },
    par_iter_edge_ids: ParIterEdgeIdsParams {
        directed: false,
    },
    par_iter_edges: ParIterEdgesParams {
        directed: false,
    },
    iter_edge_node_ids_and_edge_type_id: IterEdgeNodeIdsAndEdgeTypeIdParams {
        directed: false,
    },
    iter_edge_node_names_and_edge_type_name: IterEdgeNodeNamesAndEdgeTypeNameParams {
        directed: false,
    },
    par_iter_edge_node_names_and_edge_type_name: ParIterEdgeNodeNamesAndEdgeTypeNameParams {
        directed: true,
    },
    par_iter_edge_node_ids_and_edge_type_id: ParIterEdgeNodeIdsAndEdgeTypeIdParams {
        directed: false,
    },
    par_iter_edge_node_names_and_edge_type_name_and_edge_weight: ParIterEdgeNodeNamesAndEdgeTypeNameAndEdgeWeightParams {
        directed: true,
    },
    iter_edge_node_names_and_edge_type_name_and_edge_weight: IterEdgeNodeNamesAndEdgeTypeNameAndEdgeWeightParams {
        directed: true,
    },
    par_iter_edge_node_ids_and_edge_type_id_and_edge_weight: ParIterEdgeNodeIdsAndEdgeTypeIdAndEdgeWeightParams {
        directed: true,
    },
    iter_edge_node_ids_and_edge_type_id_and_edge_weight: IterEdgeNodeIdsAndEdgeTypeIdAndEdgeWeightParams {
        directed: false,
    },
    iter_unique_edge_node_ids: IterUniqueEdgeNodeIdsParams {
        directed: false,
    },
    iter_edge_node_ids_with_unknown_edge_types: IterEdgeNodeIdsWithUnknownEdgeTypesParams {
        directed: true,
    },
    iter_edge_node_ids_with_known_edge_types: IterEdgeNodeIdsWithKnownEdgeTypesParams {
        directed: false,
    },
    par_iter_edge_node_ids_with_unknown_edge_types: ParIterEdgeNodeIdsWithUnknownEdgeTypesParams {
        directed: false,
    },
    par_iter_edge_node_ids_with_known_edge_types: ParIterEdgeNodeIdsWithKnownEdgeTypesParams {
        directed: true,
    },
    get_unweighted_laplacian_transformed_graph: GetUnweightedLaplacianTransformedGraphParams {
        verbose: Some(
            false,
        ),
    },
    get_unweighted_random_walk_normalized_laplacian_transformed_graph: GetUnweightedRandomWalkNormalizedLaplacianTransformedGraphParams {
        verbose: None,
    },
    get_unweighted_symmetric_normalized_laplacian_transformed_graph: GetUnweightedSymmetricNormalizedLaplacianTransformedGraphParams {
        verbose: Some(
            false,
        ),
    },
    get_unweighted_symmetric_normalized_transformed_graph: GetUnweightedSymmetricNormalizedTransformedGraphParams {
        verbose: None,
    },
    get_weighted_laplacian_transformed_graph: GetWeightedLaplacianTransformedGraphParams {
        verbose: Some(
            false,
        ),
    },
    get_weighted_symmetric_normalized_laplacian_transformed_graph: GetWeightedSymmetricNormalizedLaplacianTransformedGraphParams {
        verbose: None,
    },
    get_weighted_symmetric_normalized_transformed_graph: GetWeightedSymmetricNormalizedTransformedGraphParams {
        verbose: Some(
            false,
        ),
    },
    get_weighted_random_walk_normalized_laplacian_transformed_graph: GetWeightedRandomWalkNormalizedLaplacianTransformedGraphParams {
        verbose: Some(
            true,
        ),
    },
    is_connected: IsConnectedParams {
        verbose: None,
    },
    connected_holdout: ConnectedHoldoutParams {
        train_size: 129267662236328380000.0,
        random_state: Some(
            9291487421544256596,
        ),
        edge_types: Some(
            [],
        ),
        include_all_edge_types: None,
        verbose: Some(
            false,
        ),
    },
    random_holdout: RandomHoldoutParams {
        train_size: -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016890904770309135,
        random_state: None,
        include_all_edge_types: Some(
            true,
        ),
        edge_types: Some(
            [
                None,
            ],
        ),
        min_number_overlaps: Some(
            12676235710979690695,
        ),
        verbose: Some(
            true,
        ),
    },
    node_label_holdout: NodeLabelHoldoutParams {
        train_size: -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031976415391471223,
        use_stratification: Some(
            true,
        ),
        random_state: Some(
            17941626384804672481,
        ),
    },
    edge_label_holdout: EdgeLabelHoldoutParams {
        train_size: 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026225693446710636,
        use_stratification: Some(
            true,
        ),
        random_state: Some(
            1488648624976738977,
        ),
    },
    random_subgraph: RandomSubgraphParams {
        nodes_number: 4125851841,
        random_state: None,
        verbose: None,
    },
    kfold: KfoldParams {
        k: 3272283829007077674,
        k_index: 3399988123389603716,
        edge_types: Some(
            [
                Some(
                    "//////////////////~\u{0}/////43874519/////////////////////////////////////////////////////////////0//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                ),
                Some(
                    "//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////0//////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                ),
                Some(
                    "//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////.//////",
                ),
                Some(
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                ),
                Some(
                    "///////////////////////////////////////////////////////////////////////////////////////////////////////",
                ),
            ],
        ),
        random_state: Some(
            3399988123389603631,
        ),
        verbose: Some(
            true,
        ),
    },
    from_vec: FromVecHarnessParams {
        directed: true,
        directed_edge_list: true,
        ignore_duplicated_nodes: true,
        ignore_duplicated_edges: true,
        verbose: false,
        numeric_edge_types_ids: false,
        numeric_node_ids: false,
        numeric_edge_node_ids: false,
        numeric_node_types_ids: false,
        has_node_types: false,
        has_edge_types: false,
        has_edge_weights: true,
        edges: [
            Ok(
                (
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    Some(
                        "////////////////////////////////////.////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    ),
                    Some(
                        0.0000000001593292,
                    ),
                ),
            ),
            Ok(
                (
                    "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    Some(
                        "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    ),
                    Some(
                        0.0000000001593292,
                    ),
                ),
            ),
            Ok(
                (
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    Some(
                        "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    ),
                    Some(
                        0.0000000001593292,
                    ),
                ),
            ),
            Ok(
                (
                    "///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}\u{0}>//////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    Some(
                        "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    ),
                    Some(
                        0.0000000001593292,
                    ),
                ),
            ),
            Ok(
                (
                    "//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////48886332///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                    Some(
                        "/////////////////////////////hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh",
                    ),
                    Some(
                        -958881900.0,
                    ),
                ),
            ),
        ],
        nodes: Some(
            [],
        ),
    },
}