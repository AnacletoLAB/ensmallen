
start: function

function: function_qualifiers "fn" function_name "(" function_parameters ")" function_return_type?

function_name: IDENTIFIER generic_params?

function_qualifiers: ("pub" "(crate)"?)? "const"? "async"? "unsafe"? ("extern" IDENTIFIER?)? 

function_parameters: self_param ","?
    | (self_param ",")? function_param ("," function_param)* ","?

!self_param: ("&" | "&" life_time)? "mut"? "self"
function_param: IDENTIFIER ":" type // simplified
function_return_type: "->" type

generic_params: "<" lifetime_or_type? ("," lifetime_or_type)* ","? ">"

lifetime_or_type: life_time
    | IDENTIFIER ":" type


!type: 
    | IDENTIFIER
    | type_with_modifiers
    | tuple_type
    | slice_type
    | impl_type
    | bound_type
    | summed_type
    | function_type
    
!type_with_modifiers: ("&" life_time?)? "mut"? type
slice_type: "[" type "]" 
tuple_type: "(" (type ("," type)* ","?)? ")"
impl_type: "impl" type   //tecnically wrong but we don't care
bound_type: IDENTIFIER "<" (assign_type | type) ("," (assign_type | type))* ","? ">"
assign_type: IDENTIFIER "=" type
function_type: "Fn" "(" type ")" function_return_type
summed_type: type "+" (life_time | type)
    
life_time: "'" /./

IDENTIFIER : /[a-z A-Z][a-z A-Z 0-9 _]*/
    | /_[a-z A-Z 0-9 _]+/

%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS